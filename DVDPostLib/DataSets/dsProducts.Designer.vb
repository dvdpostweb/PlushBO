'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5472
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsProducts"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsProducts
    Inherits Global.System.Data.DataSet
    
    Private tableproducts As productsDataTable
    
    Private tableproducts_combo As products_comboDataTable
    
    Private tableproducts_description As products_descriptionDataTable
    
    Private tableproducts_labels As products_labelsDataTable
    
    Private tableproducts_description1 As products_description1DataTable
    
    Private tableproducts_view1 As products_view1DataTable
    
    Private tableactors As actorsDataTable
    
    Private tabledirectors As directorsDataTable
    
    Private tablecategories As categoriesDataTable
    
    Private tablecategories_description As categories_descriptionDataTable
    
    Private tableproducts_to_actors As products_to_actorsDataTable
    
    Private tableproducts_to_categories As products_to_categoriesDataTable
    
    Private tableproducts_undertitles_View1 As products_undertitles_View1DataTable
    
    Private tableproducts_languages_View1 As products_languages_View1DataTable
    
    Private tablelanguages As languagesDataTable
    
    Private tableproducts_cover_view1 As products_cover_view1DataTable
    
    Private tabletmp_products_nl As tmp_products_nlDataTable
    
    Private tableview_products_status As view_products_statusDataTable
    
    Private tableview_products_type As view_products_typeDataTable
    
    Private tableview_products_media As view_products_mediaDataTable
    
    Private tableproducts_countries As products_countriesDataTable
    
    Private tablestudio As studioDataTable
    
    Private tableview_products_availability As view_products_availabilityDataTable
    
    Private tableview_products_rating As view_products_ratingDataTable
    
    Private tablepicture_format As picture_formatDataTable
    
    Private tablepublic1 As public1DataTable
    
    Private tableseries As seriesDataTable
    
    Private tableproducts_languages As products_languagesDataTable
    
    Private tableproducts_undertitles As products_undertitlesDataTable
    
    Private tableproducts_to_languages As products_to_languagesDataTable
    
    Private tableproducts_to_undertitles As products_to_undertitlesDataTable
    
    Private tableproducts_soundtracks As products_soundtracksDataTable
    
    Private tableproducts_trailers As products_trailersDataTable
    
    Private tableproducts_to_soundtracks As products_to_soundtracksDataTable
    
    Private tableproducts_description_fr As products_description_frDataTable
    
    Private tableproducts_description_nl As products_description_nlDataTable
    
    Private tableproducts_description_en As products_description_enDataTable
    
    Private tablecategories_fr_view1 As categories_fr_view1DataTable
    
    Private tabletrailers_broadcast As trailers_broadcastDataTable
    
    Private tableproduct_type As product_typeDataTable
    
    Private _tablecommon_production_reviews As _common_production_reviewsDataTable
    
    Private tablestreaming_products As streaming_productsDataTable
    
    Private tablestreaming_trailers As streaming_trailersDataTable
    
    Private tablereviews As reviewsDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("products")) Is Nothing) Then
                MyBase.Tables.Add(New productsDataTable(ds.Tables("products")))
            End If
            If (Not (ds.Tables("products_combo")) Is Nothing) Then
                MyBase.Tables.Add(New products_comboDataTable(ds.Tables("products_combo")))
            End If
            If (Not (ds.Tables("products_description")) Is Nothing) Then
                MyBase.Tables.Add(New products_descriptionDataTable(ds.Tables("products_description")))
            End If
            If (Not (ds.Tables("products_labels")) Is Nothing) Then
                MyBase.Tables.Add(New products_labelsDataTable(ds.Tables("products_labels")))
            End If
            If (Not (ds.Tables("products_description1")) Is Nothing) Then
                MyBase.Tables.Add(New products_description1DataTable(ds.Tables("products_description1")))
            End If
            If (Not (ds.Tables("products_view1")) Is Nothing) Then
                MyBase.Tables.Add(New products_view1DataTable(ds.Tables("products_view1")))
            End If
            If (Not (ds.Tables("actors")) Is Nothing) Then
                MyBase.Tables.Add(New actorsDataTable(ds.Tables("actors")))
            End If
            If (Not (ds.Tables("directors")) Is Nothing) Then
                MyBase.Tables.Add(New directorsDataTable(ds.Tables("directors")))
            End If
            If (Not (ds.Tables("categories")) Is Nothing) Then
                MyBase.Tables.Add(New categoriesDataTable(ds.Tables("categories")))
            End If
            If (Not (ds.Tables("categories_description")) Is Nothing) Then
                MyBase.Tables.Add(New categories_descriptionDataTable(ds.Tables("categories_description")))
            End If
            If (Not (ds.Tables("products_to_actors")) Is Nothing) Then
                MyBase.Tables.Add(New products_to_actorsDataTable(ds.Tables("products_to_actors")))
            End If
            If (Not (ds.Tables("products_to_categories")) Is Nothing) Then
                MyBase.Tables.Add(New products_to_categoriesDataTable(ds.Tables("products_to_categories")))
            End If
            If (Not (ds.Tables("products_undertitles_View1")) Is Nothing) Then
                MyBase.Tables.Add(New products_undertitles_View1DataTable(ds.Tables("products_undertitles_View1")))
            End If
            If (Not (ds.Tables("products_languages_View1")) Is Nothing) Then
                MyBase.Tables.Add(New products_languages_View1DataTable(ds.Tables("products_languages_View1")))
            End If
            If (Not (ds.Tables("languages")) Is Nothing) Then
                MyBase.Tables.Add(New languagesDataTable(ds.Tables("languages")))
            End If
            If (Not (ds.Tables("products_cover_view1")) Is Nothing) Then
                MyBase.Tables.Add(New products_cover_view1DataTable(ds.Tables("products_cover_view1")))
            End If
            If (Not (ds.Tables("tmp_products_nl")) Is Nothing) Then
                MyBase.Tables.Add(New tmp_products_nlDataTable(ds.Tables("tmp_products_nl")))
            End If
            If (Not (ds.Tables("view_products_status")) Is Nothing) Then
                MyBase.Tables.Add(New view_products_statusDataTable(ds.Tables("view_products_status")))
            End If
            If (Not (ds.Tables("view_products_type")) Is Nothing) Then
                MyBase.Tables.Add(New view_products_typeDataTable(ds.Tables("view_products_type")))
            End If
            If (Not (ds.Tables("view_products_media")) Is Nothing) Then
                MyBase.Tables.Add(New view_products_mediaDataTable(ds.Tables("view_products_media")))
            End If
            If (Not (ds.Tables("products_countries")) Is Nothing) Then
                MyBase.Tables.Add(New products_countriesDataTable(ds.Tables("products_countries")))
            End If
            If (Not (ds.Tables("studio")) Is Nothing) Then
                MyBase.Tables.Add(New studioDataTable(ds.Tables("studio")))
            End If
            If (Not (ds.Tables("view_products_availability")) Is Nothing) Then
                MyBase.Tables.Add(New view_products_availabilityDataTable(ds.Tables("view_products_availability")))
            End If
            If (Not (ds.Tables("view_products_rating")) Is Nothing) Then
                MyBase.Tables.Add(New view_products_ratingDataTable(ds.Tables("view_products_rating")))
            End If
            If (Not (ds.Tables("picture_format")) Is Nothing) Then
                MyBase.Tables.Add(New picture_formatDataTable(ds.Tables("picture_format")))
            End If
            If (Not (ds.Tables("public1")) Is Nothing) Then
                MyBase.Tables.Add(New public1DataTable(ds.Tables("public1")))
            End If
            If (Not (ds.Tables("series")) Is Nothing) Then
                MyBase.Tables.Add(New seriesDataTable(ds.Tables("series")))
            End If
            If (Not (ds.Tables("products_languages")) Is Nothing) Then
                MyBase.Tables.Add(New products_languagesDataTable(ds.Tables("products_languages")))
            End If
            If (Not (ds.Tables("products_undertitles")) Is Nothing) Then
                MyBase.Tables.Add(New products_undertitlesDataTable(ds.Tables("products_undertitles")))
            End If
            If (Not (ds.Tables("products_to_languages")) Is Nothing) Then
                MyBase.Tables.Add(New products_to_languagesDataTable(ds.Tables("products_to_languages")))
            End If
            If (Not (ds.Tables("products_to_undertitles")) Is Nothing) Then
                MyBase.Tables.Add(New products_to_undertitlesDataTable(ds.Tables("products_to_undertitles")))
            End If
            If (Not (ds.Tables("products_soundtracks")) Is Nothing) Then
                MyBase.Tables.Add(New products_soundtracksDataTable(ds.Tables("products_soundtracks")))
            End If
            If (Not (ds.Tables("products_trailers")) Is Nothing) Then
                MyBase.Tables.Add(New products_trailersDataTable(ds.Tables("products_trailers")))
            End If
            If (Not (ds.Tables("products_to_soundtracks")) Is Nothing) Then
                MyBase.Tables.Add(New products_to_soundtracksDataTable(ds.Tables("products_to_soundtracks")))
            End If
            If (Not (ds.Tables("products_description_fr")) Is Nothing) Then
                MyBase.Tables.Add(New products_description_frDataTable(ds.Tables("products_description_fr")))
            End If
            If (Not (ds.Tables("products_description_nl")) Is Nothing) Then
                MyBase.Tables.Add(New products_description_nlDataTable(ds.Tables("products_description_nl")))
            End If
            If (Not (ds.Tables("products_description_en")) Is Nothing) Then
                MyBase.Tables.Add(New products_description_enDataTable(ds.Tables("products_description_en")))
            End If
            If (Not (ds.Tables("categories_fr_view1")) Is Nothing) Then
                MyBase.Tables.Add(New categories_fr_view1DataTable(ds.Tables("categories_fr_view1")))
            End If
            If (Not (ds.Tables("trailers_broadcast")) Is Nothing) Then
                MyBase.Tables.Add(New trailers_broadcastDataTable(ds.Tables("trailers_broadcast")))
            End If
            If (Not (ds.Tables("product_type")) Is Nothing) Then
                MyBase.Tables.Add(New product_typeDataTable(ds.Tables("product_type")))
            End If
            If (Not (ds.Tables("common_production.reviews")) Is Nothing) Then
                MyBase.Tables.Add(New _common_production_reviewsDataTable(ds.Tables("common_production.reviews")))
            End If
            If (Not (ds.Tables("streaming_products")) Is Nothing) Then
                MyBase.Tables.Add(New streaming_productsDataTable(ds.Tables("streaming_products")))
            End If
            If (Not (ds.Tables("streaming_trailers")) Is Nothing) Then
                MyBase.Tables.Add(New streaming_trailersDataTable(ds.Tables("streaming_trailers")))
            End If
            If (Not (ds.Tables("reviews")) Is Nothing) Then
                MyBase.Tables.Add(New reviewsDataTable(ds.Tables("reviews")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property products() As productsDataTable
        Get
            Return Me.tableproducts
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property products_combo() As products_comboDataTable
        Get
            Return Me.tableproducts_combo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property products_description() As products_descriptionDataTable
        Get
            Return Me.tableproducts_description
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property products_labels() As products_labelsDataTable
        Get
            Return Me.tableproducts_labels
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property products_description1() As products_description1DataTable
        Get
            Return Me.tableproducts_description1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property products_view1() As products_view1DataTable
        Get
            Return Me.tableproducts_view1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property actors() As actorsDataTable
        Get
            Return Me.tableactors
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property directors() As directorsDataTable
        Get
            Return Me.tabledirectors
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property categories() As categoriesDataTable
        Get
            Return Me.tablecategories
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property categories_description() As categories_descriptionDataTable
        Get
            Return Me.tablecategories_description
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property products_to_actors() As products_to_actorsDataTable
        Get
            Return Me.tableproducts_to_actors
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property products_to_categories() As products_to_categoriesDataTable
        Get
            Return Me.tableproducts_to_categories
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property products_undertitles_View1() As products_undertitles_View1DataTable
        Get
            Return Me.tableproducts_undertitles_View1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property products_languages_View1() As products_languages_View1DataTable
        Get
            Return Me.tableproducts_languages_View1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property languages() As languagesDataTable
        Get
            Return Me.tablelanguages
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property products_cover_view1() As products_cover_view1DataTable
        Get
            Return Me.tableproducts_cover_view1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tmp_products_nl() As tmp_products_nlDataTable
        Get
            Return Me.tabletmp_products_nl
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property view_products_status() As view_products_statusDataTable
        Get
            Return Me.tableview_products_status
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property view_products_type() As view_products_typeDataTable
        Get
            Return Me.tableview_products_type
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property view_products_media() As view_products_mediaDataTable
        Get
            Return Me.tableview_products_media
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property products_countries() As products_countriesDataTable
        Get
            Return Me.tableproducts_countries
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property studio() As studioDataTable
        Get
            Return Me.tablestudio
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property view_products_availability() As view_products_availabilityDataTable
        Get
            Return Me.tableview_products_availability
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property view_products_rating() As view_products_ratingDataTable
        Get
            Return Me.tableview_products_rating
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property picture_format() As picture_formatDataTable
        Get
            Return Me.tablepicture_format
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property public1() As public1DataTable
        Get
            Return Me.tablepublic1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property series() As seriesDataTable
        Get
            Return Me.tableseries
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property products_languages() As products_languagesDataTable
        Get
            Return Me.tableproducts_languages
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property products_undertitles() As products_undertitlesDataTable
        Get
            Return Me.tableproducts_undertitles
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property products_to_languages() As products_to_languagesDataTable
        Get
            Return Me.tableproducts_to_languages
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property products_to_undertitles() As products_to_undertitlesDataTable
        Get
            Return Me.tableproducts_to_undertitles
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property products_soundtracks() As products_soundtracksDataTable
        Get
            Return Me.tableproducts_soundtracks
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property products_trailers() As products_trailersDataTable
        Get
            Return Me.tableproducts_trailers
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property products_to_soundtracks() As products_to_soundtracksDataTable
        Get
            Return Me.tableproducts_to_soundtracks
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property products_description_fr() As products_description_frDataTable
        Get
            Return Me.tableproducts_description_fr
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property products_description_nl() As products_description_nlDataTable
        Get
            Return Me.tableproducts_description_nl
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property products_description_en() As products_description_enDataTable
        Get
            Return Me.tableproducts_description_en
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property categories_fr_view1() As categories_fr_view1DataTable
        Get
            Return Me.tablecategories_fr_view1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property trailers_broadcast() As trailers_broadcastDataTable
        Get
            Return Me.tabletrailers_broadcast
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property product_type() As product_typeDataTable
        Get
            Return Me.tableproduct_type
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _common_production_reviews() As _common_production_reviewsDataTable
        Get
            Return Me._tablecommon_production_reviews
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property streaming_products() As streaming_productsDataTable
        Get
            Return Me.tablestreaming_products
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property streaming_trailers() As streaming_trailersDataTable
        Get
            Return Me.tablestreaming_trailers
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property reviews() As reviewsDataTable
        Get
            Return Me.tablereviews
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsProducts = CType(MyBase.Clone,dsProducts)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("products")) Is Nothing) Then
                MyBase.Tables.Add(New productsDataTable(ds.Tables("products")))
            End If
            If (Not (ds.Tables("products_combo")) Is Nothing) Then
                MyBase.Tables.Add(New products_comboDataTable(ds.Tables("products_combo")))
            End If
            If (Not (ds.Tables("products_description")) Is Nothing) Then
                MyBase.Tables.Add(New products_descriptionDataTable(ds.Tables("products_description")))
            End If
            If (Not (ds.Tables("products_labels")) Is Nothing) Then
                MyBase.Tables.Add(New products_labelsDataTable(ds.Tables("products_labels")))
            End If
            If (Not (ds.Tables("products_description1")) Is Nothing) Then
                MyBase.Tables.Add(New products_description1DataTable(ds.Tables("products_description1")))
            End If
            If (Not (ds.Tables("products_view1")) Is Nothing) Then
                MyBase.Tables.Add(New products_view1DataTable(ds.Tables("products_view1")))
            End If
            If (Not (ds.Tables("actors")) Is Nothing) Then
                MyBase.Tables.Add(New actorsDataTable(ds.Tables("actors")))
            End If
            If (Not (ds.Tables("directors")) Is Nothing) Then
                MyBase.Tables.Add(New directorsDataTable(ds.Tables("directors")))
            End If
            If (Not (ds.Tables("categories")) Is Nothing) Then
                MyBase.Tables.Add(New categoriesDataTable(ds.Tables("categories")))
            End If
            If (Not (ds.Tables("categories_description")) Is Nothing) Then
                MyBase.Tables.Add(New categories_descriptionDataTable(ds.Tables("categories_description")))
            End If
            If (Not (ds.Tables("products_to_actors")) Is Nothing) Then
                MyBase.Tables.Add(New products_to_actorsDataTable(ds.Tables("products_to_actors")))
            End If
            If (Not (ds.Tables("products_to_categories")) Is Nothing) Then
                MyBase.Tables.Add(New products_to_categoriesDataTable(ds.Tables("products_to_categories")))
            End If
            If (Not (ds.Tables("products_undertitles_View1")) Is Nothing) Then
                MyBase.Tables.Add(New products_undertitles_View1DataTable(ds.Tables("products_undertitles_View1")))
            End If
            If (Not (ds.Tables("products_languages_View1")) Is Nothing) Then
                MyBase.Tables.Add(New products_languages_View1DataTable(ds.Tables("products_languages_View1")))
            End If
            If (Not (ds.Tables("languages")) Is Nothing) Then
                MyBase.Tables.Add(New languagesDataTable(ds.Tables("languages")))
            End If
            If (Not (ds.Tables("products_cover_view1")) Is Nothing) Then
                MyBase.Tables.Add(New products_cover_view1DataTable(ds.Tables("products_cover_view1")))
            End If
            If (Not (ds.Tables("tmp_products_nl")) Is Nothing) Then
                MyBase.Tables.Add(New tmp_products_nlDataTable(ds.Tables("tmp_products_nl")))
            End If
            If (Not (ds.Tables("view_products_status")) Is Nothing) Then
                MyBase.Tables.Add(New view_products_statusDataTable(ds.Tables("view_products_status")))
            End If
            If (Not (ds.Tables("view_products_type")) Is Nothing) Then
                MyBase.Tables.Add(New view_products_typeDataTable(ds.Tables("view_products_type")))
            End If
            If (Not (ds.Tables("view_products_media")) Is Nothing) Then
                MyBase.Tables.Add(New view_products_mediaDataTable(ds.Tables("view_products_media")))
            End If
            If (Not (ds.Tables("products_countries")) Is Nothing) Then
                MyBase.Tables.Add(New products_countriesDataTable(ds.Tables("products_countries")))
            End If
            If (Not (ds.Tables("studio")) Is Nothing) Then
                MyBase.Tables.Add(New studioDataTable(ds.Tables("studio")))
            End If
            If (Not (ds.Tables("view_products_availability")) Is Nothing) Then
                MyBase.Tables.Add(New view_products_availabilityDataTable(ds.Tables("view_products_availability")))
            End If
            If (Not (ds.Tables("view_products_rating")) Is Nothing) Then
                MyBase.Tables.Add(New view_products_ratingDataTable(ds.Tables("view_products_rating")))
            End If
            If (Not (ds.Tables("picture_format")) Is Nothing) Then
                MyBase.Tables.Add(New picture_formatDataTable(ds.Tables("picture_format")))
            End If
            If (Not (ds.Tables("public1")) Is Nothing) Then
                MyBase.Tables.Add(New public1DataTable(ds.Tables("public1")))
            End If
            If (Not (ds.Tables("series")) Is Nothing) Then
                MyBase.Tables.Add(New seriesDataTable(ds.Tables("series")))
            End If
            If (Not (ds.Tables("products_languages")) Is Nothing) Then
                MyBase.Tables.Add(New products_languagesDataTable(ds.Tables("products_languages")))
            End If
            If (Not (ds.Tables("products_undertitles")) Is Nothing) Then
                MyBase.Tables.Add(New products_undertitlesDataTable(ds.Tables("products_undertitles")))
            End If
            If (Not (ds.Tables("products_to_languages")) Is Nothing) Then
                MyBase.Tables.Add(New products_to_languagesDataTable(ds.Tables("products_to_languages")))
            End If
            If (Not (ds.Tables("products_to_undertitles")) Is Nothing) Then
                MyBase.Tables.Add(New products_to_undertitlesDataTable(ds.Tables("products_to_undertitles")))
            End If
            If (Not (ds.Tables("products_soundtracks")) Is Nothing) Then
                MyBase.Tables.Add(New products_soundtracksDataTable(ds.Tables("products_soundtracks")))
            End If
            If (Not (ds.Tables("products_trailers")) Is Nothing) Then
                MyBase.Tables.Add(New products_trailersDataTable(ds.Tables("products_trailers")))
            End If
            If (Not (ds.Tables("products_to_soundtracks")) Is Nothing) Then
                MyBase.Tables.Add(New products_to_soundtracksDataTable(ds.Tables("products_to_soundtracks")))
            End If
            If (Not (ds.Tables("products_description_fr")) Is Nothing) Then
                MyBase.Tables.Add(New products_description_frDataTable(ds.Tables("products_description_fr")))
            End If
            If (Not (ds.Tables("products_description_nl")) Is Nothing) Then
                MyBase.Tables.Add(New products_description_nlDataTable(ds.Tables("products_description_nl")))
            End If
            If (Not (ds.Tables("products_description_en")) Is Nothing) Then
                MyBase.Tables.Add(New products_description_enDataTable(ds.Tables("products_description_en")))
            End If
            If (Not (ds.Tables("categories_fr_view1")) Is Nothing) Then
                MyBase.Tables.Add(New categories_fr_view1DataTable(ds.Tables("categories_fr_view1")))
            End If
            If (Not (ds.Tables("trailers_broadcast")) Is Nothing) Then
                MyBase.Tables.Add(New trailers_broadcastDataTable(ds.Tables("trailers_broadcast")))
            End If
            If (Not (ds.Tables("product_type")) Is Nothing) Then
                MyBase.Tables.Add(New product_typeDataTable(ds.Tables("product_type")))
            End If
            If (Not (ds.Tables("common_production.reviews")) Is Nothing) Then
                MyBase.Tables.Add(New _common_production_reviewsDataTable(ds.Tables("common_production.reviews")))
            End If
            If (Not (ds.Tables("streaming_products")) Is Nothing) Then
                MyBase.Tables.Add(New streaming_productsDataTable(ds.Tables("streaming_products")))
            End If
            If (Not (ds.Tables("streaming_trailers")) Is Nothing) Then
                MyBase.Tables.Add(New streaming_trailersDataTable(ds.Tables("streaming_trailers")))
            End If
            If (Not (ds.Tables("reviews")) Is Nothing) Then
                MyBase.Tables.Add(New reviewsDataTable(ds.Tables("reviews")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableproducts = CType(MyBase.Tables("products"),productsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableproducts) Is Nothing) Then
                Me.tableproducts.InitVars
            End If
        End If
        Me.tableproducts_combo = CType(MyBase.Tables("products_combo"),products_comboDataTable)
        If (initTable = true) Then
            If (Not (Me.tableproducts_combo) Is Nothing) Then
                Me.tableproducts_combo.InitVars
            End If
        End If
        Me.tableproducts_description = CType(MyBase.Tables("products_description"),products_descriptionDataTable)
        If (initTable = true) Then
            If (Not (Me.tableproducts_description) Is Nothing) Then
                Me.tableproducts_description.InitVars
            End If
        End If
        Me.tableproducts_labels = CType(MyBase.Tables("products_labels"),products_labelsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableproducts_labels) Is Nothing) Then
                Me.tableproducts_labels.InitVars
            End If
        End If
        Me.tableproducts_description1 = CType(MyBase.Tables("products_description1"),products_description1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableproducts_description1) Is Nothing) Then
                Me.tableproducts_description1.InitVars
            End If
        End If
        Me.tableproducts_view1 = CType(MyBase.Tables("products_view1"),products_view1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableproducts_view1) Is Nothing) Then
                Me.tableproducts_view1.InitVars
            End If
        End If
        Me.tableactors = CType(MyBase.Tables("actors"),actorsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableactors) Is Nothing) Then
                Me.tableactors.InitVars
            End If
        End If
        Me.tabledirectors = CType(MyBase.Tables("directors"),directorsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledirectors) Is Nothing) Then
                Me.tabledirectors.InitVars
            End If
        End If
        Me.tablecategories = CType(MyBase.Tables("categories"),categoriesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecategories) Is Nothing) Then
                Me.tablecategories.InitVars
            End If
        End If
        Me.tablecategories_description = CType(MyBase.Tables("categories_description"),categories_descriptionDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecategories_description) Is Nothing) Then
                Me.tablecategories_description.InitVars
            End If
        End If
        Me.tableproducts_to_actors = CType(MyBase.Tables("products_to_actors"),products_to_actorsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableproducts_to_actors) Is Nothing) Then
                Me.tableproducts_to_actors.InitVars
            End If
        End If
        Me.tableproducts_to_categories = CType(MyBase.Tables("products_to_categories"),products_to_categoriesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableproducts_to_categories) Is Nothing) Then
                Me.tableproducts_to_categories.InitVars
            End If
        End If
        Me.tableproducts_undertitles_View1 = CType(MyBase.Tables("products_undertitles_View1"),products_undertitles_View1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableproducts_undertitles_View1) Is Nothing) Then
                Me.tableproducts_undertitles_View1.InitVars
            End If
        End If
        Me.tableproducts_languages_View1 = CType(MyBase.Tables("products_languages_View1"),products_languages_View1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableproducts_languages_View1) Is Nothing) Then
                Me.tableproducts_languages_View1.InitVars
            End If
        End If
        Me.tablelanguages = CType(MyBase.Tables("languages"),languagesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablelanguages) Is Nothing) Then
                Me.tablelanguages.InitVars
            End If
        End If
        Me.tableproducts_cover_view1 = CType(MyBase.Tables("products_cover_view1"),products_cover_view1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableproducts_cover_view1) Is Nothing) Then
                Me.tableproducts_cover_view1.InitVars
            End If
        End If
        Me.tabletmp_products_nl = CType(MyBase.Tables("tmp_products_nl"),tmp_products_nlDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletmp_products_nl) Is Nothing) Then
                Me.tabletmp_products_nl.InitVars
            End If
        End If
        Me.tableview_products_status = CType(MyBase.Tables("view_products_status"),view_products_statusDataTable)
        If (initTable = true) Then
            If (Not (Me.tableview_products_status) Is Nothing) Then
                Me.tableview_products_status.InitVars
            End If
        End If
        Me.tableview_products_type = CType(MyBase.Tables("view_products_type"),view_products_typeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableview_products_type) Is Nothing) Then
                Me.tableview_products_type.InitVars
            End If
        End If
        Me.tableview_products_media = CType(MyBase.Tables("view_products_media"),view_products_mediaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableview_products_media) Is Nothing) Then
                Me.tableview_products_media.InitVars
            End If
        End If
        Me.tableproducts_countries = CType(MyBase.Tables("products_countries"),products_countriesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableproducts_countries) Is Nothing) Then
                Me.tableproducts_countries.InitVars
            End If
        End If
        Me.tablestudio = CType(MyBase.Tables("studio"),studioDataTable)
        If (initTable = true) Then
            If (Not (Me.tablestudio) Is Nothing) Then
                Me.tablestudio.InitVars
            End If
        End If
        Me.tableview_products_availability = CType(MyBase.Tables("view_products_availability"),view_products_availabilityDataTable)
        If (initTable = true) Then
            If (Not (Me.tableview_products_availability) Is Nothing) Then
                Me.tableview_products_availability.InitVars
            End If
        End If
        Me.tableview_products_rating = CType(MyBase.Tables("view_products_rating"),view_products_ratingDataTable)
        If (initTable = true) Then
            If (Not (Me.tableview_products_rating) Is Nothing) Then
                Me.tableview_products_rating.InitVars
            End If
        End If
        Me.tablepicture_format = CType(MyBase.Tables("picture_format"),picture_formatDataTable)
        If (initTable = true) Then
            If (Not (Me.tablepicture_format) Is Nothing) Then
                Me.tablepicture_format.InitVars
            End If
        End If
        Me.tablepublic1 = CType(MyBase.Tables("public1"),public1DataTable)
        If (initTable = true) Then
            If (Not (Me.tablepublic1) Is Nothing) Then
                Me.tablepublic1.InitVars
            End If
        End If
        Me.tableseries = CType(MyBase.Tables("series"),seriesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableseries) Is Nothing) Then
                Me.tableseries.InitVars
            End If
        End If
        Me.tableproducts_languages = CType(MyBase.Tables("products_languages"),products_languagesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableproducts_languages) Is Nothing) Then
                Me.tableproducts_languages.InitVars
            End If
        End If
        Me.tableproducts_undertitles = CType(MyBase.Tables("products_undertitles"),products_undertitlesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableproducts_undertitles) Is Nothing) Then
                Me.tableproducts_undertitles.InitVars
            End If
        End If
        Me.tableproducts_to_languages = CType(MyBase.Tables("products_to_languages"),products_to_languagesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableproducts_to_languages) Is Nothing) Then
                Me.tableproducts_to_languages.InitVars
            End If
        End If
        Me.tableproducts_to_undertitles = CType(MyBase.Tables("products_to_undertitles"),products_to_undertitlesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableproducts_to_undertitles) Is Nothing) Then
                Me.tableproducts_to_undertitles.InitVars
            End If
        End If
        Me.tableproducts_soundtracks = CType(MyBase.Tables("products_soundtracks"),products_soundtracksDataTable)
        If (initTable = true) Then
            If (Not (Me.tableproducts_soundtracks) Is Nothing) Then
                Me.tableproducts_soundtracks.InitVars
            End If
        End If
        Me.tableproducts_trailers = CType(MyBase.Tables("products_trailers"),products_trailersDataTable)
        If (initTable = true) Then
            If (Not (Me.tableproducts_trailers) Is Nothing) Then
                Me.tableproducts_trailers.InitVars
            End If
        End If
        Me.tableproducts_to_soundtracks = CType(MyBase.Tables("products_to_soundtracks"),products_to_soundtracksDataTable)
        If (initTable = true) Then
            If (Not (Me.tableproducts_to_soundtracks) Is Nothing) Then
                Me.tableproducts_to_soundtracks.InitVars
            End If
        End If
        Me.tableproducts_description_fr = CType(MyBase.Tables("products_description_fr"),products_description_frDataTable)
        If (initTable = true) Then
            If (Not (Me.tableproducts_description_fr) Is Nothing) Then
                Me.tableproducts_description_fr.InitVars
            End If
        End If
        Me.tableproducts_description_nl = CType(MyBase.Tables("products_description_nl"),products_description_nlDataTable)
        If (initTable = true) Then
            If (Not (Me.tableproducts_description_nl) Is Nothing) Then
                Me.tableproducts_description_nl.InitVars
            End If
        End If
        Me.tableproducts_description_en = CType(MyBase.Tables("products_description_en"),products_description_enDataTable)
        If (initTable = true) Then
            If (Not (Me.tableproducts_description_en) Is Nothing) Then
                Me.tableproducts_description_en.InitVars
            End If
        End If
        Me.tablecategories_fr_view1 = CType(MyBase.Tables("categories_fr_view1"),categories_fr_view1DataTable)
        If (initTable = true) Then
            If (Not (Me.tablecategories_fr_view1) Is Nothing) Then
                Me.tablecategories_fr_view1.InitVars
            End If
        End If
        Me.tabletrailers_broadcast = CType(MyBase.Tables("trailers_broadcast"),trailers_broadcastDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletrailers_broadcast) Is Nothing) Then
                Me.tabletrailers_broadcast.InitVars
            End If
        End If
        Me.tableproduct_type = CType(MyBase.Tables("product_type"),product_typeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableproduct_type) Is Nothing) Then
                Me.tableproduct_type.InitVars
            End If
        End If
        Me._tablecommon_production_reviews = CType(MyBase.Tables("common_production.reviews"),_common_production_reviewsDataTable)
        If (initTable = true) Then
            If (Not (Me._tablecommon_production_reviews) Is Nothing) Then
                Me._tablecommon_production_reviews.InitVars
            End If
        End If
        Me.tablestreaming_products = CType(MyBase.Tables("streaming_products"),streaming_productsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablestreaming_products) Is Nothing) Then
                Me.tablestreaming_products.InitVars
            End If
        End If
        Me.tablestreaming_trailers = CType(MyBase.Tables("streaming_trailers"),streaming_trailersDataTable)
        If (initTable = true) Then
            If (Not (Me.tablestreaming_trailers) Is Nothing) Then
                Me.tablestreaming_trailers.InitVars
            End If
        End If
        Me.tablereviews = CType(MyBase.Tables("reviews"),reviewsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablereviews) Is Nothing) Then
                Me.tablereviews.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsProducts"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsProducts.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableproducts = New productsDataTable
        MyBase.Tables.Add(Me.tableproducts)
        Me.tableproducts_combo = New products_comboDataTable
        MyBase.Tables.Add(Me.tableproducts_combo)
        Me.tableproducts_description = New products_descriptionDataTable
        MyBase.Tables.Add(Me.tableproducts_description)
        Me.tableproducts_labels = New products_labelsDataTable
        MyBase.Tables.Add(Me.tableproducts_labels)
        Me.tableproducts_description1 = New products_description1DataTable
        MyBase.Tables.Add(Me.tableproducts_description1)
        Me.tableproducts_view1 = New products_view1DataTable
        MyBase.Tables.Add(Me.tableproducts_view1)
        Me.tableactors = New actorsDataTable
        MyBase.Tables.Add(Me.tableactors)
        Me.tabledirectors = New directorsDataTable
        MyBase.Tables.Add(Me.tabledirectors)
        Me.tablecategories = New categoriesDataTable
        MyBase.Tables.Add(Me.tablecategories)
        Me.tablecategories_description = New categories_descriptionDataTable
        MyBase.Tables.Add(Me.tablecategories_description)
        Me.tableproducts_to_actors = New products_to_actorsDataTable
        MyBase.Tables.Add(Me.tableproducts_to_actors)
        Me.tableproducts_to_categories = New products_to_categoriesDataTable
        MyBase.Tables.Add(Me.tableproducts_to_categories)
        Me.tableproducts_undertitles_View1 = New products_undertitles_View1DataTable
        MyBase.Tables.Add(Me.tableproducts_undertitles_View1)
        Me.tableproducts_languages_View1 = New products_languages_View1DataTable
        MyBase.Tables.Add(Me.tableproducts_languages_View1)
        Me.tablelanguages = New languagesDataTable
        MyBase.Tables.Add(Me.tablelanguages)
        Me.tableproducts_cover_view1 = New products_cover_view1DataTable
        MyBase.Tables.Add(Me.tableproducts_cover_view1)
        Me.tabletmp_products_nl = New tmp_products_nlDataTable
        MyBase.Tables.Add(Me.tabletmp_products_nl)
        Me.tableview_products_status = New view_products_statusDataTable
        MyBase.Tables.Add(Me.tableview_products_status)
        Me.tableview_products_type = New view_products_typeDataTable
        MyBase.Tables.Add(Me.tableview_products_type)
        Me.tableview_products_media = New view_products_mediaDataTable
        MyBase.Tables.Add(Me.tableview_products_media)
        Me.tableproducts_countries = New products_countriesDataTable
        MyBase.Tables.Add(Me.tableproducts_countries)
        Me.tablestudio = New studioDataTable
        MyBase.Tables.Add(Me.tablestudio)
        Me.tableview_products_availability = New view_products_availabilityDataTable
        MyBase.Tables.Add(Me.tableview_products_availability)
        Me.tableview_products_rating = New view_products_ratingDataTable
        MyBase.Tables.Add(Me.tableview_products_rating)
        Me.tablepicture_format = New picture_formatDataTable
        MyBase.Tables.Add(Me.tablepicture_format)
        Me.tablepublic1 = New public1DataTable
        MyBase.Tables.Add(Me.tablepublic1)
        Me.tableseries = New seriesDataTable
        MyBase.Tables.Add(Me.tableseries)
        Me.tableproducts_languages = New products_languagesDataTable
        MyBase.Tables.Add(Me.tableproducts_languages)
        Me.tableproducts_undertitles = New products_undertitlesDataTable
        MyBase.Tables.Add(Me.tableproducts_undertitles)
        Me.tableproducts_to_languages = New products_to_languagesDataTable
        MyBase.Tables.Add(Me.tableproducts_to_languages)
        Me.tableproducts_to_undertitles = New products_to_undertitlesDataTable
        MyBase.Tables.Add(Me.tableproducts_to_undertitles)
        Me.tableproducts_soundtracks = New products_soundtracksDataTable
        MyBase.Tables.Add(Me.tableproducts_soundtracks)
        Me.tableproducts_trailers = New products_trailersDataTable
        MyBase.Tables.Add(Me.tableproducts_trailers)
        Me.tableproducts_to_soundtracks = New products_to_soundtracksDataTable
        MyBase.Tables.Add(Me.tableproducts_to_soundtracks)
        Me.tableproducts_description_fr = New products_description_frDataTable
        MyBase.Tables.Add(Me.tableproducts_description_fr)
        Me.tableproducts_description_nl = New products_description_nlDataTable
        MyBase.Tables.Add(Me.tableproducts_description_nl)
        Me.tableproducts_description_en = New products_description_enDataTable
        MyBase.Tables.Add(Me.tableproducts_description_en)
        Me.tablecategories_fr_view1 = New categories_fr_view1DataTable
        MyBase.Tables.Add(Me.tablecategories_fr_view1)
        Me.tabletrailers_broadcast = New trailers_broadcastDataTable
        MyBase.Tables.Add(Me.tabletrailers_broadcast)
        Me.tableproduct_type = New product_typeDataTable
        MyBase.Tables.Add(Me.tableproduct_type)
        Me._tablecommon_production_reviews = New _common_production_reviewsDataTable
        MyBase.Tables.Add(Me._tablecommon_production_reviews)
        Me.tablestreaming_products = New streaming_productsDataTable
        MyBase.Tables.Add(Me.tablestreaming_products)
        Me.tablestreaming_trailers = New streaming_trailersDataTable
        MyBase.Tables.Add(Me.tablestreaming_trailers)
        Me.tablereviews = New reviewsDataTable
        MyBase.Tables.Add(Me.tablereviews)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeproducts() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeproducts_combo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeproducts_description() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeproducts_labels() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeproducts_description1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeproducts_view1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeactors() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedirectors() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializecategories() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializecategories_description() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeproducts_to_actors() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeproducts_to_categories() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeproducts_undertitles_View1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeproducts_languages_View1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializelanguages() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeproducts_cover_view1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetmp_products_nl() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeview_products_status() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeview_products_type() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeview_products_media() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeproducts_countries() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializestudio() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeview_products_availability() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeview_products_rating() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializepicture_format() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializepublic1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeseries() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeproducts_languages() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeproducts_undertitles() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeproducts_to_languages() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeproducts_to_undertitles() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeproducts_soundtracks() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeproducts_trailers() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeproducts_to_soundtracks() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeproducts_description_fr() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeproducts_description_nl() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeproducts_description_en() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializecategories_fr_view1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetrailers_broadcast() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeproduct_type() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerialize_common_production_reviews() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializestreaming_products() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializestreaming_trailers() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializereviews() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsProducts = New dsProducts
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub productsRowChangeEventHandler(ByVal sender As Object, ByVal e As productsRowChangeEvent)
    
    Public Delegate Sub products_comboRowChangeEventHandler(ByVal sender As Object, ByVal e As products_comboRowChangeEvent)
    
    Public Delegate Sub products_descriptionRowChangeEventHandler(ByVal sender As Object, ByVal e As products_descriptionRowChangeEvent)
    
    Public Delegate Sub products_labelsRowChangeEventHandler(ByVal sender As Object, ByVal e As products_labelsRowChangeEvent)
    
    Public Delegate Sub products_description1RowChangeEventHandler(ByVal sender As Object, ByVal e As products_description1RowChangeEvent)
    
    Public Delegate Sub products_view1RowChangeEventHandler(ByVal sender As Object, ByVal e As products_view1RowChangeEvent)
    
    Public Delegate Sub actorsRowChangeEventHandler(ByVal sender As Object, ByVal e As actorsRowChangeEvent)
    
    Public Delegate Sub directorsRowChangeEventHandler(ByVal sender As Object, ByVal e As directorsRowChangeEvent)
    
    Public Delegate Sub categoriesRowChangeEventHandler(ByVal sender As Object, ByVal e As categoriesRowChangeEvent)
    
    Public Delegate Sub categories_descriptionRowChangeEventHandler(ByVal sender As Object, ByVal e As categories_descriptionRowChangeEvent)
    
    Public Delegate Sub products_to_actorsRowChangeEventHandler(ByVal sender As Object, ByVal e As products_to_actorsRowChangeEvent)
    
    Public Delegate Sub products_to_categoriesRowChangeEventHandler(ByVal sender As Object, ByVal e As products_to_categoriesRowChangeEvent)
    
    Public Delegate Sub products_undertitles_View1RowChangeEventHandler(ByVal sender As Object, ByVal e As products_undertitles_View1RowChangeEvent)
    
    Public Delegate Sub products_languages_View1RowChangeEventHandler(ByVal sender As Object, ByVal e As products_languages_View1RowChangeEvent)
    
    Public Delegate Sub languagesRowChangeEventHandler(ByVal sender As Object, ByVal e As languagesRowChangeEvent)
    
    Public Delegate Sub products_cover_view1RowChangeEventHandler(ByVal sender As Object, ByVal e As products_cover_view1RowChangeEvent)
    
    Public Delegate Sub tmp_products_nlRowChangeEventHandler(ByVal sender As Object, ByVal e As tmp_products_nlRowChangeEvent)
    
    Public Delegate Sub view_products_statusRowChangeEventHandler(ByVal sender As Object, ByVal e As view_products_statusRowChangeEvent)
    
    Public Delegate Sub view_products_typeRowChangeEventHandler(ByVal sender As Object, ByVal e As view_products_typeRowChangeEvent)
    
    Public Delegate Sub view_products_mediaRowChangeEventHandler(ByVal sender As Object, ByVal e As view_products_mediaRowChangeEvent)
    
    Public Delegate Sub products_countriesRowChangeEventHandler(ByVal sender As Object, ByVal e As products_countriesRowChangeEvent)
    
    Public Delegate Sub studioRowChangeEventHandler(ByVal sender As Object, ByVal e As studioRowChangeEvent)
    
    Public Delegate Sub view_products_availabilityRowChangeEventHandler(ByVal sender As Object, ByVal e As view_products_availabilityRowChangeEvent)
    
    Public Delegate Sub view_products_ratingRowChangeEventHandler(ByVal sender As Object, ByVal e As view_products_ratingRowChangeEvent)
    
    Public Delegate Sub picture_formatRowChangeEventHandler(ByVal sender As Object, ByVal e As picture_formatRowChangeEvent)
    
    Public Delegate Sub public1RowChangeEventHandler(ByVal sender As Object, ByVal e As public1RowChangeEvent)
    
    Public Delegate Sub seriesRowChangeEventHandler(ByVal sender As Object, ByVal e As seriesRowChangeEvent)
    
    Public Delegate Sub products_languagesRowChangeEventHandler(ByVal sender As Object, ByVal e As products_languagesRowChangeEvent)
    
    Public Delegate Sub products_undertitlesRowChangeEventHandler(ByVal sender As Object, ByVal e As products_undertitlesRowChangeEvent)
    
    Public Delegate Sub products_to_languagesRowChangeEventHandler(ByVal sender As Object, ByVal e As products_to_languagesRowChangeEvent)
    
    Public Delegate Sub products_to_undertitlesRowChangeEventHandler(ByVal sender As Object, ByVal e As products_to_undertitlesRowChangeEvent)
    
    Public Delegate Sub products_soundtracksRowChangeEventHandler(ByVal sender As Object, ByVal e As products_soundtracksRowChangeEvent)
    
    Public Delegate Sub products_trailersRowChangeEventHandler(ByVal sender As Object, ByVal e As products_trailersRowChangeEvent)
    
    Public Delegate Sub products_to_soundtracksRowChangeEventHandler(ByVal sender As Object, ByVal e As products_to_soundtracksRowChangeEvent)
    
    Public Delegate Sub products_description_frRowChangeEventHandler(ByVal sender As Object, ByVal e As products_description_frRowChangeEvent)
    
    Public Delegate Sub products_description_nlRowChangeEventHandler(ByVal sender As Object, ByVal e As products_description_nlRowChangeEvent)
    
    Public Delegate Sub products_description_enRowChangeEventHandler(ByVal sender As Object, ByVal e As products_description_enRowChangeEvent)
    
    Public Delegate Sub categories_fr_view1RowChangeEventHandler(ByVal sender As Object, ByVal e As categories_fr_view1RowChangeEvent)
    
    Public Delegate Sub trailers_broadcastRowChangeEventHandler(ByVal sender As Object, ByVal e As trailers_broadcastRowChangeEvent)
    
    Public Delegate Sub product_typeRowChangeEventHandler(ByVal sender As Object, ByVal e As product_typeRowChangeEvent)
    
    Public Delegate Sub _common_production_reviewsRowChangeEventHandler(ByVal sender As Object, ByVal e As _common_production_reviewsRowChangeEvent)
    
    Public Delegate Sub streaming_productsRowChangeEventHandler(ByVal sender As Object, ByVal e As streaming_productsRowChangeEvent)
    
    Public Delegate Sub streaming_trailersRowChangeEventHandler(ByVal sender As Object, ByVal e As streaming_trailersRowChangeEvent)
    
    Public Delegate Sub reviewsRowChangeEventHandler(ByVal sender As Object, ByVal e As reviewsRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class productsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnproducts_id As Global.System.Data.DataColumn
        
        Private columnproducts_model As Global.System.Data.DataColumn
        
        Private columnimdb_id As Global.System.Data.DataColumn
        
        Private columnproducts_title As Global.System.Data.DataColumn
        
        Private columnproducts_price As Global.System.Data.DataColumn
        
        Private columnproducts_date_added As Global.System.Data.DataColumn
        
        Private columnproducts_last_modified As Global.System.Data.DataColumn
        
        Private columnproducts_date_available As Global.System.Data.DataColumn
        
        Private columnproducts_status As Global.System.Data.DataColumn
        
        Private columnproducts_public As Global.System.Data.DataColumn
        
        Private columnproducts_runtime As Global.System.Data.DataColumn
        
        Private columnproducts_year As Global.System.Data.DataColumn
        
        Private columnproducts_countries_id As Global.System.Data.DataColumn
        
        Private columnproducts_picture_format As Global.System.Data.DataColumn
        
        Private columnproducts_rating As Global.System.Data.DataColumn
        
        Private columnproducts_directors_id As Global.System.Data.DataColumn
        
        Private columnproducts_studio As Global.System.Data.DataColumn
        
        Private columnin_cinema_now As Global.System.Data.DataColumn
        
        Private columnproducts_series_id As Global.System.Data.DataColumn
        
        Private columnproducts_series_number As Global.System.Data.DataColumn
        
        Private columnproducts_type As Global.System.Data.DataColumn
        
        Private columnproducts_media As Global.System.Data.DataColumn
        
        Private columnimdb_id_serie As Global.System.Data.DataColumn
        
        Private columnvod_next As Global.System.Data.DataColumn
        
        Private columnvod_next_lux As Global.System.Data.DataColumn
        
        Private columnvod_next_nl As Global.System.Data.DataColumn
        
        Private columnpackage_id As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "products"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_modelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_model
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property imdb_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimdb_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_titleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_title
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_priceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_date_addedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_date_added
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_last_modifiedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_last_modified
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_date_availableColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_date_available
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_statusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_status
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_publicColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_public
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_runtimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_runtime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_yearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_year
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_countries_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_countries_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_picture_formatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_picture_format
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_ratingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_rating
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_directors_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_directors_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_studioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_studio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property in_cinema_nowColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnin_cinema_now
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_series_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_series_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_series_numberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_series_number
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_mediaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_media
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property imdb_id_serieColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimdb_id_serie
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property vod_nextColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvod_next
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property vod_next_luxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvod_next_lux
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property vod_next_nlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvod_next_nl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property package_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpackage_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As productsRow
            Get
                Return CType(Me.Rows(index),productsRow)
            End Get
        End Property
        
        Public Event productsRowChanging As productsRowChangeEventHandler
        
        Public Event productsRowChanged As productsRowChangeEventHandler
        
        Public Event productsRowDeleting As productsRowChangeEventHandler
        
        Public Event productsRowDeleted As productsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddproductsRow(ByVal row As productsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddproductsRow( _
                    ByVal products_id As Integer,  _
                    ByVal products_model As String,  _
                    ByVal imdb_id As Integer,  _
                    ByVal products_title As String,  _
                    ByVal products_price As Decimal,  _
                    ByVal products_date_added As Date,  _
                    ByVal products_last_modified As Date,  _
                    ByVal products_date_available As Date,  _
                    ByVal products_status As Integer,  _
                    ByVal products_public As Integer,  _
                    ByVal products_runtime As Integer,  _
                    ByVal products_year As Integer,  _
                    ByVal products_countries_id As Integer,  _
                    ByVal products_picture_format As Integer,  _
                    ByVal products_rating As Integer,  _
                    ByVal products_directors_id As Integer,  _
                    ByVal products_studio As Integer,  _
                    ByVal in_cinema_now As Integer,  _
                    ByVal products_series_id As Integer,  _
                    ByVal products_series_number As Integer,  _
                    ByVal products_type As String,  _
                    ByVal products_media As String,  _
                    ByVal imdb_id_serie As Long,  _
                    ByVal vod_next As Integer,  _
                    ByVal vod_next_lux As Integer,  _
                    ByVal vod_next_nl As Integer,  _
                    ByVal package_id As Short) As productsRow
            Dim rowproductsRow As productsRow = CType(Me.NewRow,productsRow)
            Dim columnValuesArray() As Object = New Object() {products_id, products_model, imdb_id, products_title, products_price, products_date_added, products_last_modified, products_date_available, products_status, products_public, products_runtime, products_year, products_countries_id, products_picture_format, products_rating, products_directors_id, products_studio, in_cinema_now, products_series_id, products_series_number, products_type, products_media, imdb_id_serie, vod_next, vod_next_lux, vod_next_nl, package_id}
            rowproductsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowproductsRow)
            Return rowproductsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByproducts_id(ByVal products_id As Integer) As productsRow
            Return CType(Me.Rows.Find(New Object() {products_id}),productsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As productsDataTable = CType(MyBase.Clone,productsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New productsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnproducts_id = MyBase.Columns("products_id")
            Me.columnproducts_model = MyBase.Columns("products_model")
            Me.columnimdb_id = MyBase.Columns("imdb_id")
            Me.columnproducts_title = MyBase.Columns("products_title")
            Me.columnproducts_price = MyBase.Columns("products_price")
            Me.columnproducts_date_added = MyBase.Columns("products_date_added")
            Me.columnproducts_last_modified = MyBase.Columns("products_last_modified")
            Me.columnproducts_date_available = MyBase.Columns("products_date_available")
            Me.columnproducts_status = MyBase.Columns("products_status")
            Me.columnproducts_public = MyBase.Columns("products_public")
            Me.columnproducts_runtime = MyBase.Columns("products_runtime")
            Me.columnproducts_year = MyBase.Columns("products_year")
            Me.columnproducts_countries_id = MyBase.Columns("products_countries_id")
            Me.columnproducts_picture_format = MyBase.Columns("products_picture_format")
            Me.columnproducts_rating = MyBase.Columns("products_rating")
            Me.columnproducts_directors_id = MyBase.Columns("products_directors_id")
            Me.columnproducts_studio = MyBase.Columns("products_studio")
            Me.columnin_cinema_now = MyBase.Columns("in_cinema_now")
            Me.columnproducts_series_id = MyBase.Columns("products_series_id")
            Me.columnproducts_series_number = MyBase.Columns("products_series_number")
            Me.columnproducts_type = MyBase.Columns("products_type")
            Me.columnproducts_media = MyBase.Columns("products_media")
            Me.columnimdb_id_serie = MyBase.Columns("imdb_id_serie")
            Me.columnvod_next = MyBase.Columns("vod_next")
            Me.columnvod_next_lux = MyBase.Columns("vod_next_lux")
            Me.columnvod_next_nl = MyBase.Columns("vod_next_nl")
            Me.columnpackage_id = MyBase.Columns("package_id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnproducts_id = New Global.System.Data.DataColumn("products_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_id)
            Me.columnproducts_model = New Global.System.Data.DataColumn("products_model", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_model)
            Me.columnimdb_id = New Global.System.Data.DataColumn("imdb_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimdb_id)
            Me.columnproducts_title = New Global.System.Data.DataColumn("products_title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_title)
            Me.columnproducts_price = New Global.System.Data.DataColumn("products_price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_price)
            Me.columnproducts_date_added = New Global.System.Data.DataColumn("products_date_added", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_date_added)
            Me.columnproducts_last_modified = New Global.System.Data.DataColumn("products_last_modified", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_last_modified)
            Me.columnproducts_date_available = New Global.System.Data.DataColumn("products_date_available", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_date_available)
            Me.columnproducts_status = New Global.System.Data.DataColumn("products_status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_status)
            Me.columnproducts_public = New Global.System.Data.DataColumn("products_public", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_public)
            Me.columnproducts_runtime = New Global.System.Data.DataColumn("products_runtime", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_runtime)
            Me.columnproducts_year = New Global.System.Data.DataColumn("products_year", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_year)
            Me.columnproducts_countries_id = New Global.System.Data.DataColumn("products_countries_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_countries_id)
            Me.columnproducts_picture_format = New Global.System.Data.DataColumn("products_picture_format", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_picture_format)
            Me.columnproducts_rating = New Global.System.Data.DataColumn("products_rating", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_rating)
            Me.columnproducts_directors_id = New Global.System.Data.DataColumn("products_directors_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_directors_id)
            Me.columnproducts_studio = New Global.System.Data.DataColumn("products_studio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_studio)
            Me.columnin_cinema_now = New Global.System.Data.DataColumn("in_cinema_now", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnin_cinema_now)
            Me.columnproducts_series_id = New Global.System.Data.DataColumn("products_series_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_series_id)
            Me.columnproducts_series_number = New Global.System.Data.DataColumn("products_series_number", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_series_number)
            Me.columnproducts_type = New Global.System.Data.DataColumn("products_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_type)
            Me.columnproducts_media = New Global.System.Data.DataColumn("products_media", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_media)
            Me.columnimdb_id_serie = New Global.System.Data.DataColumn("imdb_id_serie", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimdb_id_serie)
            Me.columnvod_next = New Global.System.Data.DataColumn("vod_next", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvod_next)
            Me.columnvod_next_lux = New Global.System.Data.DataColumn("vod_next_lux", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvod_next_lux)
            Me.columnvod_next_nl = New Global.System.Data.DataColumn("vod_next_nl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvod_next_nl)
            Me.columnpackage_id = New Global.System.Data.DataColumn("package_id", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpackage_id)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsProductsKey1", New Global.System.Data.DataColumn() {Me.columnproducts_id}, true))
            Me.columnproducts_id.AllowDBNull = false
            Me.columnproducts_id.Unique = true
            Me.columnimdb_id.AllowDBNull = false
            Me.columnproducts_title.AllowDBNull = false
            Me.columnproducts_price.AllowDBNull = false
            Me.columnproducts_status.AllowDBNull = false
            Me.columnproducts_countries_id.AllowDBNull = false
            Me.columnin_cinema_now.AllowDBNull = false
            Me.columnproducts_series_id.AllowDBNull = false
            Me.columnproducts_series_number.AllowDBNull = false
            Me.columnimdb_id_serie.DefaultValue = CType(0,Long)
            Me.columnvod_next.DefaultValue = CType(0,Integer)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewproductsRow() As productsRow
            Return CType(Me.NewRow,productsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New productsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(productsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.productsRowChangedEvent) Is Nothing) Then
                RaiseEvent productsRowChanged(Me, New productsRowChangeEvent(CType(e.Row,productsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.productsRowChangingEvent) Is Nothing) Then
                RaiseEvent productsRowChanging(Me, New productsRowChangeEvent(CType(e.Row,productsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.productsRowDeletedEvent) Is Nothing) Then
                RaiseEvent productsRowDeleted(Me, New productsRowChangeEvent(CType(e.Row,productsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.productsRowDeletingEvent) Is Nothing) Then
                RaiseEvent productsRowDeleting(Me, New productsRowChangeEvent(CType(e.Row,productsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveproductsRow(ByVal row As productsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "productsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class products_comboDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnproducts_id As Global.System.Data.DataColumn
        
        Private columnproducts_quantity As Global.System.Data.DataColumn
        
        Private columnproducts_model As Global.System.Data.DataColumn
        
        Private columnproducts_title As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "products_combo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_quantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_quantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_modelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_model
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_titleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_title
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As products_comboRow
            Get
                Return CType(Me.Rows(index),products_comboRow)
            End Get
        End Property
        
        Public Event products_comboRowChanging As products_comboRowChangeEventHandler
        
        Public Event products_comboRowChanged As products_comboRowChangeEventHandler
        
        Public Event products_comboRowDeleting As products_comboRowChangeEventHandler
        
        Public Event products_comboRowDeleted As products_comboRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addproducts_comboRow(ByVal row As products_comboRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addproducts_comboRow(ByVal products_id As Integer, ByVal products_quantity As Integer, ByVal products_model As String, ByVal products_title As String) As products_comboRow
            Dim rowproducts_comboRow As products_comboRow = CType(Me.NewRow,products_comboRow)
            Dim columnValuesArray() As Object = New Object() {products_id, products_quantity, products_model, products_title}
            rowproducts_comboRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowproducts_comboRow)
            Return rowproducts_comboRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As products_comboDataTable = CType(MyBase.Clone,products_comboDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New products_comboDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnproducts_id = MyBase.Columns("products_id")
            Me.columnproducts_quantity = MyBase.Columns("products_quantity")
            Me.columnproducts_model = MyBase.Columns("products_model")
            Me.columnproducts_title = MyBase.Columns("products_title")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnproducts_id = New Global.System.Data.DataColumn("products_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_id)
            Me.columnproducts_quantity = New Global.System.Data.DataColumn("products_quantity", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_quantity)
            Me.columnproducts_model = New Global.System.Data.DataColumn("products_model", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_model)
            Me.columnproducts_title = New Global.System.Data.DataColumn("products_title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_title)
            Me.columnproducts_id.AllowDBNull = false
            Me.columnproducts_quantity.AllowDBNull = false
            Me.columnproducts_title.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newproducts_comboRow() As products_comboRow
            Return CType(Me.NewRow,products_comboRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New products_comboRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(products_comboRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.products_comboRowChangedEvent) Is Nothing) Then
                RaiseEvent products_comboRowChanged(Me, New products_comboRowChangeEvent(CType(e.Row,products_comboRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.products_comboRowChangingEvent) Is Nothing) Then
                RaiseEvent products_comboRowChanging(Me, New products_comboRowChangeEvent(CType(e.Row,products_comboRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.products_comboRowDeletedEvent) Is Nothing) Then
                RaiseEvent products_comboRowDeleted(Me, New products_comboRowChangeEvent(CType(e.Row,products_comboRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.products_comboRowDeletingEvent) Is Nothing) Then
                RaiseEvent products_comboRowDeleting(Me, New products_comboRowChangeEvent(CType(e.Row,products_comboRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeproducts_comboRow(ByVal row As products_comboRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "products_comboDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class products_descriptionDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnproducts_id As Global.System.Data.DataColumn
        
        Private columnproducts_dvd_status As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "products_description"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_dvd_statusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_dvd_status
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As products_descriptionRow
            Get
                Return CType(Me.Rows(index),products_descriptionRow)
            End Get
        End Property
        
        Public Event products_descriptionRowChanging As products_descriptionRowChangeEventHandler
        
        Public Event products_descriptionRowChanged As products_descriptionRowChangeEventHandler
        
        Public Event products_descriptionRowDeleting As products_descriptionRowChangeEventHandler
        
        Public Event products_descriptionRowDeleted As products_descriptionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addproducts_descriptionRow(ByVal row As products_descriptionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addproducts_descriptionRow(ByVal products_id As Integer, ByVal products_dvd_status As Integer) As products_descriptionRow
            Dim rowproducts_descriptionRow As products_descriptionRow = CType(Me.NewRow,products_descriptionRow)
            Dim columnValuesArray() As Object = New Object() {products_id, products_dvd_status}
            rowproducts_descriptionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowproducts_descriptionRow)
            Return rowproducts_descriptionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As products_descriptionDataTable = CType(MyBase.Clone,products_descriptionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New products_descriptionDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnproducts_id = MyBase.Columns("products_id")
            Me.columnproducts_dvd_status = MyBase.Columns("products_dvd_status")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnproducts_id = New Global.System.Data.DataColumn("products_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_id)
            Me.columnproducts_dvd_status = New Global.System.Data.DataColumn("products_dvd_status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_dvd_status)
            Me.columnproducts_id.AllowDBNull = false
            Me.columnproducts_dvd_status.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newproducts_descriptionRow() As products_descriptionRow
            Return CType(Me.NewRow,products_descriptionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New products_descriptionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(products_descriptionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.products_descriptionRowChangedEvent) Is Nothing) Then
                RaiseEvent products_descriptionRowChanged(Me, New products_descriptionRowChangeEvent(CType(e.Row,products_descriptionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.products_descriptionRowChangingEvent) Is Nothing) Then
                RaiseEvent products_descriptionRowChanging(Me, New products_descriptionRowChangeEvent(CType(e.Row,products_descriptionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.products_descriptionRowDeletedEvent) Is Nothing) Then
                RaiseEvent products_descriptionRowDeleted(Me, New products_descriptionRowChangeEvent(CType(e.Row,products_descriptionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.products_descriptionRowDeletingEvent) Is Nothing) Then
                RaiseEvent products_descriptionRowDeleting(Me, New products_descriptionRowChangeEvent(CType(e.Row,products_descriptionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeproducts_descriptionRow(ByVal row As products_descriptionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "products_descriptionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class products_labelsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnproducts_id As Global.System.Data.DataColumn
        
        Private columnlang As Global.System.Data.DataColumn
        
        Private columnIDStr As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "products_labels"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property langColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlang
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDStrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDStr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As products_labelsRow
            Get
                Return CType(Me.Rows(index),products_labelsRow)
            End Get
        End Property
        
        Public Event products_labelsRowChanging As products_labelsRowChangeEventHandler
        
        Public Event products_labelsRowChanged As products_labelsRowChangeEventHandler
        
        Public Event products_labelsRowDeleting As products_labelsRowChangeEventHandler
        
        Public Event products_labelsRowDeleted As products_labelsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addproducts_labelsRow(ByVal row As products_labelsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addproducts_labelsRow(ByVal products_id As Integer, ByVal lang As String, ByVal IDStr As String) As products_labelsRow
            Dim rowproducts_labelsRow As products_labelsRow = CType(Me.NewRow,products_labelsRow)
            Dim columnValuesArray() As Object = New Object() {products_id, lang, IDStr}
            rowproducts_labelsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowproducts_labelsRow)
            Return rowproducts_labelsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As products_labelsDataTable = CType(MyBase.Clone,products_labelsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New products_labelsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnproducts_id = MyBase.Columns("products_id")
            Me.columnlang = MyBase.Columns("lang")
            Me.columnIDStr = MyBase.Columns("IDStr")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnproducts_id = New Global.System.Data.DataColumn("products_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_id)
            Me.columnlang = New Global.System.Data.DataColumn("lang", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlang)
            Me.columnIDStr = New Global.System.Data.DataColumn("IDStr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDStr)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newproducts_labelsRow() As products_labelsRow
            Return CType(Me.NewRow,products_labelsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New products_labelsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(products_labelsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.products_labelsRowChangedEvent) Is Nothing) Then
                RaiseEvent products_labelsRowChanged(Me, New products_labelsRowChangeEvent(CType(e.Row,products_labelsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.products_labelsRowChangingEvent) Is Nothing) Then
                RaiseEvent products_labelsRowChanging(Me, New products_labelsRowChangeEvent(CType(e.Row,products_labelsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.products_labelsRowDeletedEvent) Is Nothing) Then
                RaiseEvent products_labelsRowDeleted(Me, New products_labelsRowChangeEvent(CType(e.Row,products_labelsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.products_labelsRowDeletingEvent) Is Nothing) Then
                RaiseEvent products_labelsRowDeleting(Me, New products_labelsRowChangeEvent(CType(e.Row,products_labelsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeproducts_labelsRow(ByVal row As products_labelsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "products_labelsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class products_description1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnproducts_id As Global.System.Data.DataColumn
        
        Private columnlanguage_id As Global.System.Data.DataColumn
        
        Private columnproducts_name As Global.System.Data.DataColumn
        
        Private columnproducts_model As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "products_description1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property language_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlanguage_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_modelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_model
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As products_description1Row
            Get
                Return CType(Me.Rows(index),products_description1Row)
            End Get
        End Property
        
        Public Event products_description1RowChanging As products_description1RowChangeEventHandler
        
        Public Event products_description1RowChanged As products_description1RowChangeEventHandler
        
        Public Event products_description1RowDeleting As products_description1RowChangeEventHandler
        
        Public Event products_description1RowDeleted As products_description1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addproducts_description1Row(ByVal row As products_description1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addproducts_description1Row(ByVal products_id As Integer, ByVal language_id As Integer, ByVal products_name As String, ByVal products_model As String) As products_description1Row
            Dim rowproducts_description1Row As products_description1Row = CType(Me.NewRow,products_description1Row)
            Dim columnValuesArray() As Object = New Object() {products_id, language_id, products_name, products_model}
            rowproducts_description1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowproducts_description1Row)
            Return rowproducts_description1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As products_description1DataTable = CType(MyBase.Clone,products_description1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New products_description1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnproducts_id = MyBase.Columns("products_id")
            Me.columnlanguage_id = MyBase.Columns("language_id")
            Me.columnproducts_name = MyBase.Columns("products_name")
            Me.columnproducts_model = MyBase.Columns("products_model")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnproducts_id = New Global.System.Data.DataColumn("products_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_id)
            Me.columnlanguage_id = New Global.System.Data.DataColumn("language_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlanguage_id)
            Me.columnproducts_name = New Global.System.Data.DataColumn("products_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_name)
            Me.columnproducts_model = New Global.System.Data.DataColumn("products_model", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_model)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newproducts_description1Row() As products_description1Row
            Return CType(Me.NewRow,products_description1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New products_description1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(products_description1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.products_description1RowChangedEvent) Is Nothing) Then
                RaiseEvent products_description1RowChanged(Me, New products_description1RowChangeEvent(CType(e.Row,products_description1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.products_description1RowChangingEvent) Is Nothing) Then
                RaiseEvent products_description1RowChanging(Me, New products_description1RowChangeEvent(CType(e.Row,products_description1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.products_description1RowDeletedEvent) Is Nothing) Then
                RaiseEvent products_description1RowDeleted(Me, New products_description1RowChangeEvent(CType(e.Row,products_description1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.products_description1RowDeletingEvent) Is Nothing) Then
                RaiseEvent products_description1RowDeleting(Me, New products_description1RowChangeEvent(CType(e.Row,products_description1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeproducts_description1Row(ByVal row As products_description1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "products_description1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class products_view1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnproducts_id As Global.System.Data.DataColumn
        
        Private columnproducts_quantity As Global.System.Data.DataColumn
        
        Private columnproducts_model As Global.System.Data.DataColumn
        
        Private columnimdb_id As Global.System.Data.DataColumn
        
        Private columnproducts_title As Global.System.Data.DataColumn
        
        Private columnproducts_price As Global.System.Data.DataColumn
        
        Private columnproducts_type As Global.System.Data.DataColumn
        
        Private columnFR_Title As Global.System.Data.DataColumn
        
        Private columnNL_Title As Global.System.Data.DataColumn
        
        Private columnEN_Title As Global.System.Data.DataColumn
        
        Private columnActor1 As Global.System.Data.DataColumn
        
        Private columnActor2 As Global.System.Data.DataColumn
        
        Private columnActor3 As Global.System.Data.DataColumn
        
        Private columnCategory1 As Global.System.Data.DataColumn
        
        Private columnCategory2 As Global.System.Data.DataColumn
        
        Private columnCategory3 As Global.System.Data.DataColumn
        
        Private columnSubTitles As Global.System.Data.DataColumn
        
        Private columnLanguages As Global.System.Data.DataColumn
        
        Private columndirector As Global.System.Data.DataColumn
        
        Private columnActors As Global.System.Data.DataColumn
        
        Private columnCategories As Global.System.Data.DataColumn
        
        Private columnproducts_date_added As Global.System.Data.DataColumn
        
        Private columnproducts_date_available As Global.System.Data.DataColumn
        
        Private columnproducts_status As Global.System.Data.DataColumn
        
        Private columnproducts_year As Global.System.Data.DataColumn
        
        Private columnproducts_sale_price As Global.System.Data.DataColumn
        
        Private columnproducts_sale_date As Global.System.Data.DataColumn
        
        Private columnquantity_to_sale As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "products_view1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_quantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_quantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_modelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_model
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property imdb_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimdb_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_titleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_title
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_priceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FR_TitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFR_Title
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NL_TitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNL_Title
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EN_TitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEN_Title
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Actor1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnActor1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Actor2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnActor2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Actor3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnActor3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Category1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCategory1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Category2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCategory2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Category3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCategory3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubTitlesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubTitles
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LanguagesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLanguages
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property directorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndirector
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ActorsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnActors
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CategoriesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCategories
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_date_addedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_date_added
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_date_availableColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_date_available
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_statusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_status
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_yearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_year
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_sale_priceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_sale_price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_sale_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_sale_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property quantity_to_saleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnquantity_to_sale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As products_view1Row
            Get
                Return CType(Me.Rows(index),products_view1Row)
            End Get
        End Property
        
        Public Event products_view1RowChanging As products_view1RowChangeEventHandler
        
        Public Event products_view1RowChanged As products_view1RowChangeEventHandler
        
        Public Event products_view1RowDeleting As products_view1RowChangeEventHandler
        
        Public Event products_view1RowDeleted As products_view1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addproducts_view1Row(ByVal row As products_view1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addproducts_view1Row( _
                    ByVal products_id As Integer,  _
                    ByVal products_quantity As Integer,  _
                    ByVal products_model As String,  _
                    ByVal imdb_id As Integer,  _
                    ByVal products_title As String,  _
                    ByVal products_price As Decimal,  _
                    ByVal products_type As String,  _
                    ByVal FR_Title As String,  _
                    ByVal NL_Title As String,  _
                    ByVal EN_Title As String,  _
                    ByVal Actor1 As String,  _
                    ByVal Actor2 As String,  _
                    ByVal Actor3 As String,  _
                    ByVal Category1 As String,  _
                    ByVal Category2 As String,  _
                    ByVal Category3 As String,  _
                    ByVal SubTitles As String,  _
                    ByVal Languages As String,  _
                    ByVal director As String,  _
                    ByVal Actors As String,  _
                    ByVal Categories As String,  _
                    ByVal products_date_added As Date,  _
                    ByVal products_date_available As Date,  _
                    ByVal products_status As Integer,  _
                    ByVal products_year As Integer,  _
                    ByVal products_sale_price As Decimal,  _
                    ByVal products_sale_date As Date,  _
                    ByVal quantity_to_sale As Integer) As products_view1Row
            Dim rowproducts_view1Row As products_view1Row = CType(Me.NewRow,products_view1Row)
            Dim columnValuesArray() As Object = New Object() {products_id, products_quantity, products_model, imdb_id, products_title, products_price, products_type, FR_Title, NL_Title, EN_Title, Actor1, Actor2, Actor3, Category1, Category2, Category3, SubTitles, Languages, director, Actors, Categories, products_date_added, products_date_available, products_status, products_year, products_sale_price, products_sale_date, quantity_to_sale}
            rowproducts_view1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowproducts_view1Row)
            Return rowproducts_view1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As products_view1DataTable = CType(MyBase.Clone,products_view1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New products_view1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnproducts_id = MyBase.Columns("products_id")
            Me.columnproducts_quantity = MyBase.Columns("products_quantity")
            Me.columnproducts_model = MyBase.Columns("products_model")
            Me.columnimdb_id = MyBase.Columns("imdb_id")
            Me.columnproducts_title = MyBase.Columns("products_title")
            Me.columnproducts_price = MyBase.Columns("products_price")
            Me.columnproducts_type = MyBase.Columns("products_type")
            Me.columnFR_Title = MyBase.Columns("FR_Title")
            Me.columnNL_Title = MyBase.Columns("NL_Title")
            Me.columnEN_Title = MyBase.Columns("EN_Title")
            Me.columnActor1 = MyBase.Columns("Actor1")
            Me.columnActor2 = MyBase.Columns("Actor2")
            Me.columnActor3 = MyBase.Columns("Actor3")
            Me.columnCategory1 = MyBase.Columns("Category1")
            Me.columnCategory2 = MyBase.Columns("Category2")
            Me.columnCategory3 = MyBase.Columns("Category3")
            Me.columnSubTitles = MyBase.Columns("SubTitles")
            Me.columnLanguages = MyBase.Columns("Languages")
            Me.columndirector = MyBase.Columns("director")
            Me.columnActors = MyBase.Columns("Actors")
            Me.columnCategories = MyBase.Columns("Categories")
            Me.columnproducts_date_added = MyBase.Columns("products_date_added")
            Me.columnproducts_date_available = MyBase.Columns("products_date_available")
            Me.columnproducts_status = MyBase.Columns("products_status")
            Me.columnproducts_year = MyBase.Columns("products_year")
            Me.columnproducts_sale_price = MyBase.Columns("products_sale_price")
            Me.columnproducts_sale_date = MyBase.Columns("products_sale_date")
            Me.columnquantity_to_sale = MyBase.Columns("quantity_to_sale")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnproducts_id = New Global.System.Data.DataColumn("products_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_id)
            Me.columnproducts_quantity = New Global.System.Data.DataColumn("products_quantity", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_quantity)
            Me.columnproducts_model = New Global.System.Data.DataColumn("products_model", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_model)
            Me.columnimdb_id = New Global.System.Data.DataColumn("imdb_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimdb_id)
            Me.columnproducts_title = New Global.System.Data.DataColumn("products_title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_title)
            Me.columnproducts_price = New Global.System.Data.DataColumn("products_price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_price)
            Me.columnproducts_type = New Global.System.Data.DataColumn("products_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_type)
            Me.columnFR_Title = New Global.System.Data.DataColumn("FR_Title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFR_Title)
            Me.columnNL_Title = New Global.System.Data.DataColumn("NL_Title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNL_Title)
            Me.columnEN_Title = New Global.System.Data.DataColumn("EN_Title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEN_Title)
            Me.columnActor1 = New Global.System.Data.DataColumn("Actor1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActor1)
            Me.columnActor2 = New Global.System.Data.DataColumn("Actor2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActor2)
            Me.columnActor3 = New Global.System.Data.DataColumn("Actor3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActor3)
            Me.columnCategory1 = New Global.System.Data.DataColumn("Category1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCategory1)
            Me.columnCategory2 = New Global.System.Data.DataColumn("Category2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCategory2)
            Me.columnCategory3 = New Global.System.Data.DataColumn("Category3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCategory3)
            Me.columnSubTitles = New Global.System.Data.DataColumn("SubTitles", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubTitles)
            Me.columnLanguages = New Global.System.Data.DataColumn("Languages", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLanguages)
            Me.columndirector = New Global.System.Data.DataColumn("director", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndirector)
            Me.columnActors = New Global.System.Data.DataColumn("Actors", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActors)
            Me.columnCategories = New Global.System.Data.DataColumn("Categories", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCategories)
            Me.columnproducts_date_added = New Global.System.Data.DataColumn("products_date_added", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_date_added)
            Me.columnproducts_date_available = New Global.System.Data.DataColumn("products_date_available", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_date_available)
            Me.columnproducts_status = New Global.System.Data.DataColumn("products_status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_status)
            Me.columnproducts_year = New Global.System.Data.DataColumn("products_year", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_year)
            Me.columnproducts_sale_price = New Global.System.Data.DataColumn("products_sale_price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_sale_price)
            Me.columnproducts_sale_date = New Global.System.Data.DataColumn("products_sale_date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_sale_date)
            Me.columnquantity_to_sale = New Global.System.Data.DataColumn("quantity_to_sale", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquantity_to_sale)
            Me.columnproducts_id.AllowDBNull = false
            Me.columnproducts_quantity.AllowDBNull = false
            Me.columnimdb_id.AllowDBNull = false
            Me.columnproducts_title.AllowDBNull = false
            Me.columnproducts_price.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newproducts_view1Row() As products_view1Row
            Return CType(Me.NewRow,products_view1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New products_view1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(products_view1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.products_view1RowChangedEvent) Is Nothing) Then
                RaiseEvent products_view1RowChanged(Me, New products_view1RowChangeEvent(CType(e.Row,products_view1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.products_view1RowChangingEvent) Is Nothing) Then
                RaiseEvent products_view1RowChanging(Me, New products_view1RowChangeEvent(CType(e.Row,products_view1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.products_view1RowDeletedEvent) Is Nothing) Then
                RaiseEvent products_view1RowDeleted(Me, New products_view1RowChangeEvent(CType(e.Row,products_view1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.products_view1RowDeletingEvent) Is Nothing) Then
                RaiseEvent products_view1RowDeleting(Me, New products_view1RowChangeEvent(CType(e.Row,products_view1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeproducts_view1Row(ByVal row As products_view1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "products_view1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class actorsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnactors_id As Global.System.Data.DataColumn
        
        Private columnactors_name As Global.System.Data.DataColumn
        
        Private columnactors_dateofbirth As Global.System.Data.DataColumn
        
        Private columnbirth_place As Global.System.Data.DataColumn
        
        Private columndeath_at As Global.System.Data.DataColumn
        
        Private columndeath_place As Global.System.Data.DataColumn
        
        Private columnactors_type As Global.System.Data.DataColumn
        
        Private columnslug As Global.System.Data.DataColumn
        
        Private columnimage_active As Global.System.Data.DataColumn
        
        Private columnfocus As Global.System.Data.DataColumn
        
        Private columnsexuality As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "actors"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property actors_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnactors_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property actors_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnactors_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property actors_dateofbirthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnactors_dateofbirth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property birth_placeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbirth_place
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property death_atColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndeath_at
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property death_placeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndeath_place
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property actors_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnactors_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property slugColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnslug
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property image_activeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage_active
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property focusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfocus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sexualityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsexuality
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As actorsRow
            Get
                Return CType(Me.Rows(index),actorsRow)
            End Get
        End Property
        
        Public Event actorsRowChanging As actorsRowChangeEventHandler
        
        Public Event actorsRowChanged As actorsRowChangeEventHandler
        
        Public Event actorsRowDeleting As actorsRowChangeEventHandler
        
        Public Event actorsRowDeleted As actorsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddactorsRow(ByVal row As actorsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddactorsRow(ByVal actors_name As String, ByVal actors_dateofbirth As String, ByVal birth_place As String, ByVal death_at As Date, ByVal death_place As String, ByVal actors_type As String, ByVal slug As String, ByVal image_active As Short, ByVal focus As Short, ByVal sexuality As String) As actorsRow
            Dim rowactorsRow As actorsRow = CType(Me.NewRow,actorsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, actors_name, actors_dateofbirth, birth_place, death_at, death_place, actors_type, slug, image_active, focus, sexuality}
            rowactorsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowactorsRow)
            Return rowactorsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByactors_id(ByVal actors_id As Integer) As actorsRow
            Return CType(Me.Rows.Find(New Object() {actors_id}),actorsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As actorsDataTable = CType(MyBase.Clone,actorsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New actorsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnactors_id = MyBase.Columns("actors_id")
            Me.columnactors_name = MyBase.Columns("actors_name")
            Me.columnactors_dateofbirth = MyBase.Columns("actors_dateofbirth")
            Me.columnbirth_place = MyBase.Columns("birth_place")
            Me.columndeath_at = MyBase.Columns("death_at")
            Me.columndeath_place = MyBase.Columns("death_place")
            Me.columnactors_type = MyBase.Columns("actors_type")
            Me.columnslug = MyBase.Columns("slug")
            Me.columnimage_active = MyBase.Columns("image_active")
            Me.columnfocus = MyBase.Columns("focus")
            Me.columnsexuality = MyBase.Columns("sexuality")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnactors_id = New Global.System.Data.DataColumn("actors_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnactors_id)
            Me.columnactors_name = New Global.System.Data.DataColumn("actors_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnactors_name)
            Me.columnactors_dateofbirth = New Global.System.Data.DataColumn("actors_dateofbirth", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnactors_dateofbirth)
            Me.columnbirth_place = New Global.System.Data.DataColumn("birth_place", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbirth_place)
            Me.columndeath_at = New Global.System.Data.DataColumn("death_at", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndeath_at)
            Me.columndeath_place = New Global.System.Data.DataColumn("death_place", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndeath_place)
            Me.columnactors_type = New Global.System.Data.DataColumn("actors_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnactors_type)
            Me.columnslug = New Global.System.Data.DataColumn("slug", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnslug)
            Me.columnimage_active = New Global.System.Data.DataColumn("image_active", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage_active)
            Me.columnfocus = New Global.System.Data.DataColumn("focus", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfocus)
            Me.columnsexuality = New Global.System.Data.DataColumn("sexuality", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsexuality)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsProductsKey3", New Global.System.Data.DataColumn() {Me.columnactors_id}, true))
            Me.columnactors_id.AutoIncrement = true
            Me.columnactors_id.AllowDBNull = false
            Me.columnactors_id.ReadOnly = true
            Me.columnactors_id.Unique = true
            Me.columnactors_name.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewactorsRow() As actorsRow
            Return CType(Me.NewRow,actorsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New actorsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(actorsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.actorsRowChangedEvent) Is Nothing) Then
                RaiseEvent actorsRowChanged(Me, New actorsRowChangeEvent(CType(e.Row,actorsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.actorsRowChangingEvent) Is Nothing) Then
                RaiseEvent actorsRowChanging(Me, New actorsRowChangeEvent(CType(e.Row,actorsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.actorsRowDeletedEvent) Is Nothing) Then
                RaiseEvent actorsRowDeleted(Me, New actorsRowChangeEvent(CType(e.Row,actorsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.actorsRowDeletingEvent) Is Nothing) Then
                RaiseEvent actorsRowDeleting(Me, New actorsRowChangeEvent(CType(e.Row,actorsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveactorsRow(ByVal row As actorsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "actorsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class directorsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columndirectors_id As Global.System.Data.DataColumn
        
        Private columndirectors_name As Global.System.Data.DataColumn
        
        Private columnimage_active As Global.System.Data.DataColumn
        
        Private columndirectors_dateofbirth As Global.System.Data.DataColumn
        
        Private columnbirth_place As Global.System.Data.DataColumn
        
        Private columndeath_at As Global.System.Data.DataColumn
        
        Private columndeath_place As Global.System.Data.DataColumn
        
        Private columnslug As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "directors"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property directors_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndirectors_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property directors_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndirectors_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property image_activeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage_active
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property directors_dateofbirthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndirectors_dateofbirth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property birth_placeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbirth_place
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property death_atColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndeath_at
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property death_placeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndeath_place
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property slugColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnslug
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As directorsRow
            Get
                Return CType(Me.Rows(index),directorsRow)
            End Get
        End Property
        
        Public Event directorsRowChanging As directorsRowChangeEventHandler
        
        Public Event directorsRowChanged As directorsRowChangeEventHandler
        
        Public Event directorsRowDeleting As directorsRowChangeEventHandler
        
        Public Event directorsRowDeleted As directorsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddirectorsRow(ByVal row As directorsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddirectorsRow(ByVal directors_name As String, ByVal image_active As String, ByVal directors_dateofbirth As String, ByVal birth_place As String, ByVal death_at As Date, ByVal death_place As String, ByVal slug As String) As directorsRow
            Dim rowdirectorsRow As directorsRow = CType(Me.NewRow,directorsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, directors_name, image_active, directors_dateofbirth, birth_place, death_at, death_place, slug}
            rowdirectorsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdirectorsRow)
            Return rowdirectorsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBydirectors_id(ByVal directors_id As Integer) As directorsRow
            Return CType(Me.Rows.Find(New Object() {directors_id}),directorsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As directorsDataTable = CType(MyBase.Clone,directorsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New directorsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columndirectors_id = MyBase.Columns("directors_id")
            Me.columndirectors_name = MyBase.Columns("directors_name")
            Me.columnimage_active = MyBase.Columns("image_active")
            Me.columndirectors_dateofbirth = MyBase.Columns("directors_dateofbirth")
            Me.columnbirth_place = MyBase.Columns("birth_place")
            Me.columndeath_at = MyBase.Columns("death_at")
            Me.columndeath_place = MyBase.Columns("death_place")
            Me.columnslug = MyBase.Columns("slug")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columndirectors_id = New Global.System.Data.DataColumn("directors_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndirectors_id)
            Me.columndirectors_name = New Global.System.Data.DataColumn("directors_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndirectors_name)
            Me.columnimage_active = New Global.System.Data.DataColumn("image_active", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage_active)
            Me.columndirectors_dateofbirth = New Global.System.Data.DataColumn("directors_dateofbirth", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndirectors_dateofbirth)
            Me.columnbirth_place = New Global.System.Data.DataColumn("birth_place", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbirth_place)
            Me.columndeath_at = New Global.System.Data.DataColumn("death_at", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndeath_at)
            Me.columndeath_place = New Global.System.Data.DataColumn("death_place", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndeath_place)
            Me.columnslug = New Global.System.Data.DataColumn("slug", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnslug)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsProductsKey4", New Global.System.Data.DataColumn() {Me.columndirectors_id}, true))
            Me.columndirectors_id.AutoIncrement = true
            Me.columndirectors_id.AllowDBNull = false
            Me.columndirectors_id.ReadOnly = true
            Me.columndirectors_id.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdirectorsRow() As directorsRow
            Return CType(Me.NewRow,directorsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New directorsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(directorsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.directorsRowChangedEvent) Is Nothing) Then
                RaiseEvent directorsRowChanged(Me, New directorsRowChangeEvent(CType(e.Row,directorsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.directorsRowChangingEvent) Is Nothing) Then
                RaiseEvent directorsRowChanging(Me, New directorsRowChangeEvent(CType(e.Row,directorsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.directorsRowDeletedEvent) Is Nothing) Then
                RaiseEvent directorsRowDeleted(Me, New directorsRowChangeEvent(CType(e.Row,directorsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.directorsRowDeletingEvent) Is Nothing) Then
                RaiseEvent directorsRowDeleting(Me, New directorsRowChangeEvent(CType(e.Row,directorsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedirectorsRow(ByVal row As directorsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "directorsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class categoriesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncategories_id As Global.System.Data.DataColumn
        
        Private columncategories_image As Global.System.Data.DataColumn
        
        Private columnparent_id As Global.System.Data.DataColumn
        
        Private columnsort_order As Global.System.Data.DataColumn
        
        Private columndate_added As Global.System.Data.DataColumn
        
        Private columnlast_modified As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "categories"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property categories_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncategories_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property categories_imageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncategories_image
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property parent_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnparent_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sort_orderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsort_order
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property date_addedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndate_added
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property last_modifiedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlast_modified
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As categoriesRow
            Get
                Return CType(Me.Rows(index),categoriesRow)
            End Get
        End Property
        
        Public Event categoriesRowChanging As categoriesRowChangeEventHandler
        
        Public Event categoriesRowChanged As categoriesRowChangeEventHandler
        
        Public Event categoriesRowDeleting As categoriesRowChangeEventHandler
        
        Public Event categoriesRowDeleted As categoriesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddcategoriesRow(ByVal row As categoriesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddcategoriesRow(ByVal categories_image As String, ByVal parent_id As Integer, ByVal sort_order As Integer, ByVal date_added As Date, ByVal last_modified As Date) As categoriesRow
            Dim rowcategoriesRow As categoriesRow = CType(Me.NewRow,categoriesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, categories_image, parent_id, sort_order, date_added, last_modified}
            rowcategoriesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcategoriesRow)
            Return rowcategoriesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycategories_id(ByVal categories_id As Integer) As categoriesRow
            Return CType(Me.Rows.Find(New Object() {categories_id}),categoriesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As categoriesDataTable = CType(MyBase.Clone,categoriesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New categoriesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncategories_id = MyBase.Columns("categories_id")
            Me.columncategories_image = MyBase.Columns("categories_image")
            Me.columnparent_id = MyBase.Columns("parent_id")
            Me.columnsort_order = MyBase.Columns("sort_order")
            Me.columndate_added = MyBase.Columns("date_added")
            Me.columnlast_modified = MyBase.Columns("last_modified")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncategories_id = New Global.System.Data.DataColumn("categories_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncategories_id)
            Me.columncategories_image = New Global.System.Data.DataColumn("categories_image", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncategories_image)
            Me.columnparent_id = New Global.System.Data.DataColumn("parent_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnparent_id)
            Me.columnsort_order = New Global.System.Data.DataColumn("sort_order", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsort_order)
            Me.columndate_added = New Global.System.Data.DataColumn("date_added", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndate_added)
            Me.columnlast_modified = New Global.System.Data.DataColumn("last_modified", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlast_modified)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsProductsKey5", New Global.System.Data.DataColumn() {Me.columncategories_id}, true))
            Me.columncategories_id.AutoIncrement = true
            Me.columncategories_id.AllowDBNull = false
            Me.columncategories_id.ReadOnly = true
            Me.columncategories_id.Unique = true
            Me.columnparent_id.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewcategoriesRow() As categoriesRow
            Return CType(Me.NewRow,categoriesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New categoriesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(categoriesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.categoriesRowChangedEvent) Is Nothing) Then
                RaiseEvent categoriesRowChanged(Me, New categoriesRowChangeEvent(CType(e.Row,categoriesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.categoriesRowChangingEvent) Is Nothing) Then
                RaiseEvent categoriesRowChanging(Me, New categoriesRowChangeEvent(CType(e.Row,categoriesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.categoriesRowDeletedEvent) Is Nothing) Then
                RaiseEvent categoriesRowDeleted(Me, New categoriesRowChangeEvent(CType(e.Row,categoriesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.categoriesRowDeletingEvent) Is Nothing) Then
                RaiseEvent categoriesRowDeleting(Me, New categoriesRowChangeEvent(CType(e.Row,categoriesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovecategoriesRow(ByVal row As categoriesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "categoriesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class categories_descriptionDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncategories_id As Global.System.Data.DataColumn
        
        Private columnlanguage_id As Global.System.Data.DataColumn
        
        Private columncategories_name As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "categories_description"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property categories_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncategories_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property language_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlanguage_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property categories_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncategories_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As categories_descriptionRow
            Get
                Return CType(Me.Rows(index),categories_descriptionRow)
            End Get
        End Property
        
        Public Event categories_descriptionRowChanging As categories_descriptionRowChangeEventHandler
        
        Public Event categories_descriptionRowChanged As categories_descriptionRowChangeEventHandler
        
        Public Event categories_descriptionRowDeleting As categories_descriptionRowChangeEventHandler
        
        Public Event categories_descriptionRowDeleted As categories_descriptionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addcategories_descriptionRow(ByVal row As categories_descriptionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addcategories_descriptionRow(ByVal categories_id As Integer, ByVal language_id As Integer, ByVal categories_name As String) As categories_descriptionRow
            Dim rowcategories_descriptionRow As categories_descriptionRow = CType(Me.NewRow,categories_descriptionRow)
            Dim columnValuesArray() As Object = New Object() {categories_id, language_id, categories_name}
            rowcategories_descriptionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcategories_descriptionRow)
            Return rowcategories_descriptionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycategories_idlanguage_id(ByVal categories_id As Integer, ByVal language_id As Integer) As categories_descriptionRow
            Return CType(Me.Rows.Find(New Object() {categories_id, language_id}),categories_descriptionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As categories_descriptionDataTable = CType(MyBase.Clone,categories_descriptionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New categories_descriptionDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncategories_id = MyBase.Columns("categories_id")
            Me.columnlanguage_id = MyBase.Columns("language_id")
            Me.columncategories_name = MyBase.Columns("categories_name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncategories_id = New Global.System.Data.DataColumn("categories_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncategories_id)
            Me.columnlanguage_id = New Global.System.Data.DataColumn("language_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlanguage_id)
            Me.columncategories_name = New Global.System.Data.DataColumn("categories_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncategories_name)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsProductsKey6", New Global.System.Data.DataColumn() {Me.columncategories_id, Me.columnlanguage_id}, true))
            Me.columncategories_id.AllowDBNull = false
            Me.columnlanguage_id.AllowDBNull = false
            Me.columncategories_name.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newcategories_descriptionRow() As categories_descriptionRow
            Return CType(Me.NewRow,categories_descriptionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New categories_descriptionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(categories_descriptionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.categories_descriptionRowChangedEvent) Is Nothing) Then
                RaiseEvent categories_descriptionRowChanged(Me, New categories_descriptionRowChangeEvent(CType(e.Row,categories_descriptionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.categories_descriptionRowChangingEvent) Is Nothing) Then
                RaiseEvent categories_descriptionRowChanging(Me, New categories_descriptionRowChangeEvent(CType(e.Row,categories_descriptionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.categories_descriptionRowDeletedEvent) Is Nothing) Then
                RaiseEvent categories_descriptionRowDeleted(Me, New categories_descriptionRowChangeEvent(CType(e.Row,categories_descriptionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.categories_descriptionRowDeletingEvent) Is Nothing) Then
                RaiseEvent categories_descriptionRowDeleting(Me, New categories_descriptionRowChangeEvent(CType(e.Row,categories_descriptionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removecategories_descriptionRow(ByVal row As categories_descriptionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "categories_descriptionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class products_to_actorsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnproducts_id As Global.System.Data.DataColumn
        
        Private columnactors_id As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "products_to_actors"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property actors_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnactors_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As products_to_actorsRow
            Get
                Return CType(Me.Rows(index),products_to_actorsRow)
            End Get
        End Property
        
        Public Event products_to_actorsRowChanging As products_to_actorsRowChangeEventHandler
        
        Public Event products_to_actorsRowChanged As products_to_actorsRowChangeEventHandler
        
        Public Event products_to_actorsRowDeleting As products_to_actorsRowChangeEventHandler
        
        Public Event products_to_actorsRowDeleted As products_to_actorsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addproducts_to_actorsRow(ByVal row As products_to_actorsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addproducts_to_actorsRow(ByVal products_id As Integer, ByVal actors_id As Integer) As products_to_actorsRow
            Dim rowproducts_to_actorsRow As products_to_actorsRow = CType(Me.NewRow,products_to_actorsRow)
            Dim columnValuesArray() As Object = New Object() {products_id, actors_id}
            rowproducts_to_actorsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowproducts_to_actorsRow)
            Return rowproducts_to_actorsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByproducts_idactors_id(ByVal products_id As Integer, ByVal actors_id As Integer) As products_to_actorsRow
            Return CType(Me.Rows.Find(New Object() {products_id, actors_id}),products_to_actorsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As products_to_actorsDataTable = CType(MyBase.Clone,products_to_actorsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New products_to_actorsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnproducts_id = MyBase.Columns("products_id")
            Me.columnactors_id = MyBase.Columns("actors_id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnproducts_id = New Global.System.Data.DataColumn("products_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_id)
            Me.columnactors_id = New Global.System.Data.DataColumn("actors_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnactors_id)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsProductsKey7", New Global.System.Data.DataColumn() {Me.columnproducts_id, Me.columnactors_id}, true))
            Me.columnproducts_id.AllowDBNull = false
            Me.columnactors_id.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newproducts_to_actorsRow() As products_to_actorsRow
            Return CType(Me.NewRow,products_to_actorsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New products_to_actorsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(products_to_actorsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.products_to_actorsRowChangedEvent) Is Nothing) Then
                RaiseEvent products_to_actorsRowChanged(Me, New products_to_actorsRowChangeEvent(CType(e.Row,products_to_actorsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.products_to_actorsRowChangingEvent) Is Nothing) Then
                RaiseEvent products_to_actorsRowChanging(Me, New products_to_actorsRowChangeEvent(CType(e.Row,products_to_actorsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.products_to_actorsRowDeletedEvent) Is Nothing) Then
                RaiseEvent products_to_actorsRowDeleted(Me, New products_to_actorsRowChangeEvent(CType(e.Row,products_to_actorsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.products_to_actorsRowDeletingEvent) Is Nothing) Then
                RaiseEvent products_to_actorsRowDeleting(Me, New products_to_actorsRowChangeEvent(CType(e.Row,products_to_actorsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeproducts_to_actorsRow(ByVal row As products_to_actorsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "products_to_actorsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class products_to_categoriesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnproducts_id As Global.System.Data.DataColumn
        
        Private columncategories_id As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "products_to_categories"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property categories_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncategories_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As products_to_categoriesRow
            Get
                Return CType(Me.Rows(index),products_to_categoriesRow)
            End Get
        End Property
        
        Public Event products_to_categoriesRowChanging As products_to_categoriesRowChangeEventHandler
        
        Public Event products_to_categoriesRowChanged As products_to_categoriesRowChangeEventHandler
        
        Public Event products_to_categoriesRowDeleting As products_to_categoriesRowChangeEventHandler
        
        Public Event products_to_categoriesRowDeleted As products_to_categoriesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addproducts_to_categoriesRow(ByVal row As products_to_categoriesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addproducts_to_categoriesRow(ByVal products_id As Integer, ByVal categories_id As Integer) As products_to_categoriesRow
            Dim rowproducts_to_categoriesRow As products_to_categoriesRow = CType(Me.NewRow,products_to_categoriesRow)
            Dim columnValuesArray() As Object = New Object() {products_id, categories_id}
            rowproducts_to_categoriesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowproducts_to_categoriesRow)
            Return rowproducts_to_categoriesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByproducts_idcategories_id(ByVal products_id As Integer, ByVal categories_id As Integer) As products_to_categoriesRow
            Return CType(Me.Rows.Find(New Object() {products_id, categories_id}),products_to_categoriesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As products_to_categoriesDataTable = CType(MyBase.Clone,products_to_categoriesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New products_to_categoriesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnproducts_id = MyBase.Columns("products_id")
            Me.columncategories_id = MyBase.Columns("categories_id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnproducts_id = New Global.System.Data.DataColumn("products_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_id)
            Me.columncategories_id = New Global.System.Data.DataColumn("categories_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncategories_id)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsProductsKey8", New Global.System.Data.DataColumn() {Me.columnproducts_id, Me.columncategories_id}, true))
            Me.columnproducts_id.AllowDBNull = false
            Me.columncategories_id.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newproducts_to_categoriesRow() As products_to_categoriesRow
            Return CType(Me.NewRow,products_to_categoriesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New products_to_categoriesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(products_to_categoriesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.products_to_categoriesRowChangedEvent) Is Nothing) Then
                RaiseEvent products_to_categoriesRowChanged(Me, New products_to_categoriesRowChangeEvent(CType(e.Row,products_to_categoriesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.products_to_categoriesRowChangingEvent) Is Nothing) Then
                RaiseEvent products_to_categoriesRowChanging(Me, New products_to_categoriesRowChangeEvent(CType(e.Row,products_to_categoriesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.products_to_categoriesRowDeletedEvent) Is Nothing) Then
                RaiseEvent products_to_categoriesRowDeleted(Me, New products_to_categoriesRowChangeEvent(CType(e.Row,products_to_categoriesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.products_to_categoriesRowDeletingEvent) Is Nothing) Then
                RaiseEvent products_to_categoriesRowDeleting(Me, New products_to_categoriesRowChangeEvent(CType(e.Row,products_to_categoriesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeproducts_to_categoriesRow(ByVal row As products_to_categoriesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "products_to_categoriesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class products_undertitles_View1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnproducts_id As Global.System.Data.DataColumn
        
        Private columnundertitles_id As Global.System.Data.DataColumn
        
        Private columnLanguage_ID As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "products_undertitles_View1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property undertitles_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnundertitles_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Language_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLanguage_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As products_undertitles_View1Row
            Get
                Return CType(Me.Rows(index),products_undertitles_View1Row)
            End Get
        End Property
        
        Public Event products_undertitles_View1RowChanging As products_undertitles_View1RowChangeEventHandler
        
        Public Event products_undertitles_View1RowChanged As products_undertitles_View1RowChangeEventHandler
        
        Public Event products_undertitles_View1RowDeleting As products_undertitles_View1RowChangeEventHandler
        
        Public Event products_undertitles_View1RowDeleted As products_undertitles_View1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addproducts_undertitles_View1Row(ByVal row As products_undertitles_View1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addproducts_undertitles_View1Row(ByVal products_id As Integer, ByVal undertitles_id As Integer, ByVal Language_ID As Integer, ByVal Description As String) As products_undertitles_View1Row
            Dim rowproducts_undertitles_View1Row As products_undertitles_View1Row = CType(Me.NewRow,products_undertitles_View1Row)
            Dim columnValuesArray() As Object = New Object() {products_id, undertitles_id, Language_ID, Description}
            rowproducts_undertitles_View1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowproducts_undertitles_View1Row)
            Return rowproducts_undertitles_View1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As products_undertitles_View1DataTable = CType(MyBase.Clone,products_undertitles_View1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New products_undertitles_View1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnproducts_id = MyBase.Columns("products_id")
            Me.columnundertitles_id = MyBase.Columns("undertitles_id")
            Me.columnLanguage_ID = MyBase.Columns("Language_ID")
            Me.columnDescription = MyBase.Columns("Description")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnproducts_id = New Global.System.Data.DataColumn("products_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_id)
            Me.columnundertitles_id = New Global.System.Data.DataColumn("undertitles_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnundertitles_id)
            Me.columnLanguage_ID = New Global.System.Data.DataColumn("Language_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLanguage_ID)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnproducts_id.AllowDBNull = false
            Me.columnundertitles_id.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newproducts_undertitles_View1Row() As products_undertitles_View1Row
            Return CType(Me.NewRow,products_undertitles_View1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New products_undertitles_View1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(products_undertitles_View1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.products_undertitles_View1RowChangedEvent) Is Nothing) Then
                RaiseEvent products_undertitles_View1RowChanged(Me, New products_undertitles_View1RowChangeEvent(CType(e.Row,products_undertitles_View1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.products_undertitles_View1RowChangingEvent) Is Nothing) Then
                RaiseEvent products_undertitles_View1RowChanging(Me, New products_undertitles_View1RowChangeEvent(CType(e.Row,products_undertitles_View1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.products_undertitles_View1RowDeletedEvent) Is Nothing) Then
                RaiseEvent products_undertitles_View1RowDeleted(Me, New products_undertitles_View1RowChangeEvent(CType(e.Row,products_undertitles_View1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.products_undertitles_View1RowDeletingEvent) Is Nothing) Then
                RaiseEvent products_undertitles_View1RowDeleting(Me, New products_undertitles_View1RowChangeEvent(CType(e.Row,products_undertitles_View1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeproducts_undertitles_View1Row(ByVal row As products_undertitles_View1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "products_undertitles_View1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class products_languages_View1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnproducts_id As Global.System.Data.DataColumn
        
        Private columnlanguages_id As Global.System.Data.DataColumn
        
        Private columnLanguageNav_ID As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "products_languages_View1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property languages_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlanguages_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LanguageNav_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLanguageNav_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As products_languages_View1Row
            Get
                Return CType(Me.Rows(index),products_languages_View1Row)
            End Get
        End Property
        
        Public Event products_languages_View1RowChanging As products_languages_View1RowChangeEventHandler
        
        Public Event products_languages_View1RowChanged As products_languages_View1RowChangeEventHandler
        
        Public Event products_languages_View1RowDeleting As products_languages_View1RowChangeEventHandler
        
        Public Event products_languages_View1RowDeleted As products_languages_View1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addproducts_languages_View1Row(ByVal row As products_languages_View1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addproducts_languages_View1Row(ByVal products_id As Integer, ByVal languages_id As Integer, ByVal LanguageNav_ID As Integer, ByVal Description As String) As products_languages_View1Row
            Dim rowproducts_languages_View1Row As products_languages_View1Row = CType(Me.NewRow,products_languages_View1Row)
            Dim columnValuesArray() As Object = New Object() {products_id, languages_id, LanguageNav_ID, Description}
            rowproducts_languages_View1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowproducts_languages_View1Row)
            Return rowproducts_languages_View1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As products_languages_View1DataTable = CType(MyBase.Clone,products_languages_View1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New products_languages_View1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnproducts_id = MyBase.Columns("products_id")
            Me.columnlanguages_id = MyBase.Columns("languages_id")
            Me.columnLanguageNav_ID = MyBase.Columns("LanguageNav_ID")
            Me.columnDescription = MyBase.Columns("Description")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnproducts_id = New Global.System.Data.DataColumn("products_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_id)
            Me.columnlanguages_id = New Global.System.Data.DataColumn("languages_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlanguages_id)
            Me.columnLanguageNav_ID = New Global.System.Data.DataColumn("LanguageNav_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLanguageNav_ID)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnproducts_id.AllowDBNull = false
            Me.columnlanguages_id.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newproducts_languages_View1Row() As products_languages_View1Row
            Return CType(Me.NewRow,products_languages_View1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New products_languages_View1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(products_languages_View1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.products_languages_View1RowChangedEvent) Is Nothing) Then
                RaiseEvent products_languages_View1RowChanged(Me, New products_languages_View1RowChangeEvent(CType(e.Row,products_languages_View1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.products_languages_View1RowChangingEvent) Is Nothing) Then
                RaiseEvent products_languages_View1RowChanging(Me, New products_languages_View1RowChangeEvent(CType(e.Row,products_languages_View1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.products_languages_View1RowDeletedEvent) Is Nothing) Then
                RaiseEvent products_languages_View1RowDeleted(Me, New products_languages_View1RowChangeEvent(CType(e.Row,products_languages_View1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.products_languages_View1RowDeletingEvent) Is Nothing) Then
                RaiseEvent products_languages_View1RowDeleting(Me, New products_languages_View1RowChangeEvent(CType(e.Row,products_languages_View1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeproducts_languages_View1Row(ByVal row As products_languages_View1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "products_languages_View1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class languagesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnlanguages_id As Global.System.Data.DataColumn
        
        Private columnname As Global.System.Data.DataColumn
        
        Private columncode As Global.System.Data.DataColumn
        
        Private columnimage As Global.System.Data.DataColumn
        
        Private columndirectory As Global.System.Data.DataColumn
        
        Private columnsort_order As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "languages"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property languages_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlanguages_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property imageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property directoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndirectory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sort_orderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsort_order
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As languagesRow
            Get
                Return CType(Me.Rows(index),languagesRow)
            End Get
        End Property
        
        Public Event languagesRowChanging As languagesRowChangeEventHandler
        
        Public Event languagesRowChanged As languagesRowChangeEventHandler
        
        Public Event languagesRowDeleting As languagesRowChangeEventHandler
        
        Public Event languagesRowDeleted As languagesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddlanguagesRow(ByVal row As languagesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddlanguagesRow(ByVal name As String, ByVal code As String, ByVal image As String, ByVal directory As String, ByVal sort_order As Integer) As languagesRow
            Dim rowlanguagesRow As languagesRow = CType(Me.NewRow,languagesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, name, code, image, directory, sort_order}
            rowlanguagesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowlanguagesRow)
            Return rowlanguagesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBylanguages_id(ByVal languages_id As Integer) As languagesRow
            Return CType(Me.Rows.Find(New Object() {languages_id}),languagesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As languagesDataTable = CType(MyBase.Clone,languagesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New languagesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnlanguages_id = MyBase.Columns("languages_id")
            Me.columnname = MyBase.Columns("name")
            Me.columncode = MyBase.Columns("code")
            Me.columnimage = MyBase.Columns("image")
            Me.columndirectory = MyBase.Columns("directory")
            Me.columnsort_order = MyBase.Columns("sort_order")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnlanguages_id = New Global.System.Data.DataColumn("languages_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlanguages_id)
            Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname)
            Me.columncode = New Global.System.Data.DataColumn("code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncode)
            Me.columnimage = New Global.System.Data.DataColumn("image", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage)
            Me.columndirectory = New Global.System.Data.DataColumn("directory", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndirectory)
            Me.columnsort_order = New Global.System.Data.DataColumn("sort_order", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsort_order)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsProductsKey14", New Global.System.Data.DataColumn() {Me.columnlanguages_id}, true))
            Me.columnlanguages_id.AutoIncrement = true
            Me.columnlanguages_id.AllowDBNull = false
            Me.columnlanguages_id.ReadOnly = true
            Me.columnlanguages_id.Unique = true
            Me.columnname.AllowDBNull = false
            Me.columncode.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewlanguagesRow() As languagesRow
            Return CType(Me.NewRow,languagesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New languagesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(languagesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.languagesRowChangedEvent) Is Nothing) Then
                RaiseEvent languagesRowChanged(Me, New languagesRowChangeEvent(CType(e.Row,languagesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.languagesRowChangingEvent) Is Nothing) Then
                RaiseEvent languagesRowChanging(Me, New languagesRowChangeEvent(CType(e.Row,languagesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.languagesRowDeletedEvent) Is Nothing) Then
                RaiseEvent languagesRowDeleted(Me, New languagesRowChangeEvent(CType(e.Row,languagesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.languagesRowDeletingEvent) Is Nothing) Then
                RaiseEvent languagesRowDeleting(Me, New languagesRowChangeEvent(CType(e.Row,languagesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovelanguagesRow(ByVal row As languagesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "languagesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class products_cover_view1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnproducts_id As Global.System.Data.DataColumn
        
        Private columncover_box_id As Global.System.Data.DataColumn
        
        Private columnqty As Global.System.Data.DataColumn
        
        Private columnproducts_model As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "products_cover_view1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cover_box_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncover_box_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_modelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_model
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As products_cover_view1Row
            Get
                Return CType(Me.Rows(index),products_cover_view1Row)
            End Get
        End Property
        
        Public Event products_cover_view1RowChanging As products_cover_view1RowChangeEventHandler
        
        Public Event products_cover_view1RowChanged As products_cover_view1RowChangeEventHandler
        
        Public Event products_cover_view1RowDeleting As products_cover_view1RowChangeEventHandler
        
        Public Event products_cover_view1RowDeleted As products_cover_view1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addproducts_cover_view1Row(ByVal row As products_cover_view1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addproducts_cover_view1Row(ByVal products_id As Integer, ByVal cover_box_id As Integer, ByVal qty As Integer, ByVal products_model As String) As products_cover_view1Row
            Dim rowproducts_cover_view1Row As products_cover_view1Row = CType(Me.NewRow,products_cover_view1Row)
            Dim columnValuesArray() As Object = New Object() {products_id, cover_box_id, qty, products_model}
            rowproducts_cover_view1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowproducts_cover_view1Row)
            Return rowproducts_cover_view1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As products_cover_view1DataTable = CType(MyBase.Clone,products_cover_view1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New products_cover_view1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnproducts_id = MyBase.Columns("products_id")
            Me.columncover_box_id = MyBase.Columns("cover_box_id")
            Me.columnqty = MyBase.Columns("qty")
            Me.columnproducts_model = MyBase.Columns("products_model")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnproducts_id = New Global.System.Data.DataColumn("products_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_id)
            Me.columncover_box_id = New Global.System.Data.DataColumn("cover_box_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncover_box_id)
            Me.columnqty = New Global.System.Data.DataColumn("qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty)
            Me.columnproducts_model = New Global.System.Data.DataColumn("products_model", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_model)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newproducts_cover_view1Row() As products_cover_view1Row
            Return CType(Me.NewRow,products_cover_view1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New products_cover_view1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(products_cover_view1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.products_cover_view1RowChangedEvent) Is Nothing) Then
                RaiseEvent products_cover_view1RowChanged(Me, New products_cover_view1RowChangeEvent(CType(e.Row,products_cover_view1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.products_cover_view1RowChangingEvent) Is Nothing) Then
                RaiseEvent products_cover_view1RowChanging(Me, New products_cover_view1RowChangeEvent(CType(e.Row,products_cover_view1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.products_cover_view1RowDeletedEvent) Is Nothing) Then
                RaiseEvent products_cover_view1RowDeleted(Me, New products_cover_view1RowChangeEvent(CType(e.Row,products_cover_view1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.products_cover_view1RowDeletingEvent) Is Nothing) Then
                RaiseEvent products_cover_view1RowDeleting(Me, New products_cover_view1RowChangeEvent(CType(e.Row,products_cover_view1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeproducts_cover_view1Row(ByVal row As products_cover_view1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "products_cover_view1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tmp_products_nlDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnproducts_id_nl As Global.System.Data.DataColumn
        
        Private columnproducts_type As Global.System.Data.DataColumn
        
        Private columnproducts_model As Global.System.Data.DataColumn
        
        Private columnproducts_image As Global.System.Data.DataColumn
        
        Private columnproducts_status As Global.System.Data.DataColumn
        
        Private columnproducts_id_be As Global.System.Data.DataColumn
        
        Private columnlanguages As Global.System.Data.DataColumn
        
        Private columnsubtitles As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tmp_products_nl"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_id_nlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_id_nl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_modelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_model
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_imageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_image
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_statusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_status
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_id_beColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_id_be
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property languagesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlanguages
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subtitlesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubtitles
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tmp_products_nlRow
            Get
                Return CType(Me.Rows(index),tmp_products_nlRow)
            End Get
        End Property
        
        Public Event tmp_products_nlRowChanging As tmp_products_nlRowChangeEventHandler
        
        Public Event tmp_products_nlRowChanged As tmp_products_nlRowChangeEventHandler
        
        Public Event tmp_products_nlRowDeleting As tmp_products_nlRowChangeEventHandler
        
        Public Event tmp_products_nlRowDeleted As tmp_products_nlRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addtmp_products_nlRow(ByVal row As tmp_products_nlRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addtmp_products_nlRow(ByVal products_id_nl As Integer, ByVal products_type As String, ByVal products_model As String, ByVal products_image As String, ByVal products_status As Integer, ByVal products_id_be As Integer, ByVal languages As String, ByVal subtitles As String) As tmp_products_nlRow
            Dim rowtmp_products_nlRow As tmp_products_nlRow = CType(Me.NewRow,tmp_products_nlRow)
            Dim columnValuesArray() As Object = New Object() {products_id_nl, products_type, products_model, products_image, products_status, products_id_be, languages, subtitles}
            rowtmp_products_nlRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtmp_products_nlRow)
            Return rowtmp_products_nlRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tmp_products_nlDataTable = CType(MyBase.Clone,tmp_products_nlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tmp_products_nlDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnproducts_id_nl = MyBase.Columns("products_id_nl")
            Me.columnproducts_type = MyBase.Columns("products_type")
            Me.columnproducts_model = MyBase.Columns("products_model")
            Me.columnproducts_image = MyBase.Columns("products_image")
            Me.columnproducts_status = MyBase.Columns("products_status")
            Me.columnproducts_id_be = MyBase.Columns("products_id_be")
            Me.columnlanguages = MyBase.Columns("languages")
            Me.columnsubtitles = MyBase.Columns("subtitles")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnproducts_id_nl = New Global.System.Data.DataColumn("products_id_nl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_id_nl)
            Me.columnproducts_type = New Global.System.Data.DataColumn("products_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_type)
            Me.columnproducts_model = New Global.System.Data.DataColumn("products_model", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_model)
            Me.columnproducts_image = New Global.System.Data.DataColumn("products_image", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_image)
            Me.columnproducts_status = New Global.System.Data.DataColumn("products_status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_status)
            Me.columnproducts_id_be = New Global.System.Data.DataColumn("products_id_be", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_id_be)
            Me.columnlanguages = New Global.System.Data.DataColumn("languages", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlanguages)
            Me.columnsubtitles = New Global.System.Data.DataColumn("subtitles", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubtitles)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newtmp_products_nlRow() As tmp_products_nlRow
            Return CType(Me.NewRow,tmp_products_nlRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tmp_products_nlRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tmp_products_nlRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tmp_products_nlRowChangedEvent) Is Nothing) Then
                RaiseEvent tmp_products_nlRowChanged(Me, New tmp_products_nlRowChangeEvent(CType(e.Row,tmp_products_nlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tmp_products_nlRowChangingEvent) Is Nothing) Then
                RaiseEvent tmp_products_nlRowChanging(Me, New tmp_products_nlRowChangeEvent(CType(e.Row,tmp_products_nlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tmp_products_nlRowDeletedEvent) Is Nothing) Then
                RaiseEvent tmp_products_nlRowDeleted(Me, New tmp_products_nlRowChangeEvent(CType(e.Row,tmp_products_nlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tmp_products_nlRowDeletingEvent) Is Nothing) Then
                RaiseEvent tmp_products_nlRowDeleting(Me, New tmp_products_nlRowChangeEvent(CType(e.Row,tmp_products_nlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removetmp_products_nlRow(ByVal row As tmp_products_nlRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tmp_products_nlDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class view_products_statusDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnstatus_id As Global.System.Data.DataColumn
        
        Private columnstatus_desc As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "view_products_status"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property status_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatus_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property status_descColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatus_desc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As view_products_statusRow
            Get
                Return CType(Me.Rows(index),view_products_statusRow)
            End Get
        End Property
        
        Public Event view_products_statusRowChanging As view_products_statusRowChangeEventHandler
        
        Public Event view_products_statusRowChanged As view_products_statusRowChangeEventHandler
        
        Public Event view_products_statusRowDeleting As view_products_statusRowChangeEventHandler
        
        Public Event view_products_statusRowDeleted As view_products_statusRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addview_products_statusRow(ByVal row As view_products_statusRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addview_products_statusRow(ByVal status_id As Integer, ByVal status_desc As String) As view_products_statusRow
            Dim rowview_products_statusRow As view_products_statusRow = CType(Me.NewRow,view_products_statusRow)
            Dim columnValuesArray() As Object = New Object() {status_id, status_desc}
            rowview_products_statusRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowview_products_statusRow)
            Return rowview_products_statusRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As view_products_statusDataTable = CType(MyBase.Clone,view_products_statusDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New view_products_statusDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnstatus_id = MyBase.Columns("status_id")
            Me.columnstatus_desc = MyBase.Columns("status_desc")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnstatus_id = New Global.System.Data.DataColumn("status_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatus_id)
            Me.columnstatus_desc = New Global.System.Data.DataColumn("status_desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatus_desc)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newview_products_statusRow() As view_products_statusRow
            Return CType(Me.NewRow,view_products_statusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New view_products_statusRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(view_products_statusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.view_products_statusRowChangedEvent) Is Nothing) Then
                RaiseEvent view_products_statusRowChanged(Me, New view_products_statusRowChangeEvent(CType(e.Row,view_products_statusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.view_products_statusRowChangingEvent) Is Nothing) Then
                RaiseEvent view_products_statusRowChanging(Me, New view_products_statusRowChangeEvent(CType(e.Row,view_products_statusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.view_products_statusRowDeletedEvent) Is Nothing) Then
                RaiseEvent view_products_statusRowDeleted(Me, New view_products_statusRowChangeEvent(CType(e.Row,view_products_statusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.view_products_statusRowDeletingEvent) Is Nothing) Then
                RaiseEvent view_products_statusRowDeleting(Me, New view_products_statusRowChangeEvent(CType(e.Row,view_products_statusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeview_products_statusRow(ByVal row As view_products_statusRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "view_products_statusDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class view_products_typeDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columntype_id As Global.System.Data.DataColumn
        
        Private columntype_desc As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "view_products_type"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property type_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntype_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property type_descColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntype_desc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As view_products_typeRow
            Get
                Return CType(Me.Rows(index),view_products_typeRow)
            End Get
        End Property
        
        Public Event view_products_typeRowChanging As view_products_typeRowChangeEventHandler
        
        Public Event view_products_typeRowChanged As view_products_typeRowChangeEventHandler
        
        Public Event view_products_typeRowDeleting As view_products_typeRowChangeEventHandler
        
        Public Event view_products_typeRowDeleted As view_products_typeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addview_products_typeRow(ByVal row As view_products_typeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addview_products_typeRow(ByVal type_id As Integer, ByVal type_desc As String) As view_products_typeRow
            Dim rowview_products_typeRow As view_products_typeRow = CType(Me.NewRow,view_products_typeRow)
            Dim columnValuesArray() As Object = New Object() {type_id, type_desc}
            rowview_products_typeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowview_products_typeRow)
            Return rowview_products_typeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As view_products_typeDataTable = CType(MyBase.Clone,view_products_typeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New view_products_typeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columntype_id = MyBase.Columns("type_id")
            Me.columntype_desc = MyBase.Columns("type_desc")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columntype_id = New Global.System.Data.DataColumn("type_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntype_id)
            Me.columntype_desc = New Global.System.Data.DataColumn("type_desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntype_desc)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newview_products_typeRow() As view_products_typeRow
            Return CType(Me.NewRow,view_products_typeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New view_products_typeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(view_products_typeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.view_products_typeRowChangedEvent) Is Nothing) Then
                RaiseEvent view_products_typeRowChanged(Me, New view_products_typeRowChangeEvent(CType(e.Row,view_products_typeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.view_products_typeRowChangingEvent) Is Nothing) Then
                RaiseEvent view_products_typeRowChanging(Me, New view_products_typeRowChangeEvent(CType(e.Row,view_products_typeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.view_products_typeRowDeletedEvent) Is Nothing) Then
                RaiseEvent view_products_typeRowDeleted(Me, New view_products_typeRowChangeEvent(CType(e.Row,view_products_typeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.view_products_typeRowDeletingEvent) Is Nothing) Then
                RaiseEvent view_products_typeRowDeleting(Me, New view_products_typeRowChangeEvent(CType(e.Row,view_products_typeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeview_products_typeRow(ByVal row As view_products_typeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "view_products_typeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class view_products_mediaDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnmedia_id As Global.System.Data.DataColumn
        
        Private columnmedia_desc As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "view_products_media"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property media_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmedia_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property media_descColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmedia_desc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As view_products_mediaRow
            Get
                Return CType(Me.Rows(index),view_products_mediaRow)
            End Get
        End Property
        
        Public Event view_products_mediaRowChanging As view_products_mediaRowChangeEventHandler
        
        Public Event view_products_mediaRowChanged As view_products_mediaRowChangeEventHandler
        
        Public Event view_products_mediaRowDeleting As view_products_mediaRowChangeEventHandler
        
        Public Event view_products_mediaRowDeleted As view_products_mediaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addview_products_mediaRow(ByVal row As view_products_mediaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addview_products_mediaRow(ByVal media_id As Integer, ByVal media_desc As String) As view_products_mediaRow
            Dim rowview_products_mediaRow As view_products_mediaRow = CType(Me.NewRow,view_products_mediaRow)
            Dim columnValuesArray() As Object = New Object() {media_id, media_desc}
            rowview_products_mediaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowview_products_mediaRow)
            Return rowview_products_mediaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As view_products_mediaDataTable = CType(MyBase.Clone,view_products_mediaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New view_products_mediaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnmedia_id = MyBase.Columns("media_id")
            Me.columnmedia_desc = MyBase.Columns("media_desc")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnmedia_id = New Global.System.Data.DataColumn("media_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmedia_id)
            Me.columnmedia_desc = New Global.System.Data.DataColumn("media_desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmedia_desc)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newview_products_mediaRow() As view_products_mediaRow
            Return CType(Me.NewRow,view_products_mediaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New view_products_mediaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(view_products_mediaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.view_products_mediaRowChangedEvent) Is Nothing) Then
                RaiseEvent view_products_mediaRowChanged(Me, New view_products_mediaRowChangeEvent(CType(e.Row,view_products_mediaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.view_products_mediaRowChangingEvent) Is Nothing) Then
                RaiseEvent view_products_mediaRowChanging(Me, New view_products_mediaRowChangeEvent(CType(e.Row,view_products_mediaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.view_products_mediaRowDeletedEvent) Is Nothing) Then
                RaiseEvent view_products_mediaRowDeleted(Me, New view_products_mediaRowChangeEvent(CType(e.Row,view_products_mediaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.view_products_mediaRowDeletingEvent) Is Nothing) Then
                RaiseEvent view_products_mediaRowDeleting(Me, New view_products_mediaRowChangeEvent(CType(e.Row,view_products_mediaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeview_products_mediaRow(ByVal row As view_products_mediaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "view_products_mediaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class products_countriesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncountries_id As Global.System.Data.DataColumn
        
        Private columncountries_name As Global.System.Data.DataColumn
        
        Private columninprod As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "products_countries"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property countries_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncountries_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property countries_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncountries_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property inprodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninprod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As products_countriesRow
            Get
                Return CType(Me.Rows(index),products_countriesRow)
            End Get
        End Property
        
        Public Event products_countriesRowChanging As products_countriesRowChangeEventHandler
        
        Public Event products_countriesRowChanged As products_countriesRowChangeEventHandler
        
        Public Event products_countriesRowDeleting As products_countriesRowChangeEventHandler
        
        Public Event products_countriesRowDeleted As products_countriesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addproducts_countriesRow(ByVal row As products_countriesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addproducts_countriesRow(ByVal countries_id As Integer, ByVal countries_name As String, ByVal inprod As Integer) As products_countriesRow
            Dim rowproducts_countriesRow As products_countriesRow = CType(Me.NewRow,products_countriesRow)
            Dim columnValuesArray() As Object = New Object() {countries_id, countries_name, inprod}
            rowproducts_countriesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowproducts_countriesRow)
            Return rowproducts_countriesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As products_countriesDataTable = CType(MyBase.Clone,products_countriesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New products_countriesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncountries_id = MyBase.Columns("countries_id")
            Me.columncountries_name = MyBase.Columns("countries_name")
            Me.columninprod = MyBase.Columns("inprod")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncountries_id = New Global.System.Data.DataColumn("countries_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncountries_id)
            Me.columncountries_name = New Global.System.Data.DataColumn("countries_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncountries_name)
            Me.columninprod = New Global.System.Data.DataColumn("inprod", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninprod)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newproducts_countriesRow() As products_countriesRow
            Return CType(Me.NewRow,products_countriesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New products_countriesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(products_countriesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.products_countriesRowChangedEvent) Is Nothing) Then
                RaiseEvent products_countriesRowChanged(Me, New products_countriesRowChangeEvent(CType(e.Row,products_countriesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.products_countriesRowChangingEvent) Is Nothing) Then
                RaiseEvent products_countriesRowChanging(Me, New products_countriesRowChangeEvent(CType(e.Row,products_countriesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.products_countriesRowDeletedEvent) Is Nothing) Then
                RaiseEvent products_countriesRowDeleted(Me, New products_countriesRowChangeEvent(CType(e.Row,products_countriesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.products_countriesRowDeletingEvent) Is Nothing) Then
                RaiseEvent products_countriesRowDeleting(Me, New products_countriesRowChangeEvent(CType(e.Row,products_countriesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeproducts_countriesRow(ByVal row As products_countriesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "products_countriesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class studioDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnstudio_id As Global.System.Data.DataColumn
        
        Private columnstudio_name As Global.System.Data.DataColumn
        
        Private columnstudio_type As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "studio"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studio_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudio_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studio_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudio_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studio_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudio_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As studioRow
            Get
                Return CType(Me.Rows(index),studioRow)
            End Get
        End Property
        
        Public Event studioRowChanging As studioRowChangeEventHandler
        
        Public Event studioRowChanged As studioRowChangeEventHandler
        
        Public Event studioRowDeleting As studioRowChangeEventHandler
        
        Public Event studioRowDeleted As studioRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddstudioRow(ByVal row As studioRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddstudioRow(ByVal studio_id As Integer, ByVal studio_name As String, ByVal studio_type As String) As studioRow
            Dim rowstudioRow As studioRow = CType(Me.NewRow,studioRow)
            Dim columnValuesArray() As Object = New Object() {studio_id, studio_name, studio_type}
            rowstudioRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowstudioRow)
            Return rowstudioRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As studioDataTable = CType(MyBase.Clone,studioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New studioDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnstudio_id = MyBase.Columns("studio_id")
            Me.columnstudio_name = MyBase.Columns("studio_name")
            Me.columnstudio_type = MyBase.Columns("studio_type")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnstudio_id = New Global.System.Data.DataColumn("studio_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudio_id)
            Me.columnstudio_name = New Global.System.Data.DataColumn("studio_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudio_name)
            Me.columnstudio_type = New Global.System.Data.DataColumn("studio_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudio_type)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewstudioRow() As studioRow
            Return CType(Me.NewRow,studioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New studioRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(studioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.studioRowChangedEvent) Is Nothing) Then
                RaiseEvent studioRowChanged(Me, New studioRowChangeEvent(CType(e.Row,studioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.studioRowChangingEvent) Is Nothing) Then
                RaiseEvent studioRowChanging(Me, New studioRowChangeEvent(CType(e.Row,studioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.studioRowDeletedEvent) Is Nothing) Then
                RaiseEvent studioRowDeleted(Me, New studioRowChangeEvent(CType(e.Row,studioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.studioRowDeletingEvent) Is Nothing) Then
                RaiseEvent studioRowDeleting(Me, New studioRowChangeEvent(CType(e.Row,studioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovestudioRow(ByVal row As studioRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "studioDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class view_products_availabilityDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnavailability_id As Global.System.Data.DataColumn
        
        Private columnavailability_desc As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "view_products_availability"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property availability_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnavailability_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property availability_descColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnavailability_desc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As view_products_availabilityRow
            Get
                Return CType(Me.Rows(index),view_products_availabilityRow)
            End Get
        End Property
        
        Public Event view_products_availabilityRowChanging As view_products_availabilityRowChangeEventHandler
        
        Public Event view_products_availabilityRowChanged As view_products_availabilityRowChangeEventHandler
        
        Public Event view_products_availabilityRowDeleting As view_products_availabilityRowChangeEventHandler
        
        Public Event view_products_availabilityRowDeleted As view_products_availabilityRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addview_products_availabilityRow(ByVal row As view_products_availabilityRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addview_products_availabilityRow(ByVal availability_id As Integer, ByVal availability_desc As String) As view_products_availabilityRow
            Dim rowview_products_availabilityRow As view_products_availabilityRow = CType(Me.NewRow,view_products_availabilityRow)
            Dim columnValuesArray() As Object = New Object() {availability_id, availability_desc}
            rowview_products_availabilityRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowview_products_availabilityRow)
            Return rowview_products_availabilityRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As view_products_availabilityDataTable = CType(MyBase.Clone,view_products_availabilityDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New view_products_availabilityDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnavailability_id = MyBase.Columns("availability_id")
            Me.columnavailability_desc = MyBase.Columns("availability_desc")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnavailability_id = New Global.System.Data.DataColumn("availability_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnavailability_id)
            Me.columnavailability_desc = New Global.System.Data.DataColumn("availability_desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnavailability_desc)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newview_products_availabilityRow() As view_products_availabilityRow
            Return CType(Me.NewRow,view_products_availabilityRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New view_products_availabilityRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(view_products_availabilityRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.view_products_availabilityRowChangedEvent) Is Nothing) Then
                RaiseEvent view_products_availabilityRowChanged(Me, New view_products_availabilityRowChangeEvent(CType(e.Row,view_products_availabilityRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.view_products_availabilityRowChangingEvent) Is Nothing) Then
                RaiseEvent view_products_availabilityRowChanging(Me, New view_products_availabilityRowChangeEvent(CType(e.Row,view_products_availabilityRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.view_products_availabilityRowDeletedEvent) Is Nothing) Then
                RaiseEvent view_products_availabilityRowDeleted(Me, New view_products_availabilityRowChangeEvent(CType(e.Row,view_products_availabilityRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.view_products_availabilityRowDeletingEvent) Is Nothing) Then
                RaiseEvent view_products_availabilityRowDeleting(Me, New view_products_availabilityRowChangeEvent(CType(e.Row,view_products_availabilityRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeview_products_availabilityRow(ByVal row As view_products_availabilityRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "view_products_availabilityDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class view_products_ratingDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnrating_id As Global.System.Data.DataColumn
        
        Private columnrating_desc As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "view_products_rating"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rating_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrating_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rating_descColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrating_desc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As view_products_ratingRow
            Get
                Return CType(Me.Rows(index),view_products_ratingRow)
            End Get
        End Property
        
        Public Event view_products_ratingRowChanging As view_products_ratingRowChangeEventHandler
        
        Public Event view_products_ratingRowChanged As view_products_ratingRowChangeEventHandler
        
        Public Event view_products_ratingRowDeleting As view_products_ratingRowChangeEventHandler
        
        Public Event view_products_ratingRowDeleted As view_products_ratingRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addview_products_ratingRow(ByVal row As view_products_ratingRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addview_products_ratingRow(ByVal rating_id As Integer, ByVal rating_desc As String) As view_products_ratingRow
            Dim rowview_products_ratingRow As view_products_ratingRow = CType(Me.NewRow,view_products_ratingRow)
            Dim columnValuesArray() As Object = New Object() {rating_id, rating_desc}
            rowview_products_ratingRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowview_products_ratingRow)
            Return rowview_products_ratingRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As view_products_ratingDataTable = CType(MyBase.Clone,view_products_ratingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New view_products_ratingDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnrating_id = MyBase.Columns("rating_id")
            Me.columnrating_desc = MyBase.Columns("rating_desc")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnrating_id = New Global.System.Data.DataColumn("rating_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrating_id)
            Me.columnrating_desc = New Global.System.Data.DataColumn("rating_desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrating_desc)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newview_products_ratingRow() As view_products_ratingRow
            Return CType(Me.NewRow,view_products_ratingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New view_products_ratingRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(view_products_ratingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.view_products_ratingRowChangedEvent) Is Nothing) Then
                RaiseEvent view_products_ratingRowChanged(Me, New view_products_ratingRowChangeEvent(CType(e.Row,view_products_ratingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.view_products_ratingRowChangingEvent) Is Nothing) Then
                RaiseEvent view_products_ratingRowChanging(Me, New view_products_ratingRowChangeEvent(CType(e.Row,view_products_ratingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.view_products_ratingRowDeletedEvent) Is Nothing) Then
                RaiseEvent view_products_ratingRowDeleted(Me, New view_products_ratingRowChangeEvent(CType(e.Row,view_products_ratingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.view_products_ratingRowDeletingEvent) Is Nothing) Then
                RaiseEvent view_products_ratingRowDeleting(Me, New view_products_ratingRowChangeEvent(CType(e.Row,view_products_ratingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeview_products_ratingRow(ByVal row As view_products_ratingRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "view_products_ratingDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class picture_formatDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnpicture_format_id As Global.System.Data.DataColumn
        
        Private columnlanguage_id As Global.System.Data.DataColumn
        
        Private columnpicture_format_name As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "picture_format"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property picture_format_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpicture_format_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property language_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlanguage_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property picture_format_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpicture_format_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As picture_formatRow
            Get
                Return CType(Me.Rows(index),picture_formatRow)
            End Get
        End Property
        
        Public Event picture_formatRowChanging As picture_formatRowChangeEventHandler
        
        Public Event picture_formatRowChanged As picture_formatRowChangeEventHandler
        
        Public Event picture_formatRowDeleting As picture_formatRowChangeEventHandler
        
        Public Event picture_formatRowDeleted As picture_formatRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addpicture_formatRow(ByVal row As picture_formatRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addpicture_formatRow(ByVal picture_format_id As Integer, ByVal language_id As Integer, ByVal picture_format_name As String) As picture_formatRow
            Dim rowpicture_formatRow As picture_formatRow = CType(Me.NewRow,picture_formatRow)
            Dim columnValuesArray() As Object = New Object() {picture_format_id, language_id, picture_format_name}
            rowpicture_formatRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowpicture_formatRow)
            Return rowpicture_formatRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As picture_formatDataTable = CType(MyBase.Clone,picture_formatDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New picture_formatDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpicture_format_id = MyBase.Columns("picture_format_id")
            Me.columnlanguage_id = MyBase.Columns("language_id")
            Me.columnpicture_format_name = MyBase.Columns("picture_format_name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpicture_format_id = New Global.System.Data.DataColumn("picture_format_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpicture_format_id)
            Me.columnlanguage_id = New Global.System.Data.DataColumn("language_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlanguage_id)
            Me.columnpicture_format_name = New Global.System.Data.DataColumn("picture_format_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpicture_format_name)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newpicture_formatRow() As picture_formatRow
            Return CType(Me.NewRow,picture_formatRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New picture_formatRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(picture_formatRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.picture_formatRowChangedEvent) Is Nothing) Then
                RaiseEvent picture_formatRowChanged(Me, New picture_formatRowChangeEvent(CType(e.Row,picture_formatRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.picture_formatRowChangingEvent) Is Nothing) Then
                RaiseEvent picture_formatRowChanging(Me, New picture_formatRowChangeEvent(CType(e.Row,picture_formatRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.picture_formatRowDeletedEvent) Is Nothing) Then
                RaiseEvent picture_formatRowDeleted(Me, New picture_formatRowChangeEvent(CType(e.Row,picture_formatRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.picture_formatRowDeletingEvent) Is Nothing) Then
                RaiseEvent picture_formatRowDeleting(Me, New picture_formatRowChangeEvent(CType(e.Row,picture_formatRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removepicture_formatRow(ByVal row As picture_formatRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "picture_formatDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class public1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnpublic_id As Global.System.Data.DataColumn
        
        Private columnlanguage_id As Global.System.Data.DataColumn
        
        Private columnpublic_name As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "public1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property public_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpublic_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property language_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlanguage_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property public_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpublic_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As public1Row
            Get
                Return CType(Me.Rows(index),public1Row)
            End Get
        End Property
        
        Public Event public1RowChanging As public1RowChangeEventHandler
        
        Public Event public1RowChanged As public1RowChangeEventHandler
        
        Public Event public1RowDeleting As public1RowChangeEventHandler
        
        Public Event public1RowDeleted As public1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addpublic1Row(ByVal row As public1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addpublic1Row(ByVal public_id As Integer, ByVal language_id As Integer, ByVal public_name As String) As public1Row
            Dim rowpublic1Row As public1Row = CType(Me.NewRow,public1Row)
            Dim columnValuesArray() As Object = New Object() {public_id, language_id, public_name}
            rowpublic1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowpublic1Row)
            Return rowpublic1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As public1DataTable = CType(MyBase.Clone,public1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New public1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpublic_id = MyBase.Columns("public_id")
            Me.columnlanguage_id = MyBase.Columns("language_id")
            Me.columnpublic_name = MyBase.Columns("public_name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpublic_id = New Global.System.Data.DataColumn("public_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpublic_id)
            Me.columnlanguage_id = New Global.System.Data.DataColumn("language_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlanguage_id)
            Me.columnpublic_name = New Global.System.Data.DataColumn("public_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpublic_name)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newpublic1Row() As public1Row
            Return CType(Me.NewRow,public1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New public1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(public1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.public1RowChangedEvent) Is Nothing) Then
                RaiseEvent public1RowChanged(Me, New public1RowChangeEvent(CType(e.Row,public1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.public1RowChangingEvent) Is Nothing) Then
                RaiseEvent public1RowChanging(Me, New public1RowChangeEvent(CType(e.Row,public1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.public1RowDeletedEvent) Is Nothing) Then
                RaiseEvent public1RowDeleted(Me, New public1RowChangeEvent(CType(e.Row,public1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.public1RowDeletingEvent) Is Nothing) Then
                RaiseEvent public1RowDeleting(Me, New public1RowChangeEvent(CType(e.Row,public1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removepublic1Row(ByVal row As public1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "public1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class seriesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnseries_id As Global.System.Data.DataColumn
        
        Private columnseries_name As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "series"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property series_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnseries_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property series_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnseries_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As seriesRow
            Get
                Return CType(Me.Rows(index),seriesRow)
            End Get
        End Property
        
        Public Event seriesRowChanging As seriesRowChangeEventHandler
        
        Public Event seriesRowChanged As seriesRowChangeEventHandler
        
        Public Event seriesRowDeleting As seriesRowChangeEventHandler
        
        Public Event seriesRowDeleted As seriesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddseriesRow(ByVal row As seriesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddseriesRow(ByVal series_id As Integer, ByVal series_name As String) As seriesRow
            Dim rowseriesRow As seriesRow = CType(Me.NewRow,seriesRow)
            Dim columnValuesArray() As Object = New Object() {series_id, series_name}
            rowseriesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowseriesRow)
            Return rowseriesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByseries_id(ByVal series_id As Integer) As seriesRow
            Return CType(Me.Rows.Find(New Object() {series_id}),seriesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As seriesDataTable = CType(MyBase.Clone,seriesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New seriesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnseries_id = MyBase.Columns("series_id")
            Me.columnseries_name = MyBase.Columns("series_name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnseries_id = New Global.System.Data.DataColumn("series_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnseries_id)
            Me.columnseries_name = New Global.System.Data.DataColumn("series_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnseries_name)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsProductsKey15", New Global.System.Data.DataColumn() {Me.columnseries_id}, true))
            Me.columnseries_id.AllowDBNull = false
            Me.columnseries_id.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewseriesRow() As seriesRow
            Return CType(Me.NewRow,seriesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New seriesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(seriesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.seriesRowChangedEvent) Is Nothing) Then
                RaiseEvent seriesRowChanged(Me, New seriesRowChangeEvent(CType(e.Row,seriesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.seriesRowChangingEvent) Is Nothing) Then
                RaiseEvent seriesRowChanging(Me, New seriesRowChangeEvent(CType(e.Row,seriesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.seriesRowDeletedEvent) Is Nothing) Then
                RaiseEvent seriesRowDeleted(Me, New seriesRowChangeEvent(CType(e.Row,seriesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.seriesRowDeletingEvent) Is Nothing) Then
                RaiseEvent seriesRowDeleting(Me, New seriesRowChangeEvent(CType(e.Row,seriesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveseriesRow(ByVal row As seriesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "seriesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class products_languagesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnlanguages_id As Global.System.Data.DataColumn
        
        Private columnlanguagenav_id As Global.System.Data.DataColumn
        
        Private columnlanguages_description As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "products_languages"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property languages_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlanguages_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property languagenav_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlanguagenav_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property languages_descriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlanguages_description
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As products_languagesRow
            Get
                Return CType(Me.Rows(index),products_languagesRow)
            End Get
        End Property
        
        Public Event products_languagesRowChanging As products_languagesRowChangeEventHandler
        
        Public Event products_languagesRowChanged As products_languagesRowChangeEventHandler
        
        Public Event products_languagesRowDeleting As products_languagesRowChangeEventHandler
        
        Public Event products_languagesRowDeleted As products_languagesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addproducts_languagesRow(ByVal row As products_languagesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addproducts_languagesRow(ByVal languages_id As Integer, ByVal languagenav_id As Integer, ByVal languages_description As String) As products_languagesRow
            Dim rowproducts_languagesRow As products_languagesRow = CType(Me.NewRow,products_languagesRow)
            Dim columnValuesArray() As Object = New Object() {languages_id, languagenav_id, languages_description}
            rowproducts_languagesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowproducts_languagesRow)
            Return rowproducts_languagesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As products_languagesDataTable = CType(MyBase.Clone,products_languagesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New products_languagesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnlanguages_id = MyBase.Columns("languages_id")
            Me.columnlanguagenav_id = MyBase.Columns("languagenav_id")
            Me.columnlanguages_description = MyBase.Columns("languages_description")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnlanguages_id = New Global.System.Data.DataColumn("languages_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlanguages_id)
            Me.columnlanguagenav_id = New Global.System.Data.DataColumn("languagenav_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlanguagenav_id)
            Me.columnlanguages_description = New Global.System.Data.DataColumn("languages_description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlanguages_description)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newproducts_languagesRow() As products_languagesRow
            Return CType(Me.NewRow,products_languagesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New products_languagesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(products_languagesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.products_languagesRowChangedEvent) Is Nothing) Then
                RaiseEvent products_languagesRowChanged(Me, New products_languagesRowChangeEvent(CType(e.Row,products_languagesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.products_languagesRowChangingEvent) Is Nothing) Then
                RaiseEvent products_languagesRowChanging(Me, New products_languagesRowChangeEvent(CType(e.Row,products_languagesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.products_languagesRowDeletedEvent) Is Nothing) Then
                RaiseEvent products_languagesRowDeleted(Me, New products_languagesRowChangeEvent(CType(e.Row,products_languagesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.products_languagesRowDeletingEvent) Is Nothing) Then
                RaiseEvent products_languagesRowDeleting(Me, New products_languagesRowChangeEvent(CType(e.Row,products_languagesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeproducts_languagesRow(ByVal row As products_languagesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "products_languagesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class products_undertitlesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnundertitles_id As Global.System.Data.DataColumn
        
        Private columnlanguage_id As Global.System.Data.DataColumn
        
        Private columnundertitles_description As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "products_undertitles"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property undertitles_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnundertitles_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property language_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlanguage_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property undertitles_descriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnundertitles_description
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As products_undertitlesRow
            Get
                Return CType(Me.Rows(index),products_undertitlesRow)
            End Get
        End Property
        
        Public Event products_undertitlesRowChanging As products_undertitlesRowChangeEventHandler
        
        Public Event products_undertitlesRowChanged As products_undertitlesRowChangeEventHandler
        
        Public Event products_undertitlesRowDeleting As products_undertitlesRowChangeEventHandler
        
        Public Event products_undertitlesRowDeleted As products_undertitlesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addproducts_undertitlesRow(ByVal row As products_undertitlesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addproducts_undertitlesRow(ByVal undertitles_id As Integer, ByVal language_id As Integer, ByVal undertitles_description As String) As products_undertitlesRow
            Dim rowproducts_undertitlesRow As products_undertitlesRow = CType(Me.NewRow,products_undertitlesRow)
            Dim columnValuesArray() As Object = New Object() {undertitles_id, language_id, undertitles_description}
            rowproducts_undertitlesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowproducts_undertitlesRow)
            Return rowproducts_undertitlesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As products_undertitlesDataTable = CType(MyBase.Clone,products_undertitlesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New products_undertitlesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnundertitles_id = MyBase.Columns("undertitles_id")
            Me.columnlanguage_id = MyBase.Columns("language_id")
            Me.columnundertitles_description = MyBase.Columns("undertitles_description")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnundertitles_id = New Global.System.Data.DataColumn("undertitles_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnundertitles_id)
            Me.columnlanguage_id = New Global.System.Data.DataColumn("language_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlanguage_id)
            Me.columnundertitles_description = New Global.System.Data.DataColumn("undertitles_description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnundertitles_description)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newproducts_undertitlesRow() As products_undertitlesRow
            Return CType(Me.NewRow,products_undertitlesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New products_undertitlesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(products_undertitlesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.products_undertitlesRowChangedEvent) Is Nothing) Then
                RaiseEvent products_undertitlesRowChanged(Me, New products_undertitlesRowChangeEvent(CType(e.Row,products_undertitlesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.products_undertitlesRowChangingEvent) Is Nothing) Then
                RaiseEvent products_undertitlesRowChanging(Me, New products_undertitlesRowChangeEvent(CType(e.Row,products_undertitlesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.products_undertitlesRowDeletedEvent) Is Nothing) Then
                RaiseEvent products_undertitlesRowDeleted(Me, New products_undertitlesRowChangeEvent(CType(e.Row,products_undertitlesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.products_undertitlesRowDeletingEvent) Is Nothing) Then
                RaiseEvent products_undertitlesRowDeleting(Me, New products_undertitlesRowChangeEvent(CType(e.Row,products_undertitlesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeproducts_undertitlesRow(ByVal row As products_undertitlesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "products_undertitlesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class products_to_languagesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnproducts_id As Global.System.Data.DataColumn
        
        Private columnproducts_languages_id As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "products_to_languages"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_languages_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_languages_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As products_to_languagesRow
            Get
                Return CType(Me.Rows(index),products_to_languagesRow)
            End Get
        End Property
        
        Public Event products_to_languagesRowChanging As products_to_languagesRowChangeEventHandler
        
        Public Event products_to_languagesRowChanged As products_to_languagesRowChangeEventHandler
        
        Public Event products_to_languagesRowDeleting As products_to_languagesRowChangeEventHandler
        
        Public Event products_to_languagesRowDeleted As products_to_languagesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addproducts_to_languagesRow(ByVal row As products_to_languagesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addproducts_to_languagesRow(ByVal products_id As Integer, ByVal products_languages_id As Integer) As products_to_languagesRow
            Dim rowproducts_to_languagesRow As products_to_languagesRow = CType(Me.NewRow,products_to_languagesRow)
            Dim columnValuesArray() As Object = New Object() {products_id, products_languages_id}
            rowproducts_to_languagesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowproducts_to_languagesRow)
            Return rowproducts_to_languagesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As products_to_languagesDataTable = CType(MyBase.Clone,products_to_languagesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New products_to_languagesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnproducts_id = MyBase.Columns("products_id")
            Me.columnproducts_languages_id = MyBase.Columns("products_languages_id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnproducts_id = New Global.System.Data.DataColumn("products_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_id)
            Me.columnproducts_languages_id = New Global.System.Data.DataColumn("products_languages_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_languages_id)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newproducts_to_languagesRow() As products_to_languagesRow
            Return CType(Me.NewRow,products_to_languagesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New products_to_languagesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(products_to_languagesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.products_to_languagesRowChangedEvent) Is Nothing) Then
                RaiseEvent products_to_languagesRowChanged(Me, New products_to_languagesRowChangeEvent(CType(e.Row,products_to_languagesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.products_to_languagesRowChangingEvent) Is Nothing) Then
                RaiseEvent products_to_languagesRowChanging(Me, New products_to_languagesRowChangeEvent(CType(e.Row,products_to_languagesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.products_to_languagesRowDeletedEvent) Is Nothing) Then
                RaiseEvent products_to_languagesRowDeleted(Me, New products_to_languagesRowChangeEvent(CType(e.Row,products_to_languagesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.products_to_languagesRowDeletingEvent) Is Nothing) Then
                RaiseEvent products_to_languagesRowDeleting(Me, New products_to_languagesRowChangeEvent(CType(e.Row,products_to_languagesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeproducts_to_languagesRow(ByVal row As products_to_languagesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "products_to_languagesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class products_to_undertitlesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnproducts_id As Global.System.Data.DataColumn
        
        Private columnproducts_undertitles_id As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "products_to_undertitles"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_undertitles_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_undertitles_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As products_to_undertitlesRow
            Get
                Return CType(Me.Rows(index),products_to_undertitlesRow)
            End Get
        End Property
        
        Public Event products_to_undertitlesRowChanging As products_to_undertitlesRowChangeEventHandler
        
        Public Event products_to_undertitlesRowChanged As products_to_undertitlesRowChangeEventHandler
        
        Public Event products_to_undertitlesRowDeleting As products_to_undertitlesRowChangeEventHandler
        
        Public Event products_to_undertitlesRowDeleted As products_to_undertitlesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addproducts_to_undertitlesRow(ByVal row As products_to_undertitlesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addproducts_to_undertitlesRow(ByVal products_id As Integer, ByVal products_undertitles_id As Integer) As products_to_undertitlesRow
            Dim rowproducts_to_undertitlesRow As products_to_undertitlesRow = CType(Me.NewRow,products_to_undertitlesRow)
            Dim columnValuesArray() As Object = New Object() {products_id, products_undertitles_id}
            rowproducts_to_undertitlesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowproducts_to_undertitlesRow)
            Return rowproducts_to_undertitlesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As products_to_undertitlesDataTable = CType(MyBase.Clone,products_to_undertitlesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New products_to_undertitlesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnproducts_id = MyBase.Columns("products_id")
            Me.columnproducts_undertitles_id = MyBase.Columns("products_undertitles_id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnproducts_id = New Global.System.Data.DataColumn("products_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_id)
            Me.columnproducts_undertitles_id = New Global.System.Data.DataColumn("products_undertitles_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_undertitles_id)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newproducts_to_undertitlesRow() As products_to_undertitlesRow
            Return CType(Me.NewRow,products_to_undertitlesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New products_to_undertitlesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(products_to_undertitlesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.products_to_undertitlesRowChangedEvent) Is Nothing) Then
                RaiseEvent products_to_undertitlesRowChanged(Me, New products_to_undertitlesRowChangeEvent(CType(e.Row,products_to_undertitlesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.products_to_undertitlesRowChangingEvent) Is Nothing) Then
                RaiseEvent products_to_undertitlesRowChanging(Me, New products_to_undertitlesRowChangeEvent(CType(e.Row,products_to_undertitlesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.products_to_undertitlesRowDeletedEvent) Is Nothing) Then
                RaiseEvent products_to_undertitlesRowDeleted(Me, New products_to_undertitlesRowChangeEvent(CType(e.Row,products_to_undertitlesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.products_to_undertitlesRowDeletingEvent) Is Nothing) Then
                RaiseEvent products_to_undertitlesRowDeleting(Me, New products_to_undertitlesRowChangeEvent(CType(e.Row,products_to_undertitlesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeproducts_to_undertitlesRow(ByVal row As products_to_undertitlesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "products_to_undertitlesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class products_soundtracksDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnsoundtracks_id As Global.System.Data.DataColumn
        
        Private columnlanguage_id As Global.System.Data.DataColumn
        
        Private columnsoundtracks_description As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "products_soundtracks"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property soundtracks_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsoundtracks_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property language_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlanguage_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property soundtracks_descriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsoundtracks_description
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As products_soundtracksRow
            Get
                Return CType(Me.Rows(index),products_soundtracksRow)
            End Get
        End Property
        
        Public Event products_soundtracksRowChanging As products_soundtracksRowChangeEventHandler
        
        Public Event products_soundtracksRowChanged As products_soundtracksRowChangeEventHandler
        
        Public Event products_soundtracksRowDeleting As products_soundtracksRowChangeEventHandler
        
        Public Event products_soundtracksRowDeleted As products_soundtracksRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addproducts_soundtracksRow(ByVal row As products_soundtracksRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addproducts_soundtracksRow(ByVal soundtracks_id As Integer, ByVal language_id As Integer, ByVal soundtracks_description As String) As products_soundtracksRow
            Dim rowproducts_soundtracksRow As products_soundtracksRow = CType(Me.NewRow,products_soundtracksRow)
            Dim columnValuesArray() As Object = New Object() {soundtracks_id, language_id, soundtracks_description}
            rowproducts_soundtracksRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowproducts_soundtracksRow)
            Return rowproducts_soundtracksRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As products_soundtracksDataTable = CType(MyBase.Clone,products_soundtracksDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New products_soundtracksDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsoundtracks_id = MyBase.Columns("soundtracks_id")
            Me.columnlanguage_id = MyBase.Columns("language_id")
            Me.columnsoundtracks_description = MyBase.Columns("soundtracks_description")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsoundtracks_id = New Global.System.Data.DataColumn("soundtracks_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsoundtracks_id)
            Me.columnlanguage_id = New Global.System.Data.DataColumn("language_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlanguage_id)
            Me.columnsoundtracks_description = New Global.System.Data.DataColumn("soundtracks_description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsoundtracks_description)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newproducts_soundtracksRow() As products_soundtracksRow
            Return CType(Me.NewRow,products_soundtracksRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New products_soundtracksRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(products_soundtracksRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.products_soundtracksRowChangedEvent) Is Nothing) Then
                RaiseEvent products_soundtracksRowChanged(Me, New products_soundtracksRowChangeEvent(CType(e.Row,products_soundtracksRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.products_soundtracksRowChangingEvent) Is Nothing) Then
                RaiseEvent products_soundtracksRowChanging(Me, New products_soundtracksRowChangeEvent(CType(e.Row,products_soundtracksRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.products_soundtracksRowDeletedEvent) Is Nothing) Then
                RaiseEvent products_soundtracksRowDeleted(Me, New products_soundtracksRowChangeEvent(CType(e.Row,products_soundtracksRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.products_soundtracksRowDeletingEvent) Is Nothing) Then
                RaiseEvent products_soundtracksRowDeleting(Me, New products_soundtracksRowChangeEvent(CType(e.Row,products_soundtracksRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeproducts_soundtracksRow(ByVal row As products_soundtracksRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "products_soundtracksDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class products_trailersDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columntrailers_id As Global.System.Data.DataColumn
        
        Private columnproducts_id As Global.System.Data.DataColumn
        
        Private columnlanguage_id As Global.System.Data.DataColumn
        
        Private columntrailer As Global.System.Data.DataColumn
        
        Private columnbroadcast As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "products_trailers"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property trailers_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntrailers_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property language_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlanguage_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property trailerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntrailer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property broadcastColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbroadcast
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As products_trailersRow
            Get
                Return CType(Me.Rows(index),products_trailersRow)
            End Get
        End Property
        
        Public Event products_trailersRowChanging As products_trailersRowChangeEventHandler
        
        Public Event products_trailersRowChanged As products_trailersRowChangeEventHandler
        
        Public Event products_trailersRowDeleting As products_trailersRowChangeEventHandler
        
        Public Event products_trailersRowDeleted As products_trailersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addproducts_trailersRow(ByVal row As products_trailersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addproducts_trailersRow(ByVal trailers_id As Integer, ByVal products_id As Integer, ByVal language_id As Integer, ByVal trailer As String, ByVal broadcast As String) As products_trailersRow
            Dim rowproducts_trailersRow As products_trailersRow = CType(Me.NewRow,products_trailersRow)
            Dim columnValuesArray() As Object = New Object() {trailers_id, products_id, language_id, trailer, broadcast}
            rowproducts_trailersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowproducts_trailersRow)
            Return rowproducts_trailersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As products_trailersDataTable = CType(MyBase.Clone,products_trailersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New products_trailersDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columntrailers_id = MyBase.Columns("trailers_id")
            Me.columnproducts_id = MyBase.Columns("products_id")
            Me.columnlanguage_id = MyBase.Columns("language_id")
            Me.columntrailer = MyBase.Columns("trailer")
            Me.columnbroadcast = MyBase.Columns("broadcast")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columntrailers_id = New Global.System.Data.DataColumn("trailers_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntrailers_id)
            Me.columnproducts_id = New Global.System.Data.DataColumn("products_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_id)
            Me.columnlanguage_id = New Global.System.Data.DataColumn("language_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlanguage_id)
            Me.columntrailer = New Global.System.Data.DataColumn("trailer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntrailer)
            Me.columnbroadcast = New Global.System.Data.DataColumn("broadcast", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbroadcast)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newproducts_trailersRow() As products_trailersRow
            Return CType(Me.NewRow,products_trailersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New products_trailersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(products_trailersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.products_trailersRowChangedEvent) Is Nothing) Then
                RaiseEvent products_trailersRowChanged(Me, New products_trailersRowChangeEvent(CType(e.Row,products_trailersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.products_trailersRowChangingEvent) Is Nothing) Then
                RaiseEvent products_trailersRowChanging(Me, New products_trailersRowChangeEvent(CType(e.Row,products_trailersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.products_trailersRowDeletedEvent) Is Nothing) Then
                RaiseEvent products_trailersRowDeleted(Me, New products_trailersRowChangeEvent(CType(e.Row,products_trailersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.products_trailersRowDeletingEvent) Is Nothing) Then
                RaiseEvent products_trailersRowDeleting(Me, New products_trailersRowChangeEvent(CType(e.Row,products_trailersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeproducts_trailersRow(ByVal row As products_trailersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "products_trailersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class products_to_soundtracksDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnproducts_id As Global.System.Data.DataColumn
        
        Private columnproducts_soundtracks_id As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "products_to_soundtracks"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_soundtracks_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_soundtracks_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As products_to_soundtracksRow
            Get
                Return CType(Me.Rows(index),products_to_soundtracksRow)
            End Get
        End Property
        
        Public Event products_to_soundtracksRowChanging As products_to_soundtracksRowChangeEventHandler
        
        Public Event products_to_soundtracksRowChanged As products_to_soundtracksRowChangeEventHandler
        
        Public Event products_to_soundtracksRowDeleting As products_to_soundtracksRowChangeEventHandler
        
        Public Event products_to_soundtracksRowDeleted As products_to_soundtracksRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addproducts_to_soundtracksRow(ByVal row As products_to_soundtracksRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addproducts_to_soundtracksRow(ByVal products_id As Integer, ByVal products_soundtracks_id As Integer) As products_to_soundtracksRow
            Dim rowproducts_to_soundtracksRow As products_to_soundtracksRow = CType(Me.NewRow,products_to_soundtracksRow)
            Dim columnValuesArray() As Object = New Object() {products_id, products_soundtracks_id}
            rowproducts_to_soundtracksRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowproducts_to_soundtracksRow)
            Return rowproducts_to_soundtracksRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As products_to_soundtracksDataTable = CType(MyBase.Clone,products_to_soundtracksDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New products_to_soundtracksDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnproducts_id = MyBase.Columns("products_id")
            Me.columnproducts_soundtracks_id = MyBase.Columns("products_soundtracks_id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnproducts_id = New Global.System.Data.DataColumn("products_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_id)
            Me.columnproducts_soundtracks_id = New Global.System.Data.DataColumn("products_soundtracks_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_soundtracks_id)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newproducts_to_soundtracksRow() As products_to_soundtracksRow
            Return CType(Me.NewRow,products_to_soundtracksRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New products_to_soundtracksRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(products_to_soundtracksRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.products_to_soundtracksRowChangedEvent) Is Nothing) Then
                RaiseEvent products_to_soundtracksRowChanged(Me, New products_to_soundtracksRowChangeEvent(CType(e.Row,products_to_soundtracksRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.products_to_soundtracksRowChangingEvent) Is Nothing) Then
                RaiseEvent products_to_soundtracksRowChanging(Me, New products_to_soundtracksRowChangeEvent(CType(e.Row,products_to_soundtracksRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.products_to_soundtracksRowDeletedEvent) Is Nothing) Then
                RaiseEvent products_to_soundtracksRowDeleted(Me, New products_to_soundtracksRowChangeEvent(CType(e.Row,products_to_soundtracksRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.products_to_soundtracksRowDeletingEvent) Is Nothing) Then
                RaiseEvent products_to_soundtracksRowDeleting(Me, New products_to_soundtracksRowChangeEvent(CType(e.Row,products_to_soundtracksRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeproducts_to_soundtracksRow(ByVal row As products_to_soundtracksRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "products_to_soundtracksDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class products_description_frDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnproducts_id As Global.System.Data.DataColumn
        
        Private columnlanguage_id As Global.System.Data.DataColumn
        
        Private columnproducts_name As Global.System.Data.DataColumn
        
        Private columnproducts_description As Global.System.Data.DataColumn
        
        Private columnproducts_bonus As Global.System.Data.DataColumn
        
        Private columnproducts_url As Global.System.Data.DataColumn
        
        Private columnproducts_awards As Global.System.Data.DataColumn
        
        Private columnproducts_viewed As Global.System.Data.DataColumn
        
        Private columnproducts_image_big As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "products_description_fr"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property language_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlanguage_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_descriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_description
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_bonusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_bonus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_urlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_url
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_awardsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_awards
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_viewedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_viewed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_image_bigColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_image_big
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As products_description_frRow
            Get
                Return CType(Me.Rows(index),products_description_frRow)
            End Get
        End Property
        
        Public Event products_description_frRowChanging As products_description_frRowChangeEventHandler
        
        Public Event products_description_frRowChanged As products_description_frRowChangeEventHandler
        
        Public Event products_description_frRowDeleting As products_description_frRowChangeEventHandler
        
        Public Event products_description_frRowDeleted As products_description_frRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addproducts_description_frRow(ByVal row As products_description_frRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addproducts_description_frRow(ByVal products_id As Integer, ByVal language_id As Integer, ByVal products_name As String, ByVal products_description As String, ByVal products_bonus As String, ByVal products_url As String, ByVal products_awards As String, ByVal products_viewed As Integer, ByVal products_image_big As String) As products_description_frRow
            Dim rowproducts_description_frRow As products_description_frRow = CType(Me.NewRow,products_description_frRow)
            Dim columnValuesArray() As Object = New Object() {products_id, language_id, products_name, products_description, products_bonus, products_url, products_awards, products_viewed, products_image_big}
            rowproducts_description_frRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowproducts_description_frRow)
            Return rowproducts_description_frRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As products_description_frDataTable = CType(MyBase.Clone,products_description_frDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New products_description_frDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnproducts_id = MyBase.Columns("products_id")
            Me.columnlanguage_id = MyBase.Columns("language_id")
            Me.columnproducts_name = MyBase.Columns("products_name")
            Me.columnproducts_description = MyBase.Columns("products_description")
            Me.columnproducts_bonus = MyBase.Columns("products_bonus")
            Me.columnproducts_url = MyBase.Columns("products_url")
            Me.columnproducts_awards = MyBase.Columns("products_awards")
            Me.columnproducts_viewed = MyBase.Columns("products_viewed")
            Me.columnproducts_image_big = MyBase.Columns("products_image_big")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnproducts_id = New Global.System.Data.DataColumn("products_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_id)
            Me.columnlanguage_id = New Global.System.Data.DataColumn("language_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlanguage_id)
            Me.columnproducts_name = New Global.System.Data.DataColumn("products_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_name)
            Me.columnproducts_description = New Global.System.Data.DataColumn("products_description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_description)
            Me.columnproducts_bonus = New Global.System.Data.DataColumn("products_bonus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_bonus)
            Me.columnproducts_url = New Global.System.Data.DataColumn("products_url", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_url)
            Me.columnproducts_awards = New Global.System.Data.DataColumn("products_awards", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_awards)
            Me.columnproducts_viewed = New Global.System.Data.DataColumn("products_viewed", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_viewed)
            Me.columnproducts_image_big = New Global.System.Data.DataColumn("products_image_big", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_image_big)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newproducts_description_frRow() As products_description_frRow
            Return CType(Me.NewRow,products_description_frRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New products_description_frRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(products_description_frRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.products_description_frRowChangedEvent) Is Nothing) Then
                RaiseEvent products_description_frRowChanged(Me, New products_description_frRowChangeEvent(CType(e.Row,products_description_frRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.products_description_frRowChangingEvent) Is Nothing) Then
                RaiseEvent products_description_frRowChanging(Me, New products_description_frRowChangeEvent(CType(e.Row,products_description_frRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.products_description_frRowDeletedEvent) Is Nothing) Then
                RaiseEvent products_description_frRowDeleted(Me, New products_description_frRowChangeEvent(CType(e.Row,products_description_frRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.products_description_frRowDeletingEvent) Is Nothing) Then
                RaiseEvent products_description_frRowDeleting(Me, New products_description_frRowChangeEvent(CType(e.Row,products_description_frRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeproducts_description_frRow(ByVal row As products_description_frRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "products_description_frDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class products_description_nlDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnproducts_id As Global.System.Data.DataColumn
        
        Private columnlanguage_id As Global.System.Data.DataColumn
        
        Private columnproducts_name As Global.System.Data.DataColumn
        
        Private columnproducts_description As Global.System.Data.DataColumn
        
        Private columnproducts_bonus As Global.System.Data.DataColumn
        
        Private columnproducts_url As Global.System.Data.DataColumn
        
        Private columnproducts_awards As Global.System.Data.DataColumn
        
        Private columnproducts_viewed As Global.System.Data.DataColumn
        
        Private columnproducts_image_big As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "products_description_nl"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property language_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlanguage_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_descriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_description
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_bonusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_bonus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_urlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_url
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_awardsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_awards
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_viewedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_viewed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_image_bigColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_image_big
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As products_description_nlRow
            Get
                Return CType(Me.Rows(index),products_description_nlRow)
            End Get
        End Property
        
        Public Event products_description_nlRowChanging As products_description_nlRowChangeEventHandler
        
        Public Event products_description_nlRowChanged As products_description_nlRowChangeEventHandler
        
        Public Event products_description_nlRowDeleting As products_description_nlRowChangeEventHandler
        
        Public Event products_description_nlRowDeleted As products_description_nlRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addproducts_description_nlRow(ByVal row As products_description_nlRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addproducts_description_nlRow(ByVal products_id As Integer, ByVal language_id As Integer, ByVal products_name As String, ByVal products_description As String, ByVal products_bonus As String, ByVal products_url As String, ByVal products_awards As String, ByVal products_viewed As Integer, ByVal products_image_big As String) As products_description_nlRow
            Dim rowproducts_description_nlRow As products_description_nlRow = CType(Me.NewRow,products_description_nlRow)
            Dim columnValuesArray() As Object = New Object() {products_id, language_id, products_name, products_description, products_bonus, products_url, products_awards, products_viewed, products_image_big}
            rowproducts_description_nlRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowproducts_description_nlRow)
            Return rowproducts_description_nlRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As products_description_nlDataTable = CType(MyBase.Clone,products_description_nlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New products_description_nlDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnproducts_id = MyBase.Columns("products_id")
            Me.columnlanguage_id = MyBase.Columns("language_id")
            Me.columnproducts_name = MyBase.Columns("products_name")
            Me.columnproducts_description = MyBase.Columns("products_description")
            Me.columnproducts_bonus = MyBase.Columns("products_bonus")
            Me.columnproducts_url = MyBase.Columns("products_url")
            Me.columnproducts_awards = MyBase.Columns("products_awards")
            Me.columnproducts_viewed = MyBase.Columns("products_viewed")
            Me.columnproducts_image_big = MyBase.Columns("products_image_big")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnproducts_id = New Global.System.Data.DataColumn("products_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_id)
            Me.columnlanguage_id = New Global.System.Data.DataColumn("language_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlanguage_id)
            Me.columnproducts_name = New Global.System.Data.DataColumn("products_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_name)
            Me.columnproducts_description = New Global.System.Data.DataColumn("products_description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_description)
            Me.columnproducts_bonus = New Global.System.Data.DataColumn("products_bonus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_bonus)
            Me.columnproducts_url = New Global.System.Data.DataColumn("products_url", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_url)
            Me.columnproducts_awards = New Global.System.Data.DataColumn("products_awards", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_awards)
            Me.columnproducts_viewed = New Global.System.Data.DataColumn("products_viewed", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_viewed)
            Me.columnproducts_image_big = New Global.System.Data.DataColumn("products_image_big", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_image_big)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newproducts_description_nlRow() As products_description_nlRow
            Return CType(Me.NewRow,products_description_nlRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New products_description_nlRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(products_description_nlRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.products_description_nlRowChangedEvent) Is Nothing) Then
                RaiseEvent products_description_nlRowChanged(Me, New products_description_nlRowChangeEvent(CType(e.Row,products_description_nlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.products_description_nlRowChangingEvent) Is Nothing) Then
                RaiseEvent products_description_nlRowChanging(Me, New products_description_nlRowChangeEvent(CType(e.Row,products_description_nlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.products_description_nlRowDeletedEvent) Is Nothing) Then
                RaiseEvent products_description_nlRowDeleted(Me, New products_description_nlRowChangeEvent(CType(e.Row,products_description_nlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.products_description_nlRowDeletingEvent) Is Nothing) Then
                RaiseEvent products_description_nlRowDeleting(Me, New products_description_nlRowChangeEvent(CType(e.Row,products_description_nlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeproducts_description_nlRow(ByVal row As products_description_nlRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "products_description_nlDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class products_description_enDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnproducts_id As Global.System.Data.DataColumn
        
        Private columnlanguage_id As Global.System.Data.DataColumn
        
        Private columnproducts_name As Global.System.Data.DataColumn
        
        Private columnproducts_description As Global.System.Data.DataColumn
        
        Private columnproducts_bonus As Global.System.Data.DataColumn
        
        Private columnproducts_url As Global.System.Data.DataColumn
        
        Private columnproducts_awards As Global.System.Data.DataColumn
        
        Private columnproducts_viewed As Global.System.Data.DataColumn
        
        Private columnproducts_image_big As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "products_description_en"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property language_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlanguage_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_descriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_description
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_bonusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_bonus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_urlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_url
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_awardsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_awards
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_viewedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_viewed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_image_bigColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_image_big
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As products_description_enRow
            Get
                Return CType(Me.Rows(index),products_description_enRow)
            End Get
        End Property
        
        Public Event products_description_enRowChanging As products_description_enRowChangeEventHandler
        
        Public Event products_description_enRowChanged As products_description_enRowChangeEventHandler
        
        Public Event products_description_enRowDeleting As products_description_enRowChangeEventHandler
        
        Public Event products_description_enRowDeleted As products_description_enRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addproducts_description_enRow(ByVal row As products_description_enRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addproducts_description_enRow(ByVal products_id As Integer, ByVal language_id As Integer, ByVal products_name As String, ByVal products_description As String, ByVal products_bonus As String, ByVal products_url As String, ByVal products_awards As String, ByVal products_viewed As Integer, ByVal products_image_big As String) As products_description_enRow
            Dim rowproducts_description_enRow As products_description_enRow = CType(Me.NewRow,products_description_enRow)
            Dim columnValuesArray() As Object = New Object() {products_id, language_id, products_name, products_description, products_bonus, products_url, products_awards, products_viewed, products_image_big}
            rowproducts_description_enRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowproducts_description_enRow)
            Return rowproducts_description_enRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As products_description_enDataTable = CType(MyBase.Clone,products_description_enDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New products_description_enDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnproducts_id = MyBase.Columns("products_id")
            Me.columnlanguage_id = MyBase.Columns("language_id")
            Me.columnproducts_name = MyBase.Columns("products_name")
            Me.columnproducts_description = MyBase.Columns("products_description")
            Me.columnproducts_bonus = MyBase.Columns("products_bonus")
            Me.columnproducts_url = MyBase.Columns("products_url")
            Me.columnproducts_awards = MyBase.Columns("products_awards")
            Me.columnproducts_viewed = MyBase.Columns("products_viewed")
            Me.columnproducts_image_big = MyBase.Columns("products_image_big")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnproducts_id = New Global.System.Data.DataColumn("products_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_id)
            Me.columnlanguage_id = New Global.System.Data.DataColumn("language_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlanguage_id)
            Me.columnproducts_name = New Global.System.Data.DataColumn("products_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_name)
            Me.columnproducts_description = New Global.System.Data.DataColumn("products_description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_description)
            Me.columnproducts_bonus = New Global.System.Data.DataColumn("products_bonus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_bonus)
            Me.columnproducts_url = New Global.System.Data.DataColumn("products_url", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_url)
            Me.columnproducts_awards = New Global.System.Data.DataColumn("products_awards", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_awards)
            Me.columnproducts_viewed = New Global.System.Data.DataColumn("products_viewed", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_viewed)
            Me.columnproducts_image_big = New Global.System.Data.DataColumn("products_image_big", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_image_big)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newproducts_description_enRow() As products_description_enRow
            Return CType(Me.NewRow,products_description_enRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New products_description_enRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(products_description_enRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.products_description_enRowChangedEvent) Is Nothing) Then
                RaiseEvent products_description_enRowChanged(Me, New products_description_enRowChangeEvent(CType(e.Row,products_description_enRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.products_description_enRowChangingEvent) Is Nothing) Then
                RaiseEvent products_description_enRowChanging(Me, New products_description_enRowChangeEvent(CType(e.Row,products_description_enRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.products_description_enRowDeletedEvent) Is Nothing) Then
                RaiseEvent products_description_enRowDeleted(Me, New products_description_enRowChangeEvent(CType(e.Row,products_description_enRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.products_description_enRowDeletingEvent) Is Nothing) Then
                RaiseEvent products_description_enRowDeleting(Me, New products_description_enRowChangeEvent(CType(e.Row,products_description_enRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeproducts_description_enRow(ByVal row As products_description_enRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "products_description_enDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class categories_fr_view1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncategories_id As Global.System.Data.DataColumn
        
        Private columnparent_id As Global.System.Data.DataColumn
        
        Private columncategories_type As Global.System.Data.DataColumn
        
        Private columncategories_name As Global.System.Data.DataColumn
        
        Private columncategory_selected As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "categories_fr_view1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property categories_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncategories_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property parent_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnparent_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property categories_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncategories_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property categories_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncategories_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property category_selectedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncategory_selected
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As categories_fr_view1Row
            Get
                Return CType(Me.Rows(index),categories_fr_view1Row)
            End Get
        End Property
        
        Public Event categories_fr_view1RowChanging As categories_fr_view1RowChangeEventHandler
        
        Public Event categories_fr_view1RowChanged As categories_fr_view1RowChangeEventHandler
        
        Public Event categories_fr_view1RowDeleting As categories_fr_view1RowChangeEventHandler
        
        Public Event categories_fr_view1RowDeleted As categories_fr_view1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addcategories_fr_view1Row(ByVal row As categories_fr_view1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addcategories_fr_view1Row(ByVal categories_id As Integer, ByVal parent_id As Integer, ByVal categories_type As String, ByVal categories_name As String, ByVal category_selected As Integer) As categories_fr_view1Row
            Dim rowcategories_fr_view1Row As categories_fr_view1Row = CType(Me.NewRow,categories_fr_view1Row)
            Dim columnValuesArray() As Object = New Object() {categories_id, parent_id, categories_type, categories_name, category_selected}
            rowcategories_fr_view1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowcategories_fr_view1Row)
            Return rowcategories_fr_view1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As categories_fr_view1DataTable = CType(MyBase.Clone,categories_fr_view1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New categories_fr_view1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncategories_id = MyBase.Columns("categories_id")
            Me.columnparent_id = MyBase.Columns("parent_id")
            Me.columncategories_type = MyBase.Columns("categories_type")
            Me.columncategories_name = MyBase.Columns("categories_name")
            Me.columncategory_selected = MyBase.Columns("category_selected")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncategories_id = New Global.System.Data.DataColumn("categories_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncategories_id)
            Me.columnparent_id = New Global.System.Data.DataColumn("parent_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnparent_id)
            Me.columncategories_type = New Global.System.Data.DataColumn("categories_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncategories_type)
            Me.columncategories_name = New Global.System.Data.DataColumn("categories_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncategories_name)
            Me.columncategory_selected = New Global.System.Data.DataColumn("category_selected", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncategory_selected)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newcategories_fr_view1Row() As categories_fr_view1Row
            Return CType(Me.NewRow,categories_fr_view1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New categories_fr_view1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(categories_fr_view1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.categories_fr_view1RowChangedEvent) Is Nothing) Then
                RaiseEvent categories_fr_view1RowChanged(Me, New categories_fr_view1RowChangeEvent(CType(e.Row,categories_fr_view1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.categories_fr_view1RowChangingEvent) Is Nothing) Then
                RaiseEvent categories_fr_view1RowChanging(Me, New categories_fr_view1RowChangeEvent(CType(e.Row,categories_fr_view1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.categories_fr_view1RowDeletedEvent) Is Nothing) Then
                RaiseEvent categories_fr_view1RowDeleted(Me, New categories_fr_view1RowChangeEvent(CType(e.Row,categories_fr_view1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.categories_fr_view1RowDeletingEvent) Is Nothing) Then
                RaiseEvent categories_fr_view1RowDeleting(Me, New categories_fr_view1RowChangeEvent(CType(e.Row,categories_fr_view1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removecategories_fr_view1Row(ByVal row As categories_fr_view1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "categories_fr_view1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class trailers_broadcastDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnbroadcast As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "trailers_broadcast"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property broadcastColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbroadcast
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As trailers_broadcastRow
            Get
                Return CType(Me.Rows(index),trailers_broadcastRow)
            End Get
        End Property
        
        Public Event trailers_broadcastRowChanging As trailers_broadcastRowChangeEventHandler
        
        Public Event trailers_broadcastRowChanged As trailers_broadcastRowChangeEventHandler
        
        Public Event trailers_broadcastRowDeleting As trailers_broadcastRowChangeEventHandler
        
        Public Event trailers_broadcastRowDeleted As trailers_broadcastRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addtrailers_broadcastRow(ByVal row As trailers_broadcastRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addtrailers_broadcastRow(ByVal broadcast As String) As trailers_broadcastRow
            Dim rowtrailers_broadcastRow As trailers_broadcastRow = CType(Me.NewRow,trailers_broadcastRow)
            Dim columnValuesArray() As Object = New Object() {broadcast}
            rowtrailers_broadcastRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtrailers_broadcastRow)
            Return rowtrailers_broadcastRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As trailers_broadcastDataTable = CType(MyBase.Clone,trailers_broadcastDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New trailers_broadcastDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnbroadcast = MyBase.Columns("broadcast")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnbroadcast = New Global.System.Data.DataColumn("broadcast", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbroadcast)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newtrailers_broadcastRow() As trailers_broadcastRow
            Return CType(Me.NewRow,trailers_broadcastRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New trailers_broadcastRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(trailers_broadcastRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.trailers_broadcastRowChangedEvent) Is Nothing) Then
                RaiseEvent trailers_broadcastRowChanged(Me, New trailers_broadcastRowChangeEvent(CType(e.Row,trailers_broadcastRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.trailers_broadcastRowChangingEvent) Is Nothing) Then
                RaiseEvent trailers_broadcastRowChanging(Me, New trailers_broadcastRowChangeEvent(CType(e.Row,trailers_broadcastRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.trailers_broadcastRowDeletedEvent) Is Nothing) Then
                RaiseEvent trailers_broadcastRowDeleted(Me, New trailers_broadcastRowChangeEvent(CType(e.Row,trailers_broadcastRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.trailers_broadcastRowDeletingEvent) Is Nothing) Then
                RaiseEvent trailers_broadcastRowDeleting(Me, New trailers_broadcastRowChangeEvent(CType(e.Row,trailers_broadcastRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removetrailers_broadcastRow(ByVal row As trailers_broadcastRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "trailers_broadcastDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class product_typeDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodeValue As Global.System.Data.DataColumn
        
        Private columnCodeDesc As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "product_type"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As product_typeRow
            Get
                Return CType(Me.Rows(index),product_typeRow)
            End Get
        End Property
        
        Public Event product_typeRowChanging As product_typeRowChangeEventHandler
        
        Public Event product_typeRowChanged As product_typeRowChangeEventHandler
        
        Public Event product_typeRowDeleting As product_typeRowChangeEventHandler
        
        Public Event product_typeRowDeleted As product_typeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addproduct_typeRow(ByVal row As product_typeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addproduct_typeRow(ByVal CodeValue As String, ByVal CodeDesc As String) As product_typeRow
            Dim rowproduct_typeRow As product_typeRow = CType(Me.NewRow,product_typeRow)
            Dim columnValuesArray() As Object = New Object() {CodeValue, CodeDesc}
            rowproduct_typeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowproduct_typeRow)
            Return rowproduct_typeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodeValue(ByVal CodeValue As String) As product_typeRow
            Return CType(Me.Rows.Find(New Object() {CodeValue}),product_typeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As product_typeDataTable = CType(MyBase.Clone,product_typeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New product_typeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodeValue = MyBase.Columns("CodeValue")
            Me.columnCodeDesc = MyBase.Columns("CodeDesc")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodeValue = New Global.System.Data.DataColumn("CodeValue", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeValue)
            Me.columnCodeDesc = New Global.System.Data.DataColumn("CodeDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeDesc)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodeValue}, true))
            Me.columnCodeValue.AllowDBNull = false
            Me.columnCodeValue.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newproduct_typeRow() As product_typeRow
            Return CType(Me.NewRow,product_typeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New product_typeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(product_typeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.product_typeRowChangedEvent) Is Nothing) Then
                RaiseEvent product_typeRowChanged(Me, New product_typeRowChangeEvent(CType(e.Row,product_typeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.product_typeRowChangingEvent) Is Nothing) Then
                RaiseEvent product_typeRowChanging(Me, New product_typeRowChangeEvent(CType(e.Row,product_typeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.product_typeRowDeletedEvent) Is Nothing) Then
                RaiseEvent product_typeRowDeleted(Me, New product_typeRowChangeEvent(CType(e.Row,product_typeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.product_typeRowDeletingEvent) Is Nothing) Then
                RaiseEvent product_typeRowDeleting(Me, New product_typeRowChangeEvent(CType(e.Row,product_typeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeproduct_typeRow(ByVal row As product_typeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "product_typeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class _common_production_reviewsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnimdb_id As Global.System.Data.DataColumn
        
        Private columncustomers_id As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "common_production.reviews"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property imdb_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimdb_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As _common_production_reviewsRow
            Get
                Return CType(Me.Rows(index),_common_production_reviewsRow)
            End Get
        End Property
        
        Public Event _common_production_reviewsRowChanging As _common_production_reviewsRowChangeEventHandler
        
        Public Event _common_production_reviewsRowChanged As _common_production_reviewsRowChangeEventHandler
        
        Public Event _common_production_reviewsRowDeleting As _common_production_reviewsRowChangeEventHandler
        
        Public Event _common_production_reviewsRowDeleted As _common_production_reviewsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Add_common_production_reviewsRow(ByVal row As _common_production_reviewsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Add_common_production_reviewsRow(ByVal id As Integer, ByVal imdb_id As Integer, ByVal customers_id As Integer) As _common_production_reviewsRow
            Dim row_common_production_reviewsRow As _common_production_reviewsRow = CType(Me.NewRow,_common_production_reviewsRow)
            Dim columnValuesArray() As Object = New Object() {id, imdb_id, customers_id}
            row_common_production_reviewsRow.ItemArray = columnValuesArray
            Me.Rows.Add(row_common_production_reviewsRow)
            Return row_common_production_reviewsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByid(ByVal id As Integer) As _common_production_reviewsRow
            Return CType(Me.Rows.Find(New Object() {id}),_common_production_reviewsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As _common_production_reviewsDataTable = CType(MyBase.Clone,_common_production_reviewsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New _common_production_reviewsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnimdb_id = MyBase.Columns("imdb_id")
            Me.columncustomers_id = MyBase.Columns("customers_id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnimdb_id = New Global.System.Data.DataColumn("imdb_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimdb_id)
            Me.columncustomers_id = New Global.System.Data.DataColumn("customers_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_id)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
            Me.ExtendedProperties.Add("Generator_TableVarName", "_tablecommon_production_reviews")
            Me.ExtendedProperties.Add("Generator_UserTableName", "common_production.reviews")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function New_common_production_reviewsRow() As _common_production_reviewsRow
            Return CType(Me.NewRow,_common_production_reviewsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New _common_production_reviewsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(_common_production_reviewsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me._common_production_reviewsRowChangedEvent) Is Nothing) Then
                RaiseEvent _common_production_reviewsRowChanged(Me, New _common_production_reviewsRowChangeEvent(CType(e.Row,_common_production_reviewsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me._common_production_reviewsRowChangingEvent) Is Nothing) Then
                RaiseEvent _common_production_reviewsRowChanging(Me, New _common_production_reviewsRowChangeEvent(CType(e.Row,_common_production_reviewsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me._common_production_reviewsRowDeletedEvent) Is Nothing) Then
                RaiseEvent _common_production_reviewsRowDeleted(Me, New _common_production_reviewsRowChangeEvent(CType(e.Row,_common_production_reviewsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me._common_production_reviewsRowDeletingEvent) Is Nothing) Then
                RaiseEvent _common_production_reviewsRowDeleting(Me, New _common_production_reviewsRowChangeEvent(CType(e.Row,_common_production_reviewsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Remove_common_production_reviewsRow(ByVal row As _common_production_reviewsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "_common_production_reviewsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class streaming_productsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnaudio As Global.System.Data.DataColumn
        
        Private columnsubtitle As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "streaming_products"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property audioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaudio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subtitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubtitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As streaming_productsRow
            Get
                Return CType(Me.Rows(index),streaming_productsRow)
            End Get
        End Property
        
        Public Event streaming_productsRowChanging As streaming_productsRowChangeEventHandler
        
        Public Event streaming_productsRowChanged As streaming_productsRowChangeEventHandler
        
        Public Event streaming_productsRowDeleting As streaming_productsRowChangeEventHandler
        
        Public Event streaming_productsRowDeleted As streaming_productsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addstreaming_productsRow(ByVal row As streaming_productsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addstreaming_productsRow(ByVal audio As String, ByVal subtitle As String) As streaming_productsRow
            Dim rowstreaming_productsRow As streaming_productsRow = CType(Me.NewRow,streaming_productsRow)
            Dim columnValuesArray() As Object = New Object() {audio, subtitle}
            rowstreaming_productsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowstreaming_productsRow)
            Return rowstreaming_productsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As streaming_productsDataTable = CType(MyBase.Clone,streaming_productsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New streaming_productsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnaudio = MyBase.Columns("audio")
            Me.columnsubtitle = MyBase.Columns("subtitle")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnaudio = New Global.System.Data.DataColumn("audio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaudio)
            Me.columnsubtitle = New Global.System.Data.DataColumn("subtitle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubtitle)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newstreaming_productsRow() As streaming_productsRow
            Return CType(Me.NewRow,streaming_productsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New streaming_productsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(streaming_productsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.streaming_productsRowChangedEvent) Is Nothing) Then
                RaiseEvent streaming_productsRowChanged(Me, New streaming_productsRowChangeEvent(CType(e.Row,streaming_productsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.streaming_productsRowChangingEvent) Is Nothing) Then
                RaiseEvent streaming_productsRowChanging(Me, New streaming_productsRowChangeEvent(CType(e.Row,streaming_productsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.streaming_productsRowDeletedEvent) Is Nothing) Then
                RaiseEvent streaming_productsRowDeleted(Me, New streaming_productsRowChangeEvent(CType(e.Row,streaming_productsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.streaming_productsRowDeletingEvent) Is Nothing) Then
                RaiseEvent streaming_productsRowDeleting(Me, New streaming_productsRowChangeEvent(CType(e.Row,streaming_productsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removestreaming_productsRow(ByVal row As streaming_productsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "streaming_productsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class streaming_trailersDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnfilename As Global.System.Data.DataColumn
        
        Private columnaudio As Global.System.Data.DataColumn
        
        Private columnsubtitle As Global.System.Data.DataColumn
        
        Private columnstatus As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "streaming_trailers"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property filenameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfilename
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property audioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaudio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subtitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubtitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property statusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As streaming_trailersRow
            Get
                Return CType(Me.Rows(index),streaming_trailersRow)
            End Get
        End Property
        
        Public Event streaming_trailersRowChanging As streaming_trailersRowChangeEventHandler
        
        Public Event streaming_trailersRowChanged As streaming_trailersRowChangeEventHandler
        
        Public Event streaming_trailersRowDeleting As streaming_trailersRowChangeEventHandler
        
        Public Event streaming_trailersRowDeleted As streaming_trailersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addstreaming_trailersRow(ByVal row As streaming_trailersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addstreaming_trailersRow(ByVal id As Short, ByVal filename As String, ByVal audio As String, ByVal subtitle As String, ByVal status As String) As streaming_trailersRow
            Dim rowstreaming_trailersRow As streaming_trailersRow = CType(Me.NewRow,streaming_trailersRow)
            Dim columnValuesArray() As Object = New Object() {id, filename, audio, subtitle, status}
            rowstreaming_trailersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowstreaming_trailersRow)
            Return rowstreaming_trailersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As streaming_trailersDataTable = CType(MyBase.Clone,streaming_trailersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New streaming_trailersDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnfilename = MyBase.Columns("filename")
            Me.columnaudio = MyBase.Columns("audio")
            Me.columnsubtitle = MyBase.Columns("subtitle")
            Me.columnstatus = MyBase.Columns("status")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnfilename = New Global.System.Data.DataColumn("filename", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfilename)
            Me.columnaudio = New Global.System.Data.DataColumn("audio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaudio)
            Me.columnsubtitle = New Global.System.Data.DataColumn("subtitle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubtitle)
            Me.columnstatus = New Global.System.Data.DataColumn("status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatus)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newstreaming_trailersRow() As streaming_trailersRow
            Return CType(Me.NewRow,streaming_trailersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New streaming_trailersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(streaming_trailersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.streaming_trailersRowChangedEvent) Is Nothing) Then
                RaiseEvent streaming_trailersRowChanged(Me, New streaming_trailersRowChangeEvent(CType(e.Row,streaming_trailersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.streaming_trailersRowChangingEvent) Is Nothing) Then
                RaiseEvent streaming_trailersRowChanging(Me, New streaming_trailersRowChangeEvent(CType(e.Row,streaming_trailersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.streaming_trailersRowDeletedEvent) Is Nothing) Then
                RaiseEvent streaming_trailersRowDeleted(Me, New streaming_trailersRowChangeEvent(CType(e.Row,streaming_trailersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.streaming_trailersRowDeletingEvent) Is Nothing) Then
                RaiseEvent streaming_trailersRowDeleting(Me, New streaming_trailersRowChangeEvent(CType(e.Row,streaming_trailersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removestreaming_trailersRow(ByVal row As streaming_trailersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "streaming_trailersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class reviewsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnreviews_id As Global.System.Data.DataColumn
        
        Private columnproducts_id As Global.System.Data.DataColumn
        
        Private columncustomers_id As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "reviews"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property reviews_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnreviews_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property products_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproducts_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customers_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomers_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As reviewsRow
            Get
                Return CType(Me.Rows(index),reviewsRow)
            End Get
        End Property
        
        Public Event reviewsRowChanging As reviewsRowChangeEventHandler
        
        Public Event reviewsRowChanged As reviewsRowChangeEventHandler
        
        Public Event reviewsRowDeleting As reviewsRowChangeEventHandler
        
        Public Event reviewsRowDeleted As reviewsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddreviewsRow(ByVal row As reviewsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddreviewsRow(ByVal reviews_id As Integer, ByVal products_id As Integer, ByVal customers_id As Integer) As reviewsRow
            Dim rowreviewsRow As reviewsRow = CType(Me.NewRow,reviewsRow)
            Dim columnValuesArray() As Object = New Object() {reviews_id, products_id, customers_id}
            rowreviewsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowreviewsRow)
            Return rowreviewsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByreviews_id(ByVal reviews_id As Integer) As reviewsRow
            Return CType(Me.Rows.Find(New Object() {reviews_id}),reviewsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As reviewsDataTable = CType(MyBase.Clone,reviewsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New reviewsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnreviews_id = MyBase.Columns("reviews_id")
            Me.columnproducts_id = MyBase.Columns("products_id")
            Me.columncustomers_id = MyBase.Columns("customers_id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnreviews_id = New Global.System.Data.DataColumn("reviews_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnreviews_id)
            Me.columnproducts_id = New Global.System.Data.DataColumn("products_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproducts_id)
            Me.columncustomers_id = New Global.System.Data.DataColumn("customers_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomers_id)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnreviews_id}, true))
            Me.columnreviews_id.AllowDBNull = false
            Me.columnreviews_id.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewreviewsRow() As reviewsRow
            Return CType(Me.NewRow,reviewsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New reviewsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(reviewsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.reviewsRowChangedEvent) Is Nothing) Then
                RaiseEvent reviewsRowChanged(Me, New reviewsRowChangeEvent(CType(e.Row,reviewsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.reviewsRowChangingEvent) Is Nothing) Then
                RaiseEvent reviewsRowChanging(Me, New reviewsRowChangeEvent(CType(e.Row,reviewsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.reviewsRowDeletedEvent) Is Nothing) Then
                RaiseEvent reviewsRowDeleted(Me, New reviewsRowChangeEvent(CType(e.Row,reviewsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.reviewsRowDeletingEvent) Is Nothing) Then
                RaiseEvent reviewsRowDeleting(Me, New reviewsRowChangeEvent(CType(e.Row,reviewsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovereviewsRow(ByVal row As reviewsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProducts = New dsProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "reviewsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class productsRow
        Inherits Global.System.Data.DataRow
        
        Private tableproducts As productsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproducts = CType(Me.Table,productsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_id() As Integer
            Get
                Return CType(Me(Me.tableproducts.products_idColumn),Integer)
            End Get
            Set
                Me(Me.tableproducts.products_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_model() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts.products_modelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_model' in table 'products' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts.products_modelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property imdb_id() As Integer
            Get
                Return CType(Me(Me.tableproducts.imdb_idColumn),Integer)
            End Get
            Set
                Me(Me.tableproducts.imdb_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_title() As String
            Get
                Return CType(Me(Me.tableproducts.products_titleColumn),String)
            End Get
            Set
                Me(Me.tableproducts.products_titleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_price() As Decimal
            Get
                Return CType(Me(Me.tableproducts.products_priceColumn),Decimal)
            End Get
            Set
                Me(Me.tableproducts.products_priceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_date_added() As Date
            Get
                Try 
                    Return CType(Me(Me.tableproducts.products_date_addedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_date_added' in table 'products' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts.products_date_addedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_last_modified() As Date
            Get
                Try 
                    Return CType(Me(Me.tableproducts.products_last_modifiedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_last_modified' in table 'products' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts.products_last_modifiedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_date_available() As Date
            Get
                Try 
                    Return CType(Me(Me.tableproducts.products_date_availableColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_date_available' in table 'products' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts.products_date_availableColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_status() As Integer
            Get
                Return CType(Me(Me.tableproducts.products_statusColumn),Integer)
            End Get
            Set
                Me(Me.tableproducts.products_statusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_public() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts.products_publicColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_public' in table 'products' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts.products_publicColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_runtime() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts.products_runtimeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_runtime' in table 'products' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts.products_runtimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_year() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts.products_yearColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_year' in table 'products' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts.products_yearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_countries_id() As Integer
            Get
                Return CType(Me(Me.tableproducts.products_countries_idColumn),Integer)
            End Get
            Set
                Me(Me.tableproducts.products_countries_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_picture_format() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts.products_picture_formatColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_picture_format' in table 'products' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts.products_picture_formatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_rating() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts.products_ratingColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_rating' in table 'products' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts.products_ratingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_directors_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts.products_directors_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_directors_id' in table 'products' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts.products_directors_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_studio() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts.products_studioColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_studio' in table 'products' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts.products_studioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property in_cinema_now() As Integer
            Get
                Return CType(Me(Me.tableproducts.in_cinema_nowColumn),Integer)
            End Get
            Set
                Me(Me.tableproducts.in_cinema_nowColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_series_id() As Integer
            Get
                Return CType(Me(Me.tableproducts.products_series_idColumn),Integer)
            End Get
            Set
                Me(Me.tableproducts.products_series_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_series_number() As Integer
            Get
                Return CType(Me(Me.tableproducts.products_series_numberColumn),Integer)
            End Get
            Set
                Me(Me.tableproducts.products_series_numberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_type() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts.products_typeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_type' in table 'products' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts.products_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_media() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts.products_mediaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_media' in table 'products' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts.products_mediaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property imdb_id_serie() As Long
            Get
                Try 
                    Return CType(Me(Me.tableproducts.imdb_id_serieColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'imdb_id_serie' in table 'products' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts.imdb_id_serieColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property vod_next() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts.vod_nextColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'vod_next' in table 'products' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts.vod_nextColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property vod_next_lux() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts.vod_next_luxColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'vod_next_lux' in table 'products' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts.vod_next_luxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property vod_next_nl() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts.vod_next_nlColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'vod_next_nl' in table 'products' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts.vod_next_nlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property package_id() As Short
            Get
                Try 
                    Return CType(Me(Me.tableproducts.package_idColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'package_id' in table 'products' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts.package_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_modelNull() As Boolean
            Return Me.IsNull(Me.tableproducts.products_modelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_modelNull()
            Me(Me.tableproducts.products_modelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_date_addedNull() As Boolean
            Return Me.IsNull(Me.tableproducts.products_date_addedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_date_addedNull()
            Me(Me.tableproducts.products_date_addedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_last_modifiedNull() As Boolean
            Return Me.IsNull(Me.tableproducts.products_last_modifiedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_last_modifiedNull()
            Me(Me.tableproducts.products_last_modifiedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_date_availableNull() As Boolean
            Return Me.IsNull(Me.tableproducts.products_date_availableColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_date_availableNull()
            Me(Me.tableproducts.products_date_availableColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_publicNull() As Boolean
            Return Me.IsNull(Me.tableproducts.products_publicColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_publicNull()
            Me(Me.tableproducts.products_publicColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_runtimeNull() As Boolean
            Return Me.IsNull(Me.tableproducts.products_runtimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_runtimeNull()
            Me(Me.tableproducts.products_runtimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_yearNull() As Boolean
            Return Me.IsNull(Me.tableproducts.products_yearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_yearNull()
            Me(Me.tableproducts.products_yearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_picture_formatNull() As Boolean
            Return Me.IsNull(Me.tableproducts.products_picture_formatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_picture_formatNull()
            Me(Me.tableproducts.products_picture_formatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_ratingNull() As Boolean
            Return Me.IsNull(Me.tableproducts.products_ratingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_ratingNull()
            Me(Me.tableproducts.products_ratingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_directors_idNull() As Boolean
            Return Me.IsNull(Me.tableproducts.products_directors_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_directors_idNull()
            Me(Me.tableproducts.products_directors_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_studioNull() As Boolean
            Return Me.IsNull(Me.tableproducts.products_studioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_studioNull()
            Me(Me.tableproducts.products_studioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_typeNull() As Boolean
            Return Me.IsNull(Me.tableproducts.products_typeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_typeNull()
            Me(Me.tableproducts.products_typeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_mediaNull() As Boolean
            Return Me.IsNull(Me.tableproducts.products_mediaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_mediaNull()
            Me(Me.tableproducts.products_mediaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isimdb_id_serieNull() As Boolean
            Return Me.IsNull(Me.tableproducts.imdb_id_serieColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setimdb_id_serieNull()
            Me(Me.tableproducts.imdb_id_serieColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isvod_nextNull() As Boolean
            Return Me.IsNull(Me.tableproducts.vod_nextColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setvod_nextNull()
            Me(Me.tableproducts.vod_nextColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isvod_next_luxNull() As Boolean
            Return Me.IsNull(Me.tableproducts.vod_next_luxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setvod_next_luxNull()
            Me(Me.tableproducts.vod_next_luxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isvod_next_nlNull() As Boolean
            Return Me.IsNull(Me.tableproducts.vod_next_nlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setvod_next_nlNull()
            Me(Me.tableproducts.vod_next_nlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ispackage_idNull() As Boolean
            Return Me.IsNull(Me.tableproducts.package_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setpackage_idNull()
            Me(Me.tableproducts.package_idColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class products_comboRow
        Inherits Global.System.Data.DataRow
        
        Private tableproducts_combo As products_comboDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproducts_combo = CType(Me.Table,products_comboDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_id() As Integer
            Get
                Return CType(Me(Me.tableproducts_combo.products_idColumn),Integer)
            End Get
            Set
                Me(Me.tableproducts_combo.products_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_quantity() As Integer
            Get
                Return CType(Me(Me.tableproducts_combo.products_quantityColumn),Integer)
            End Get
            Set
                Me(Me.tableproducts_combo.products_quantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_model() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_combo.products_modelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_model' in table 'products_combo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_combo.products_modelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_title() As String
            Get
                Return CType(Me(Me.tableproducts_combo.products_titleColumn),String)
            End Get
            Set
                Me(Me.tableproducts_combo.products_titleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_modelNull() As Boolean
            Return Me.IsNull(Me.tableproducts_combo.products_modelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_modelNull()
            Me(Me.tableproducts_combo.products_modelColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class products_descriptionRow
        Inherits Global.System.Data.DataRow
        
        Private tableproducts_description As products_descriptionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproducts_description = CType(Me.Table,products_descriptionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_id() As Integer
            Get
                Return CType(Me(Me.tableproducts_description.products_idColumn),Integer)
            End Get
            Set
                Me(Me.tableproducts_description.products_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_dvd_status() As Integer
            Get
                Return CType(Me(Me.tableproducts_description.products_dvd_statusColumn),Integer)
            End Get
            Set
                Me(Me.tableproducts_description.products_dvd_statusColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class products_labelsRow
        Inherits Global.System.Data.DataRow
        
        Private tableproducts_labels As products_labelsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproducts_labels = CType(Me.Table,products_labelsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_labels.products_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_id' in table 'products_labels' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_labels.products_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lang() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_labels.langColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lang' in table 'products_labels' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_labels.langColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDStr() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_labels.IDStrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDStr' in table 'products_labels' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_labels.IDStrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_idNull() As Boolean
            Return Me.IsNull(Me.tableproducts_labels.products_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_idNull()
            Me(Me.tableproducts_labels.products_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslangNull() As Boolean
            Return Me.IsNull(Me.tableproducts_labels.langColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlangNull()
            Me(Me.tableproducts_labels.langColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDStrNull() As Boolean
            Return Me.IsNull(Me.tableproducts_labels.IDStrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDStrNull()
            Me(Me.tableproducts_labels.IDStrColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class products_description1Row
        Inherits Global.System.Data.DataRow
        
        Private tableproducts_description1 As products_description1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproducts_description1 = CType(Me.Table,products_description1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description1.products_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_id' in table 'products_description1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description1.products_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property language_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description1.language_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'language_id' in table 'products_description1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description1.language_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_name() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description1.products_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_name' in table 'products_description1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description1.products_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_model() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description1.products_modelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_model' in table 'products_description1' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description1.products_modelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_idNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description1.products_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_idNull()
            Me(Me.tableproducts_description1.products_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islanguage_idNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description1.language_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlanguage_idNull()
            Me(Me.tableproducts_description1.language_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_nameNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description1.products_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_nameNull()
            Me(Me.tableproducts_description1.products_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_modelNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description1.products_modelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_modelNull()
            Me(Me.tableproducts_description1.products_modelColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class products_view1Row
        Inherits Global.System.Data.DataRow
        
        Private tableproducts_view1 As products_view1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproducts_view1 = CType(Me.Table,products_view1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_id() As Integer
            Get
                Return CType(Me(Me.tableproducts_view1.products_idColumn),Integer)
            End Get
            Set
                Me(Me.tableproducts_view1.products_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_quantity() As Integer
            Get
                Return CType(Me(Me.tableproducts_view1.products_quantityColumn),Integer)
            End Get
            Set
                Me(Me.tableproducts_view1.products_quantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_model() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_view1.products_modelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_model' in table 'products_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_view1.products_modelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property imdb_id() As Integer
            Get
                Return CType(Me(Me.tableproducts_view1.imdb_idColumn),Integer)
            End Get
            Set
                Me(Me.tableproducts_view1.imdb_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_title() As String
            Get
                Return CType(Me(Me.tableproducts_view1.products_titleColumn),String)
            End Get
            Set
                Me(Me.tableproducts_view1.products_titleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_price() As Decimal
            Get
                Return CType(Me(Me.tableproducts_view1.products_priceColumn),Decimal)
            End Get
            Set
                Me(Me.tableproducts_view1.products_priceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_type() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_view1.products_typeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_type' in table 'products_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_view1.products_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FR_Title() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_view1.FR_TitleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FR_Title' in table 'products_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_view1.FR_TitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NL_Title() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_view1.NL_TitleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NL_Title' in table 'products_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_view1.NL_TitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EN_Title() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_view1.EN_TitleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EN_Title' in table 'products_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_view1.EN_TitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Actor1() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_view1.Actor1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Actor1' in table 'products_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_view1.Actor1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Actor2() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_view1.Actor2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Actor2' in table 'products_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_view1.Actor2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Actor3() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_view1.Actor3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Actor3' in table 'products_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_view1.Actor3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Category1() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_view1.Category1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Category1' in table 'products_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_view1.Category1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Category2() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_view1.Category2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Category2' in table 'products_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_view1.Category2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Category3() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_view1.Category3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Category3' in table 'products_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_view1.Category3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubTitles() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_view1.SubTitlesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubTitles' in table 'products_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_view1.SubTitlesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Languages() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_view1.LanguagesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Languages' in table 'products_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_view1.LanguagesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property director() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_view1.directorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'director' in table 'products_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_view1.directorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Actors() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_view1.ActorsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Actors' in table 'products_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_view1.ActorsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Categories() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_view1.CategoriesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Categories' in table 'products_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_view1.CategoriesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_date_added() As Date
            Get
                Try 
                    Return CType(Me(Me.tableproducts_view1.products_date_addedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_date_added' in table 'products_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_view1.products_date_addedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_date_available() As Date
            Get
                Try 
                    Return CType(Me(Me.tableproducts_view1.products_date_availableColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_date_available' in table 'products_view1' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_view1.products_date_availableColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_status() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_view1.products_statusColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_status' in table 'products_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_view1.products_statusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_year() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_view1.products_yearColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_year' in table 'products_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_view1.products_yearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_sale_price() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableproducts_view1.products_sale_priceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_sale_price' in table 'products_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_view1.products_sale_priceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_sale_date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableproducts_view1.products_sale_dateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_sale_date' in table 'products_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_view1.products_sale_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property quantity_to_sale() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_view1.quantity_to_saleColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'quantity_to_sale' in table 'products_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_view1.quantity_to_saleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_modelNull() As Boolean
            Return Me.IsNull(Me.tableproducts_view1.products_modelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_modelNull()
            Me(Me.tableproducts_view1.products_modelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_typeNull() As Boolean
            Return Me.IsNull(Me.tableproducts_view1.products_typeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_typeNull()
            Me(Me.tableproducts_view1.products_typeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFR_TitleNull() As Boolean
            Return Me.IsNull(Me.tableproducts_view1.FR_TitleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFR_TitleNull()
            Me(Me.tableproducts_view1.FR_TitleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNL_TitleNull() As Boolean
            Return Me.IsNull(Me.tableproducts_view1.NL_TitleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNL_TitleNull()
            Me(Me.tableproducts_view1.NL_TitleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEN_TitleNull() As Boolean
            Return Me.IsNull(Me.tableproducts_view1.EN_TitleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEN_TitleNull()
            Me(Me.tableproducts_view1.EN_TitleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsActor1Null() As Boolean
            Return Me.IsNull(Me.tableproducts_view1.Actor1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetActor1Null()
            Me(Me.tableproducts_view1.Actor1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsActor2Null() As Boolean
            Return Me.IsNull(Me.tableproducts_view1.Actor2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetActor2Null()
            Me(Me.tableproducts_view1.Actor2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsActor3Null() As Boolean
            Return Me.IsNull(Me.tableproducts_view1.Actor3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetActor3Null()
            Me(Me.tableproducts_view1.Actor3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCategory1Null() As Boolean
            Return Me.IsNull(Me.tableproducts_view1.Category1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCategory1Null()
            Me(Me.tableproducts_view1.Category1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCategory2Null() As Boolean
            Return Me.IsNull(Me.tableproducts_view1.Category2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCategory2Null()
            Me(Me.tableproducts_view1.Category2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCategory3Null() As Boolean
            Return Me.IsNull(Me.tableproducts_view1.Category3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCategory3Null()
            Me(Me.tableproducts_view1.Category3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubTitlesNull() As Boolean
            Return Me.IsNull(Me.tableproducts_view1.SubTitlesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubTitlesNull()
            Me(Me.tableproducts_view1.SubTitlesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLanguagesNull() As Boolean
            Return Me.IsNull(Me.tableproducts_view1.LanguagesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLanguagesNull()
            Me(Me.tableproducts_view1.LanguagesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdirectorNull() As Boolean
            Return Me.IsNull(Me.tableproducts_view1.directorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdirectorNull()
            Me(Me.tableproducts_view1.directorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsActorsNull() As Boolean
            Return Me.IsNull(Me.tableproducts_view1.ActorsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetActorsNull()
            Me(Me.tableproducts_view1.ActorsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCategoriesNull() As Boolean
            Return Me.IsNull(Me.tableproducts_view1.CategoriesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCategoriesNull()
            Me(Me.tableproducts_view1.CategoriesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_date_addedNull() As Boolean
            Return Me.IsNull(Me.tableproducts_view1.products_date_addedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_date_addedNull()
            Me(Me.tableproducts_view1.products_date_addedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_date_availableNull() As Boolean
            Return Me.IsNull(Me.tableproducts_view1.products_date_availableColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_date_availableNull()
            Me(Me.tableproducts_view1.products_date_availableColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_statusNull() As Boolean
            Return Me.IsNull(Me.tableproducts_view1.products_statusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_statusNull()
            Me(Me.tableproducts_view1.products_statusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_yearNull() As Boolean
            Return Me.IsNull(Me.tableproducts_view1.products_yearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_yearNull()
            Me(Me.tableproducts_view1.products_yearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_sale_priceNull() As Boolean
            Return Me.IsNull(Me.tableproducts_view1.products_sale_priceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_sale_priceNull()
            Me(Me.tableproducts_view1.products_sale_priceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_sale_dateNull() As Boolean
            Return Me.IsNull(Me.tableproducts_view1.products_sale_dateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_sale_dateNull()
            Me(Me.tableproducts_view1.products_sale_dateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isquantity_to_saleNull() As Boolean
            Return Me.IsNull(Me.tableproducts_view1.quantity_to_saleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setquantity_to_saleNull()
            Me(Me.tableproducts_view1.quantity_to_saleColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class actorsRow
        Inherits Global.System.Data.DataRow
        
        Private tableactors As actorsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableactors = CType(Me.Table,actorsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property actors_id() As Integer
            Get
                Return CType(Me(Me.tableactors.actors_idColumn),Integer)
            End Get
            Set
                Me(Me.tableactors.actors_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property actors_name() As String
            Get
                Return CType(Me(Me.tableactors.actors_nameColumn),String)
            End Get
            Set
                Me(Me.tableactors.actors_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property actors_dateofbirth() As String
            Get
                Try 
                    Return CType(Me(Me.tableactors.actors_dateofbirthColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'actors_dateofbirth' in table 'actors' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableactors.actors_dateofbirthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property birth_place() As String
            Get
                Try 
                    Return CType(Me(Me.tableactors.birth_placeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'birth_place' in table 'actors' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableactors.birth_placeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property death_at() As Date
            Get
                Try 
                    Return CType(Me(Me.tableactors.death_atColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'death_at' in table 'actors' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableactors.death_atColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property death_place() As String
            Get
                Try 
                    Return CType(Me(Me.tableactors.death_placeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'death_place' in table 'actors' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableactors.death_placeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property actors_type() As String
            Get
                Try 
                    Return CType(Me(Me.tableactors.actors_typeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'actors_type' in table 'actors' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableactors.actors_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property slug() As String
            Get
                Try 
                    Return CType(Me(Me.tableactors.slugColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'slug' in table 'actors' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableactors.slugColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property image_active() As Short
            Get
                Try 
                    Return CType(Me(Me.tableactors.image_activeColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'image_active' in table 'actors' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableactors.image_activeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property focus() As Short
            Get
                Try 
                    Return CType(Me(Me.tableactors.focusColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'focus' in table 'actors' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableactors.focusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sexuality() As String
            Get
                Try 
                    Return CType(Me(Me.tableactors.sexualityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sexuality' in table 'actors' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableactors.sexualityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isactors_dateofbirthNull() As Boolean
            Return Me.IsNull(Me.tableactors.actors_dateofbirthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setactors_dateofbirthNull()
            Me(Me.tableactors.actors_dateofbirthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isbirth_placeNull() As Boolean
            Return Me.IsNull(Me.tableactors.birth_placeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setbirth_placeNull()
            Me(Me.tableactors.birth_placeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdeath_atNull() As Boolean
            Return Me.IsNull(Me.tableactors.death_atColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdeath_atNull()
            Me(Me.tableactors.death_atColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdeath_placeNull() As Boolean
            Return Me.IsNull(Me.tableactors.death_placeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdeath_placeNull()
            Me(Me.tableactors.death_placeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isactors_typeNull() As Boolean
            Return Me.IsNull(Me.tableactors.actors_typeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setactors_typeNull()
            Me(Me.tableactors.actors_typeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsslugNull() As Boolean
            Return Me.IsNull(Me.tableactors.slugColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetslugNull()
            Me(Me.tableactors.slugColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isimage_activeNull() As Boolean
            Return Me.IsNull(Me.tableactors.image_activeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setimage_activeNull()
            Me(Me.tableactors.image_activeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfocusNull() As Boolean
            Return Me.IsNull(Me.tableactors.focusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfocusNull()
            Me(Me.tableactors.focusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssexualityNull() As Boolean
            Return Me.IsNull(Me.tableactors.sexualityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsexualityNull()
            Me(Me.tableactors.sexualityColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class directorsRow
        Inherits Global.System.Data.DataRow
        
        Private tabledirectors As directorsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledirectors = CType(Me.Table,directorsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property directors_id() As Integer
            Get
                Return CType(Me(Me.tabledirectors.directors_idColumn),Integer)
            End Get
            Set
                Me(Me.tabledirectors.directors_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property directors_name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledirectors.directors_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'directors_name' in table 'directors' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledirectors.directors_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property image_active() As String
            Get
                Try 
                    Return CType(Me(Me.tabledirectors.image_activeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'image_active' in table 'directors' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledirectors.image_activeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property directors_dateofbirth() As String
            Get
                Try 
                    Return CType(Me(Me.tabledirectors.directors_dateofbirthColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'directors_dateofbirth' in table 'directors' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledirectors.directors_dateofbirthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property birth_place() As String
            Get
                Try 
                    Return CType(Me(Me.tabledirectors.birth_placeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'birth_place' in table 'directors' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledirectors.birth_placeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property death_at() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledirectors.death_atColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'death_at' in table 'directors' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledirectors.death_atColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property death_place() As String
            Get
                Try 
                    Return CType(Me(Me.tabledirectors.death_placeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'death_place' in table 'directors' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledirectors.death_placeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property slug() As String
            Get
                Try 
                    Return CType(Me(Me.tabledirectors.slugColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'slug' in table 'directors' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledirectors.slugColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdirectors_nameNull() As Boolean
            Return Me.IsNull(Me.tabledirectors.directors_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdirectors_nameNull()
            Me(Me.tabledirectors.directors_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isimage_activeNull() As Boolean
            Return Me.IsNull(Me.tabledirectors.image_activeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setimage_activeNull()
            Me(Me.tabledirectors.image_activeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdirectors_dateofbirthNull() As Boolean
            Return Me.IsNull(Me.tabledirectors.directors_dateofbirthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdirectors_dateofbirthNull()
            Me(Me.tabledirectors.directors_dateofbirthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isbirth_placeNull() As Boolean
            Return Me.IsNull(Me.tabledirectors.birth_placeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setbirth_placeNull()
            Me(Me.tabledirectors.birth_placeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdeath_atNull() As Boolean
            Return Me.IsNull(Me.tabledirectors.death_atColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdeath_atNull()
            Me(Me.tabledirectors.death_atColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdeath_placeNull() As Boolean
            Return Me.IsNull(Me.tabledirectors.death_placeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdeath_placeNull()
            Me(Me.tabledirectors.death_placeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsslugNull() As Boolean
            Return Me.IsNull(Me.tabledirectors.slugColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetslugNull()
            Me(Me.tabledirectors.slugColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class categoriesRow
        Inherits Global.System.Data.DataRow
        
        Private tablecategories As categoriesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecategories = CType(Me.Table,categoriesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property categories_id() As Integer
            Get
                Return CType(Me(Me.tablecategories.categories_idColumn),Integer)
            End Get
            Set
                Me(Me.tablecategories.categories_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property categories_image() As String
            Get
                Try 
                    Return CType(Me(Me.tablecategories.categories_imageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'categories_image' in table 'categories' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecategories.categories_imageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property parent_id() As Integer
            Get
                Return CType(Me(Me.tablecategories.parent_idColumn),Integer)
            End Get
            Set
                Me(Me.tablecategories.parent_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sort_order() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecategories.sort_orderColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sort_order' in table 'categories' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecategories.sort_orderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property date_added() As Date
            Get
                Try 
                    Return CType(Me(Me.tablecategories.date_addedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'date_added' in table 'categories' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecategories.date_addedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property last_modified() As Date
            Get
                Try 
                    Return CType(Me(Me.tablecategories.last_modifiedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'last_modified' in table 'categories' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecategories.last_modifiedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscategories_imageNull() As Boolean
            Return Me.IsNull(Me.tablecategories.categories_imageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcategories_imageNull()
            Me(Me.tablecategories.categories_imageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issort_orderNull() As Boolean
            Return Me.IsNull(Me.tablecategories.sort_orderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsort_orderNull()
            Me(Me.tablecategories.sort_orderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdate_addedNull() As Boolean
            Return Me.IsNull(Me.tablecategories.date_addedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdate_addedNull()
            Me(Me.tablecategories.date_addedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islast_modifiedNull() As Boolean
            Return Me.IsNull(Me.tablecategories.last_modifiedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlast_modifiedNull()
            Me(Me.tablecategories.last_modifiedColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class categories_descriptionRow
        Inherits Global.System.Data.DataRow
        
        Private tablecategories_description As categories_descriptionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecategories_description = CType(Me.Table,categories_descriptionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property categories_id() As Integer
            Get
                Return CType(Me(Me.tablecategories_description.categories_idColumn),Integer)
            End Get
            Set
                Me(Me.tablecategories_description.categories_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property language_id() As Integer
            Get
                Return CType(Me(Me.tablecategories_description.language_idColumn),Integer)
            End Get
            Set
                Me(Me.tablecategories_description.language_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property categories_name() As String
            Get
                Return CType(Me(Me.tablecategories_description.categories_nameColumn),String)
            End Get
            Set
                Me(Me.tablecategories_description.categories_nameColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class products_to_actorsRow
        Inherits Global.System.Data.DataRow
        
        Private tableproducts_to_actors As products_to_actorsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproducts_to_actors = CType(Me.Table,products_to_actorsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_id() As Integer
            Get
                Return CType(Me(Me.tableproducts_to_actors.products_idColumn),Integer)
            End Get
            Set
                Me(Me.tableproducts_to_actors.products_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property actors_id() As Integer
            Get
                Return CType(Me(Me.tableproducts_to_actors.actors_idColumn),Integer)
            End Get
            Set
                Me(Me.tableproducts_to_actors.actors_idColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class products_to_categoriesRow
        Inherits Global.System.Data.DataRow
        
        Private tableproducts_to_categories As products_to_categoriesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproducts_to_categories = CType(Me.Table,products_to_categoriesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_id() As Integer
            Get
                Return CType(Me(Me.tableproducts_to_categories.products_idColumn),Integer)
            End Get
            Set
                Me(Me.tableproducts_to_categories.products_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property categories_id() As Integer
            Get
                Return CType(Me(Me.tableproducts_to_categories.categories_idColumn),Integer)
            End Get
            Set
                Me(Me.tableproducts_to_categories.categories_idColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class products_undertitles_View1Row
        Inherits Global.System.Data.DataRow
        
        Private tableproducts_undertitles_View1 As products_undertitles_View1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproducts_undertitles_View1 = CType(Me.Table,products_undertitles_View1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_id() As Integer
            Get
                Return CType(Me(Me.tableproducts_undertitles_View1.products_idColumn),Integer)
            End Get
            Set
                Me(Me.tableproducts_undertitles_View1.products_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property undertitles_id() As Integer
            Get
                Return CType(Me(Me.tableproducts_undertitles_View1.undertitles_idColumn),Integer)
            End Get
            Set
                Me(Me.tableproducts_undertitles_View1.undertitles_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Language_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_undertitles_View1.Language_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Language_ID' in table 'products_undertitles_View1' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_undertitles_View1.Language_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_undertitles_View1.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'products_undertitles_View1' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_undertitles_View1.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLanguage_IDNull() As Boolean
            Return Me.IsNull(Me.tableproducts_undertitles_View1.Language_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLanguage_IDNull()
            Me(Me.tableproducts_undertitles_View1.Language_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableproducts_undertitles_View1.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableproducts_undertitles_View1.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class products_languages_View1Row
        Inherits Global.System.Data.DataRow
        
        Private tableproducts_languages_View1 As products_languages_View1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproducts_languages_View1 = CType(Me.Table,products_languages_View1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_id() As Integer
            Get
                Return CType(Me(Me.tableproducts_languages_View1.products_idColumn),Integer)
            End Get
            Set
                Me(Me.tableproducts_languages_View1.products_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property languages_id() As Integer
            Get
                Return CType(Me(Me.tableproducts_languages_View1.languages_idColumn),Integer)
            End Get
            Set
                Me(Me.tableproducts_languages_View1.languages_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LanguageNav_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_languages_View1.LanguageNav_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LanguageNav_ID' in table 'products_languages_View1' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_languages_View1.LanguageNav_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_languages_View1.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'products_languages_View1' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_languages_View1.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLanguageNav_IDNull() As Boolean
            Return Me.IsNull(Me.tableproducts_languages_View1.LanguageNav_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLanguageNav_IDNull()
            Me(Me.tableproducts_languages_View1.LanguageNav_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableproducts_languages_View1.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableproducts_languages_View1.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class languagesRow
        Inherits Global.System.Data.DataRow
        
        Private tablelanguages As languagesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablelanguages = CType(Me.Table,languagesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property languages_id() As Integer
            Get
                Return CType(Me(Me.tablelanguages.languages_idColumn),Integer)
            End Get
            Set
                Me(Me.tablelanguages.languages_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property name() As String
            Get
                Return CType(Me(Me.tablelanguages.nameColumn),String)
            End Get
            Set
                Me(Me.tablelanguages.nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property code() As String
            Get
                Return CType(Me(Me.tablelanguages.codeColumn),String)
            End Get
            Set
                Me(Me.tablelanguages.codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property image() As String
            Get
                Try 
                    Return CType(Me(Me.tablelanguages.imageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'image' in table 'languages' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelanguages.imageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property directory() As String
            Get
                Try 
                    Return CType(Me(Me.tablelanguages.directoryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'directory' in table 'languages' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelanguages.directoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sort_order() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablelanguages.sort_orderColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sort_order' in table 'languages' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelanguages.sort_orderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsimageNull() As Boolean
            Return Me.IsNull(Me.tablelanguages.imageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetimageNull()
            Me(Me.tablelanguages.imageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdirectoryNull() As Boolean
            Return Me.IsNull(Me.tablelanguages.directoryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdirectoryNull()
            Me(Me.tablelanguages.directoryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issort_orderNull() As Boolean
            Return Me.IsNull(Me.tablelanguages.sort_orderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsort_orderNull()
            Me(Me.tablelanguages.sort_orderColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class products_cover_view1Row
        Inherits Global.System.Data.DataRow
        
        Private tableproducts_cover_view1 As products_cover_view1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproducts_cover_view1 = CType(Me.Table,products_cover_view1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_cover_view1.products_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_id' in table 'products_cover_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_cover_view1.products_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cover_box_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_cover_view1.cover_box_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cover_box_id' in table 'products_cover_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_cover_view1.cover_box_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_cover_view1.qtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'qty' in table 'products_cover_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_cover_view1.qtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_model() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_cover_view1.products_modelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_model' in table 'products_cover_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_cover_view1.products_modelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_idNull() As Boolean
            Return Me.IsNull(Me.tableproducts_cover_view1.products_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_idNull()
            Me(Me.tableproducts_cover_view1.products_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscover_box_idNull() As Boolean
            Return Me.IsNull(Me.tableproducts_cover_view1.cover_box_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcover_box_idNull()
            Me(Me.tableproducts_cover_view1.cover_box_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableproducts_cover_view1.qtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetqtyNull()
            Me(Me.tableproducts_cover_view1.qtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_modelNull() As Boolean
            Return Me.IsNull(Me.tableproducts_cover_view1.products_modelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_modelNull()
            Me(Me.tableproducts_cover_view1.products_modelColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tmp_products_nlRow
        Inherits Global.System.Data.DataRow
        
        Private tabletmp_products_nl As tmp_products_nlDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletmp_products_nl = CType(Me.Table,tmp_products_nlDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_id_nl() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletmp_products_nl.products_id_nlColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_id_nl' in table 'tmp_products_nl' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmp_products_nl.products_id_nlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_type() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmp_products_nl.products_typeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_type' in table 'tmp_products_nl' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmp_products_nl.products_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_model() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmp_products_nl.products_modelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_model' in table 'tmp_products_nl' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmp_products_nl.products_modelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_image() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmp_products_nl.products_imageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_image' in table 'tmp_products_nl' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmp_products_nl.products_imageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_status() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletmp_products_nl.products_statusColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_status' in table 'tmp_products_nl' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmp_products_nl.products_statusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_id_be() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletmp_products_nl.products_id_beColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_id_be' in table 'tmp_products_nl' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmp_products_nl.products_id_beColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property languages() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmp_products_nl.languagesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'languages' in table 'tmp_products_nl' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmp_products_nl.languagesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subtitles() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmp_products_nl.subtitlesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'subtitles' in table 'tmp_products_nl' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmp_products_nl.subtitlesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_id_nlNull() As Boolean
            Return Me.IsNull(Me.tabletmp_products_nl.products_id_nlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_id_nlNull()
            Me(Me.tabletmp_products_nl.products_id_nlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_typeNull() As Boolean
            Return Me.IsNull(Me.tabletmp_products_nl.products_typeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_typeNull()
            Me(Me.tabletmp_products_nl.products_typeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_modelNull() As Boolean
            Return Me.IsNull(Me.tabletmp_products_nl.products_modelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_modelNull()
            Me(Me.tabletmp_products_nl.products_modelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_imageNull() As Boolean
            Return Me.IsNull(Me.tabletmp_products_nl.products_imageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_imageNull()
            Me(Me.tabletmp_products_nl.products_imageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_statusNull() As Boolean
            Return Me.IsNull(Me.tabletmp_products_nl.products_statusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_statusNull()
            Me(Me.tabletmp_products_nl.products_statusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_id_beNull() As Boolean
            Return Me.IsNull(Me.tabletmp_products_nl.products_id_beColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_id_beNull()
            Me(Me.tabletmp_products_nl.products_id_beColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslanguagesNull() As Boolean
            Return Me.IsNull(Me.tabletmp_products_nl.languagesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlanguagesNull()
            Me(Me.tabletmp_products_nl.languagesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssubtitlesNull() As Boolean
            Return Me.IsNull(Me.tabletmp_products_nl.subtitlesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsubtitlesNull()
            Me(Me.tabletmp_products_nl.subtitlesColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class view_products_statusRow
        Inherits Global.System.Data.DataRow
        
        Private tableview_products_status As view_products_statusDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableview_products_status = CType(Me.Table,view_products_statusDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property status_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableview_products_status.status_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'status_id' in table 'view_products_status' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableview_products_status.status_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property status_desc() As String
            Get
                Try 
                    Return CType(Me(Me.tableview_products_status.status_descColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'status_desc' in table 'view_products_status' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableview_products_status.status_descColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isstatus_idNull() As Boolean
            Return Me.IsNull(Me.tableview_products_status.status_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setstatus_idNull()
            Me(Me.tableview_products_status.status_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isstatus_descNull() As Boolean
            Return Me.IsNull(Me.tableview_products_status.status_descColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setstatus_descNull()
            Me(Me.tableview_products_status.status_descColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class view_products_typeRow
        Inherits Global.System.Data.DataRow
        
        Private tableview_products_type As view_products_typeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableview_products_type = CType(Me.Table,view_products_typeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property type_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableview_products_type.type_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'type_id' in table 'view_products_type' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableview_products_type.type_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property type_desc() As String
            Get
                Try 
                    Return CType(Me(Me.tableview_products_type.type_descColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'type_desc' in table 'view_products_type' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableview_products_type.type_descColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istype_idNull() As Boolean
            Return Me.IsNull(Me.tableview_products_type.type_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settype_idNull()
            Me(Me.tableview_products_type.type_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istype_descNull() As Boolean
            Return Me.IsNull(Me.tableview_products_type.type_descColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settype_descNull()
            Me(Me.tableview_products_type.type_descColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class view_products_mediaRow
        Inherits Global.System.Data.DataRow
        
        Private tableview_products_media As view_products_mediaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableview_products_media = CType(Me.Table,view_products_mediaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property media_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableview_products_media.media_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'media_id' in table 'view_products_media' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableview_products_media.media_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property media_desc() As String
            Get
                Try 
                    Return CType(Me(Me.tableview_products_media.media_descColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'media_desc' in table 'view_products_media' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableview_products_media.media_descColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ismedia_idNull() As Boolean
            Return Me.IsNull(Me.tableview_products_media.media_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setmedia_idNull()
            Me(Me.tableview_products_media.media_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ismedia_descNull() As Boolean
            Return Me.IsNull(Me.tableview_products_media.media_descColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setmedia_descNull()
            Me(Me.tableview_products_media.media_descColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class products_countriesRow
        Inherits Global.System.Data.DataRow
        
        Private tableproducts_countries As products_countriesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproducts_countries = CType(Me.Table,products_countriesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property countries_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_countries.countries_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'countries_id' in table 'products_countries' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_countries.countries_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property countries_name() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_countries.countries_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'countries_name' in table 'products_countries' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_countries.countries_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property inprod() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_countries.inprodColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'inprod' in table 'products_countries' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_countries.inprodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscountries_idNull() As Boolean
            Return Me.IsNull(Me.tableproducts_countries.countries_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcountries_idNull()
            Me(Me.tableproducts_countries.countries_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscountries_nameNull() As Boolean
            Return Me.IsNull(Me.tableproducts_countries.countries_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcountries_nameNull()
            Me(Me.tableproducts_countries.countries_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsinprodNull() As Boolean
            Return Me.IsNull(Me.tableproducts_countries.inprodColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetinprodNull()
            Me(Me.tableproducts_countries.inprodColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class studioRow
        Inherits Global.System.Data.DataRow
        
        Private tablestudio As studioDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablestudio = CType(Me.Table,studioDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studio_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablestudio.studio_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'studio_id' in table 'studio' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudio.studio_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studio_name() As String
            Get
                Try 
                    Return CType(Me(Me.tablestudio.studio_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'studio_name' in table 'studio' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudio.studio_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property studio_type() As String
            Get
                Try 
                    Return CType(Me(Me.tablestudio.studio_typeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'studio_type' in table 'studio' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudio.studio_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isstudio_idNull() As Boolean
            Return Me.IsNull(Me.tablestudio.studio_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setstudio_idNull()
            Me(Me.tablestudio.studio_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isstudio_nameNull() As Boolean
            Return Me.IsNull(Me.tablestudio.studio_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setstudio_nameNull()
            Me(Me.tablestudio.studio_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isstudio_typeNull() As Boolean
            Return Me.IsNull(Me.tablestudio.studio_typeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setstudio_typeNull()
            Me(Me.tablestudio.studio_typeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class view_products_availabilityRow
        Inherits Global.System.Data.DataRow
        
        Private tableview_products_availability As view_products_availabilityDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableview_products_availability = CType(Me.Table,view_products_availabilityDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property availability_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableview_products_availability.availability_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'availability_id' in table 'view_products_availability' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableview_products_availability.availability_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property availability_desc() As String
            Get
                Try 
                    Return CType(Me(Me.tableview_products_availability.availability_descColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'availability_desc' in table 'view_products_availability' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableview_products_availability.availability_descColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isavailability_idNull() As Boolean
            Return Me.IsNull(Me.tableview_products_availability.availability_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setavailability_idNull()
            Me(Me.tableview_products_availability.availability_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isavailability_descNull() As Boolean
            Return Me.IsNull(Me.tableview_products_availability.availability_descColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setavailability_descNull()
            Me(Me.tableview_products_availability.availability_descColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class view_products_ratingRow
        Inherits Global.System.Data.DataRow
        
        Private tableview_products_rating As view_products_ratingDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableview_products_rating = CType(Me.Table,view_products_ratingDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rating_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableview_products_rating.rating_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'rating_id' in table 'view_products_rating' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableview_products_rating.rating_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rating_desc() As String
            Get
                Try 
                    Return CType(Me(Me.tableview_products_rating.rating_descColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'rating_desc' in table 'view_products_rating' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableview_products_rating.rating_descColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Israting_idNull() As Boolean
            Return Me.IsNull(Me.tableview_products_rating.rating_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setrating_idNull()
            Me(Me.tableview_products_rating.rating_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Israting_descNull() As Boolean
            Return Me.IsNull(Me.tableview_products_rating.rating_descColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setrating_descNull()
            Me(Me.tableview_products_rating.rating_descColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class picture_formatRow
        Inherits Global.System.Data.DataRow
        
        Private tablepicture_format As picture_formatDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepicture_format = CType(Me.Table,picture_formatDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property picture_format_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablepicture_format.picture_format_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'picture_format_id' in table 'picture_format' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepicture_format.picture_format_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property language_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablepicture_format.language_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'language_id' in table 'picture_format' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepicture_format.language_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property picture_format_name() As String
            Get
                Try 
                    Return CType(Me(Me.tablepicture_format.picture_format_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'picture_format_name' in table 'picture_format' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepicture_format.picture_format_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ispicture_format_idNull() As Boolean
            Return Me.IsNull(Me.tablepicture_format.picture_format_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setpicture_format_idNull()
            Me(Me.tablepicture_format.picture_format_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islanguage_idNull() As Boolean
            Return Me.IsNull(Me.tablepicture_format.language_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlanguage_idNull()
            Me(Me.tablepicture_format.language_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ispicture_format_nameNull() As Boolean
            Return Me.IsNull(Me.tablepicture_format.picture_format_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setpicture_format_nameNull()
            Me(Me.tablepicture_format.picture_format_nameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class public1Row
        Inherits Global.System.Data.DataRow
        
        Private tablepublic1 As public1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepublic1 = CType(Me.Table,public1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property public_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablepublic1.public_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'public_id' in table 'public1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepublic1.public_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property language_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablepublic1.language_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'language_id' in table 'public1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepublic1.language_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property public_name() As String
            Get
                Try 
                    Return CType(Me(Me.tablepublic1.public_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'public_name' in table 'public1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepublic1.public_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ispublic_idNull() As Boolean
            Return Me.IsNull(Me.tablepublic1.public_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setpublic_idNull()
            Me(Me.tablepublic1.public_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islanguage_idNull() As Boolean
            Return Me.IsNull(Me.tablepublic1.language_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlanguage_idNull()
            Me(Me.tablepublic1.language_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ispublic_nameNull() As Boolean
            Return Me.IsNull(Me.tablepublic1.public_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setpublic_nameNull()
            Me(Me.tablepublic1.public_nameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class seriesRow
        Inherits Global.System.Data.DataRow
        
        Private tableseries As seriesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableseries = CType(Me.Table,seriesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property series_id() As Integer
            Get
                Return CType(Me(Me.tableseries.series_idColumn),Integer)
            End Get
            Set
                Me(Me.tableseries.series_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property series_name() As String
            Get
                Try 
                    Return CType(Me(Me.tableseries.series_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'series_name' in table 'series' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableseries.series_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isseries_nameNull() As Boolean
            Return Me.IsNull(Me.tableseries.series_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setseries_nameNull()
            Me(Me.tableseries.series_nameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class products_languagesRow
        Inherits Global.System.Data.DataRow
        
        Private tableproducts_languages As products_languagesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproducts_languages = CType(Me.Table,products_languagesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property languages_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_languages.languages_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'languages_id' in table 'products_languages' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_languages.languages_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property languagenav_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_languages.languagenav_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'languagenav_id' in table 'products_languages' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_languages.languagenav_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property languages_description() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_languages.languages_descriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'languages_description' in table 'products_languages' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_languages.languages_descriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islanguages_idNull() As Boolean
            Return Me.IsNull(Me.tableproducts_languages.languages_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlanguages_idNull()
            Me(Me.tableproducts_languages.languages_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islanguagenav_idNull() As Boolean
            Return Me.IsNull(Me.tableproducts_languages.languagenav_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlanguagenav_idNull()
            Me(Me.tableproducts_languages.languagenav_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islanguages_descriptionNull() As Boolean
            Return Me.IsNull(Me.tableproducts_languages.languages_descriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlanguages_descriptionNull()
            Me(Me.tableproducts_languages.languages_descriptionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class products_undertitlesRow
        Inherits Global.System.Data.DataRow
        
        Private tableproducts_undertitles As products_undertitlesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproducts_undertitles = CType(Me.Table,products_undertitlesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property undertitles_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_undertitles.undertitles_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'undertitles_id' in table 'products_undertitles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_undertitles.undertitles_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property language_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_undertitles.language_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'language_id' in table 'products_undertitles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_undertitles.language_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property undertitles_description() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_undertitles.undertitles_descriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'undertitles_description' in table 'products_undertitles' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_undertitles.undertitles_descriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isundertitles_idNull() As Boolean
            Return Me.IsNull(Me.tableproducts_undertitles.undertitles_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setundertitles_idNull()
            Me(Me.tableproducts_undertitles.undertitles_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islanguage_idNull() As Boolean
            Return Me.IsNull(Me.tableproducts_undertitles.language_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlanguage_idNull()
            Me(Me.tableproducts_undertitles.language_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isundertitles_descriptionNull() As Boolean
            Return Me.IsNull(Me.tableproducts_undertitles.undertitles_descriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setundertitles_descriptionNull()
            Me(Me.tableproducts_undertitles.undertitles_descriptionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class products_to_languagesRow
        Inherits Global.System.Data.DataRow
        
        Private tableproducts_to_languages As products_to_languagesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproducts_to_languages = CType(Me.Table,products_to_languagesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_to_languages.products_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_id' in table 'products_to_languages' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_to_languages.products_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_languages_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_to_languages.products_languages_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_languages_id' in table 'products_to_languages' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_to_languages.products_languages_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_idNull() As Boolean
            Return Me.IsNull(Me.tableproducts_to_languages.products_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_idNull()
            Me(Me.tableproducts_to_languages.products_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_languages_idNull() As Boolean
            Return Me.IsNull(Me.tableproducts_to_languages.products_languages_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_languages_idNull()
            Me(Me.tableproducts_to_languages.products_languages_idColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class products_to_undertitlesRow
        Inherits Global.System.Data.DataRow
        
        Private tableproducts_to_undertitles As products_to_undertitlesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproducts_to_undertitles = CType(Me.Table,products_to_undertitlesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_to_undertitles.products_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_id' in table 'products_to_undertitles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_to_undertitles.products_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_undertitles_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_to_undertitles.products_undertitles_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_undertitles_id' in table 'products_to_undertitles'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_to_undertitles.products_undertitles_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_idNull() As Boolean
            Return Me.IsNull(Me.tableproducts_to_undertitles.products_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_idNull()
            Me(Me.tableproducts_to_undertitles.products_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_undertitles_idNull() As Boolean
            Return Me.IsNull(Me.tableproducts_to_undertitles.products_undertitles_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_undertitles_idNull()
            Me(Me.tableproducts_to_undertitles.products_undertitles_idColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class products_soundtracksRow
        Inherits Global.System.Data.DataRow
        
        Private tableproducts_soundtracks As products_soundtracksDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproducts_soundtracks = CType(Me.Table,products_soundtracksDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property soundtracks_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_soundtracks.soundtracks_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'soundtracks_id' in table 'products_soundtracks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_soundtracks.soundtracks_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property language_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_soundtracks.language_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'language_id' in table 'products_soundtracks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_soundtracks.language_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property soundtracks_description() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_soundtracks.soundtracks_descriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'soundtracks_description' in table 'products_soundtracks' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_soundtracks.soundtracks_descriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issoundtracks_idNull() As Boolean
            Return Me.IsNull(Me.tableproducts_soundtracks.soundtracks_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsoundtracks_idNull()
            Me(Me.tableproducts_soundtracks.soundtracks_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islanguage_idNull() As Boolean
            Return Me.IsNull(Me.tableproducts_soundtracks.language_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlanguage_idNull()
            Me(Me.tableproducts_soundtracks.language_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issoundtracks_descriptionNull() As Boolean
            Return Me.IsNull(Me.tableproducts_soundtracks.soundtracks_descriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsoundtracks_descriptionNull()
            Me(Me.tableproducts_soundtracks.soundtracks_descriptionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class products_trailersRow
        Inherits Global.System.Data.DataRow
        
        Private tableproducts_trailers As products_trailersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproducts_trailers = CType(Me.Table,products_trailersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property trailers_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_trailers.trailers_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'trailers_id' in table 'products_trailers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_trailers.trailers_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_trailers.products_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_id' in table 'products_trailers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_trailers.products_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property language_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_trailers.language_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'language_id' in table 'products_trailers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_trailers.language_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property trailer() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_trailers.trailerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'trailer' in table 'products_trailers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_trailers.trailerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property broadcast() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_trailers.broadcastColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'broadcast' in table 'products_trailers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_trailers.broadcastColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istrailers_idNull() As Boolean
            Return Me.IsNull(Me.tableproducts_trailers.trailers_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settrailers_idNull()
            Me(Me.tableproducts_trailers.trailers_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_idNull() As Boolean
            Return Me.IsNull(Me.tableproducts_trailers.products_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_idNull()
            Me(Me.tableproducts_trailers.products_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islanguage_idNull() As Boolean
            Return Me.IsNull(Me.tableproducts_trailers.language_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlanguage_idNull()
            Me(Me.tableproducts_trailers.language_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstrailerNull() As Boolean
            Return Me.IsNull(Me.tableproducts_trailers.trailerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettrailerNull()
            Me(Me.tableproducts_trailers.trailerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbroadcastNull() As Boolean
            Return Me.IsNull(Me.tableproducts_trailers.broadcastColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbroadcastNull()
            Me(Me.tableproducts_trailers.broadcastColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class products_to_soundtracksRow
        Inherits Global.System.Data.DataRow
        
        Private tableproducts_to_soundtracks As products_to_soundtracksDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproducts_to_soundtracks = CType(Me.Table,products_to_soundtracksDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_to_soundtracks.products_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_id' in table 'products_to_soundtracks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_to_soundtracks.products_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_soundtracks_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_to_soundtracks.products_soundtracks_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_soundtracks_id' in table 'products_to_soundtracks'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_to_soundtracks.products_soundtracks_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_idNull() As Boolean
            Return Me.IsNull(Me.tableproducts_to_soundtracks.products_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_idNull()
            Me(Me.tableproducts_to_soundtracks.products_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_soundtracks_idNull() As Boolean
            Return Me.IsNull(Me.tableproducts_to_soundtracks.products_soundtracks_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_soundtracks_idNull()
            Me(Me.tableproducts_to_soundtracks.products_soundtracks_idColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class products_description_frRow
        Inherits Global.System.Data.DataRow
        
        Private tableproducts_description_fr As products_description_frDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproducts_description_fr = CType(Me.Table,products_description_frDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description_fr.products_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_id' in table 'products_description_fr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description_fr.products_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property language_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description_fr.language_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'language_id' in table 'products_description_fr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description_fr.language_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_name() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description_fr.products_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_name' in table 'products_description_fr' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description_fr.products_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_description() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description_fr.products_descriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_description' in table 'products_description_fr' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description_fr.products_descriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_bonus() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description_fr.products_bonusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_bonus' in table 'products_description_fr' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description_fr.products_bonusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_url() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description_fr.products_urlColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_url' in table 'products_description_fr' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description_fr.products_urlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_awards() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description_fr.products_awardsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_awards' in table 'products_description_fr' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description_fr.products_awardsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_viewed() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description_fr.products_viewedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_viewed' in table 'products_description_fr' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description_fr.products_viewedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_image_big() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description_fr.products_image_bigColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_image_big' in table 'products_description_fr' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description_fr.products_image_bigColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_idNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description_fr.products_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_idNull()
            Me(Me.tableproducts_description_fr.products_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islanguage_idNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description_fr.language_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlanguage_idNull()
            Me(Me.tableproducts_description_fr.language_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_nameNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description_fr.products_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_nameNull()
            Me(Me.tableproducts_description_fr.products_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_descriptionNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description_fr.products_descriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_descriptionNull()
            Me(Me.tableproducts_description_fr.products_descriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_bonusNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description_fr.products_bonusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_bonusNull()
            Me(Me.tableproducts_description_fr.products_bonusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_urlNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description_fr.products_urlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_urlNull()
            Me(Me.tableproducts_description_fr.products_urlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_awardsNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description_fr.products_awardsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_awardsNull()
            Me(Me.tableproducts_description_fr.products_awardsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_viewedNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description_fr.products_viewedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_viewedNull()
            Me(Me.tableproducts_description_fr.products_viewedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_image_bigNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description_fr.products_image_bigColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_image_bigNull()
            Me(Me.tableproducts_description_fr.products_image_bigColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class products_description_nlRow
        Inherits Global.System.Data.DataRow
        
        Private tableproducts_description_nl As products_description_nlDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproducts_description_nl = CType(Me.Table,products_description_nlDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description_nl.products_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_id' in table 'products_description_nl' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description_nl.products_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property language_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description_nl.language_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'language_id' in table 'products_description_nl' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description_nl.language_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_name() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description_nl.products_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_name' in table 'products_description_nl' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description_nl.products_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_description() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description_nl.products_descriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_description' in table 'products_description_nl' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description_nl.products_descriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_bonus() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description_nl.products_bonusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_bonus' in table 'products_description_nl' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description_nl.products_bonusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_url() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description_nl.products_urlColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_url' in table 'products_description_nl' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description_nl.products_urlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_awards() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description_nl.products_awardsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_awards' in table 'products_description_nl' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description_nl.products_awardsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_viewed() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description_nl.products_viewedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_viewed' in table 'products_description_nl' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description_nl.products_viewedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_image_big() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description_nl.products_image_bigColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_image_big' in table 'products_description_nl' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description_nl.products_image_bigColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_idNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description_nl.products_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_idNull()
            Me(Me.tableproducts_description_nl.products_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islanguage_idNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description_nl.language_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlanguage_idNull()
            Me(Me.tableproducts_description_nl.language_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_nameNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description_nl.products_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_nameNull()
            Me(Me.tableproducts_description_nl.products_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_descriptionNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description_nl.products_descriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_descriptionNull()
            Me(Me.tableproducts_description_nl.products_descriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_bonusNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description_nl.products_bonusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_bonusNull()
            Me(Me.tableproducts_description_nl.products_bonusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_urlNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description_nl.products_urlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_urlNull()
            Me(Me.tableproducts_description_nl.products_urlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_awardsNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description_nl.products_awardsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_awardsNull()
            Me(Me.tableproducts_description_nl.products_awardsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_viewedNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description_nl.products_viewedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_viewedNull()
            Me(Me.tableproducts_description_nl.products_viewedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_image_bigNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description_nl.products_image_bigColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_image_bigNull()
            Me(Me.tableproducts_description_nl.products_image_bigColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class products_description_enRow
        Inherits Global.System.Data.DataRow
        
        Private tableproducts_description_en As products_description_enDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproducts_description_en = CType(Me.Table,products_description_enDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description_en.products_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_id' in table 'products_description_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description_en.products_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property language_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description_en.language_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'language_id' in table 'products_description_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description_en.language_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_name() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description_en.products_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_name' in table 'products_description_en' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description_en.products_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_description() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description_en.products_descriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_description' in table 'products_description_en' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description_en.products_descriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_bonus() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description_en.products_bonusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_bonus' in table 'products_description_en' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description_en.products_bonusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_url() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description_en.products_urlColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_url' in table 'products_description_en' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description_en.products_urlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_awards() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description_en.products_awardsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_awards' in table 'products_description_en' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description_en.products_awardsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_viewed() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description_en.products_viewedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_viewed' in table 'products_description_en' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description_en.products_viewedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_image_big() As String
            Get
                Try 
                    Return CType(Me(Me.tableproducts_description_en.products_image_bigColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_image_big' in table 'products_description_en' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproducts_description_en.products_image_bigColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_idNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description_en.products_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_idNull()
            Me(Me.tableproducts_description_en.products_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islanguage_idNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description_en.language_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlanguage_idNull()
            Me(Me.tableproducts_description_en.language_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_nameNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description_en.products_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_nameNull()
            Me(Me.tableproducts_description_en.products_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_descriptionNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description_en.products_descriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_descriptionNull()
            Me(Me.tableproducts_description_en.products_descriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_bonusNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description_en.products_bonusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_bonusNull()
            Me(Me.tableproducts_description_en.products_bonusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_urlNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description_en.products_urlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_urlNull()
            Me(Me.tableproducts_description_en.products_urlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_awardsNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description_en.products_awardsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_awardsNull()
            Me(Me.tableproducts_description_en.products_awardsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_viewedNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description_en.products_viewedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_viewedNull()
            Me(Me.tableproducts_description_en.products_viewedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_image_bigNull() As Boolean
            Return Me.IsNull(Me.tableproducts_description_en.products_image_bigColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_image_bigNull()
            Me(Me.tableproducts_description_en.products_image_bigColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class categories_fr_view1Row
        Inherits Global.System.Data.DataRow
        
        Private tablecategories_fr_view1 As categories_fr_view1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecategories_fr_view1 = CType(Me.Table,categories_fr_view1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property categories_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecategories_fr_view1.categories_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'categories_id' in table 'categories_fr_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecategories_fr_view1.categories_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property parent_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecategories_fr_view1.parent_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'parent_id' in table 'categories_fr_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecategories_fr_view1.parent_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property categories_type() As String
            Get
                Try 
                    Return CType(Me(Me.tablecategories_fr_view1.categories_typeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'categories_type' in table 'categories_fr_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecategories_fr_view1.categories_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property categories_name() As String
            Get
                Try 
                    Return CType(Me(Me.tablecategories_fr_view1.categories_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'categories_name' in table 'categories_fr_view1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecategories_fr_view1.categories_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property category_selected() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecategories_fr_view1.category_selectedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'category_selected' in table 'categories_fr_view1' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablecategories_fr_view1.category_selectedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscategories_idNull() As Boolean
            Return Me.IsNull(Me.tablecategories_fr_view1.categories_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcategories_idNull()
            Me(Me.tablecategories_fr_view1.categories_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isparent_idNull() As Boolean
            Return Me.IsNull(Me.tablecategories_fr_view1.parent_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setparent_idNull()
            Me(Me.tablecategories_fr_view1.parent_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscategories_typeNull() As Boolean
            Return Me.IsNull(Me.tablecategories_fr_view1.categories_typeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcategories_typeNull()
            Me(Me.tablecategories_fr_view1.categories_typeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscategories_nameNull() As Boolean
            Return Me.IsNull(Me.tablecategories_fr_view1.categories_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcategories_nameNull()
            Me(Me.tablecategories_fr_view1.categories_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscategory_selectedNull() As Boolean
            Return Me.IsNull(Me.tablecategories_fr_view1.category_selectedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcategory_selectedNull()
            Me(Me.tablecategories_fr_view1.category_selectedColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class trailers_broadcastRow
        Inherits Global.System.Data.DataRow
        
        Private tabletrailers_broadcast As trailers_broadcastDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletrailers_broadcast = CType(Me.Table,trailers_broadcastDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property broadcast() As String
            Get
                Try 
                    Return CType(Me(Me.tabletrailers_broadcast.broadcastColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'broadcast' in table 'trailers_broadcast' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrailers_broadcast.broadcastColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbroadcastNull() As Boolean
            Return Me.IsNull(Me.tabletrailers_broadcast.broadcastColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbroadcastNull()
            Me(Me.tabletrailers_broadcast.broadcastColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class product_typeRow
        Inherits Global.System.Data.DataRow
        
        Private tableproduct_type As product_typeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproduct_type = CType(Me.Table,product_typeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeValue() As String
            Get
                Return CType(Me(Me.tableproduct_type.CodeValueColumn),String)
            End Get
            Set
                Me(Me.tableproduct_type.CodeValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableproduct_type.CodeDescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodeDesc' in table 'product_type' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproduct_type.CodeDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeDescNull() As Boolean
            Return Me.IsNull(Me.tableproduct_type.CodeDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeDescNull()
            Me(Me.tableproduct_type.CodeDescColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class _common_production_reviewsRow
        Inherits Global.System.Data.DataRow
        
        Private _tablecommon_production_reviews As _common_production_reviewsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me._tablecommon_production_reviews = CType(Me.Table,_common_production_reviewsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id() As Integer
            Get
                Return CType(Me(Me._tablecommon_production_reviews.idColumn),Integer)
            End Get
            Set
                Me(Me._tablecommon_production_reviews.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property imdb_id() As Integer
            Get
                Try 
                    Return CType(Me(Me._tablecommon_production_reviews.imdb_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'imdb_id' in table 'common_production.reviews' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tablecommon_production_reviews.imdb_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_id() As Integer
            Get
                Try 
                    Return CType(Me(Me._tablecommon_production_reviews.customers_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_id' in table 'common_production.reviews' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me._tablecommon_production_reviews.customers_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isimdb_idNull() As Boolean
            Return Me.IsNull(Me._tablecommon_production_reviews.imdb_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setimdb_idNull()
            Me(Me._tablecommon_production_reviews.imdb_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_idNull() As Boolean
            Return Me.IsNull(Me._tablecommon_production_reviews.customers_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_idNull()
            Me(Me._tablecommon_production_reviews.customers_idColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class streaming_productsRow
        Inherits Global.System.Data.DataRow
        
        Private tablestreaming_products As streaming_productsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablestreaming_products = CType(Me.Table,streaming_productsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property audio() As String
            Get
                Try 
                    Return CType(Me(Me.tablestreaming_products.audioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'audio' in table 'streaming_products' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestreaming_products.audioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subtitle() As String
            Get
                Try 
                    Return CType(Me(Me.tablestreaming_products.subtitleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'subtitle' in table 'streaming_products' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestreaming_products.subtitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsaudioNull() As Boolean
            Return Me.IsNull(Me.tablestreaming_products.audioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetaudioNull()
            Me(Me.tablestreaming_products.audioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssubtitleNull() As Boolean
            Return Me.IsNull(Me.tablestreaming_products.subtitleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsubtitleNull()
            Me(Me.tablestreaming_products.subtitleColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class streaming_trailersRow
        Inherits Global.System.Data.DataRow
        
        Private tablestreaming_trailers As streaming_trailersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablestreaming_trailers = CType(Me.Table,streaming_trailersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id() As Short
            Get
                Try 
                    Return CType(Me(Me.tablestreaming_trailers.idColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'id' in table 'streaming_trailers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestreaming_trailers.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property filename() As String
            Get
                Try 
                    Return CType(Me(Me.tablestreaming_trailers.filenameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'filename' in table 'streaming_trailers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestreaming_trailers.filenameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property audio() As String
            Get
                Try 
                    Return CType(Me(Me.tablestreaming_trailers.audioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'audio' in table 'streaming_trailers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestreaming_trailers.audioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subtitle() As String
            Get
                Try 
                    Return CType(Me(Me.tablestreaming_trailers.subtitleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'subtitle' in table 'streaming_trailers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestreaming_trailers.subtitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property status() As String
            Get
                Try 
                    Return CType(Me(Me.tablestreaming_trailers.statusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'status' in table 'streaming_trailers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestreaming_trailers.statusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidNull() As Boolean
            Return Me.IsNull(Me.tablestreaming_trailers.idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidNull()
            Me(Me.tablestreaming_trailers.idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfilenameNull() As Boolean
            Return Me.IsNull(Me.tablestreaming_trailers.filenameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfilenameNull()
            Me(Me.tablestreaming_trailers.filenameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsaudioNull() As Boolean
            Return Me.IsNull(Me.tablestreaming_trailers.audioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetaudioNull()
            Me(Me.tablestreaming_trailers.audioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssubtitleNull() As Boolean
            Return Me.IsNull(Me.tablestreaming_trailers.subtitleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsubtitleNull()
            Me(Me.tablestreaming_trailers.subtitleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstatusNull() As Boolean
            Return Me.IsNull(Me.tablestreaming_trailers.statusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstatusNull()
            Me(Me.tablestreaming_trailers.statusColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class reviewsRow
        Inherits Global.System.Data.DataRow
        
        Private tablereviews As reviewsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablereviews = CType(Me.Table,reviewsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property reviews_id() As Integer
            Get
                Return CType(Me(Me.tablereviews.reviews_idColumn),Integer)
            End Get
            Set
                Me(Me.tablereviews.reviews_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property products_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablereviews.products_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'products_id' in table 'reviews' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereviews.products_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customers_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablereviews.customers_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customers_id' in table 'reviews' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablereviews.customers_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproducts_idNull() As Boolean
            Return Me.IsNull(Me.tablereviews.products_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproducts_idNull()
            Me(Me.tablereviews.products_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomers_idNull() As Boolean
            Return Me.IsNull(Me.tablereviews.customers_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomers_idNull()
            Me(Me.tablereviews.customers_idColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class productsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As productsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As productsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As productsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class products_comboRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As products_comboRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As products_comboRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As products_comboRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class products_descriptionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As products_descriptionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As products_descriptionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As products_descriptionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class products_labelsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As products_labelsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As products_labelsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As products_labelsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class products_description1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As products_description1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As products_description1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As products_description1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class products_view1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As products_view1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As products_view1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As products_view1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class actorsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As actorsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As actorsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As actorsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class directorsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As directorsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As directorsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As directorsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class categoriesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As categoriesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As categoriesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As categoriesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class categories_descriptionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As categories_descriptionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As categories_descriptionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As categories_descriptionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class products_to_actorsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As products_to_actorsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As products_to_actorsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As products_to_actorsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class products_to_categoriesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As products_to_categoriesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As products_to_categoriesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As products_to_categoriesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class products_undertitles_View1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As products_undertitles_View1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As products_undertitles_View1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As products_undertitles_View1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class products_languages_View1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As products_languages_View1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As products_languages_View1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As products_languages_View1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class languagesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As languagesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As languagesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As languagesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class products_cover_view1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As products_cover_view1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As products_cover_view1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As products_cover_view1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tmp_products_nlRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tmp_products_nlRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tmp_products_nlRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tmp_products_nlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class view_products_statusRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As view_products_statusRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As view_products_statusRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As view_products_statusRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class view_products_typeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As view_products_typeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As view_products_typeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As view_products_typeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class view_products_mediaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As view_products_mediaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As view_products_mediaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As view_products_mediaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class products_countriesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As products_countriesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As products_countriesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As products_countriesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class studioRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As studioRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As studioRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As studioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class view_products_availabilityRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As view_products_availabilityRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As view_products_availabilityRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As view_products_availabilityRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class view_products_ratingRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As view_products_ratingRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As view_products_ratingRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As view_products_ratingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class picture_formatRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As picture_formatRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As picture_formatRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As picture_formatRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class public1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As public1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As public1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As public1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class seriesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As seriesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As seriesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As seriesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class products_languagesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As products_languagesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As products_languagesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As products_languagesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class products_undertitlesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As products_undertitlesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As products_undertitlesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As products_undertitlesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class products_to_languagesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As products_to_languagesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As products_to_languagesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As products_to_languagesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class products_to_undertitlesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As products_to_undertitlesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As products_to_undertitlesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As products_to_undertitlesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class products_soundtracksRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As products_soundtracksRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As products_soundtracksRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As products_soundtracksRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class products_trailersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As products_trailersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As products_trailersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As products_trailersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class products_to_soundtracksRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As products_to_soundtracksRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As products_to_soundtracksRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As products_to_soundtracksRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class products_description_frRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As products_description_frRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As products_description_frRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As products_description_frRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class products_description_nlRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As products_description_nlRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As products_description_nlRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As products_description_nlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class products_description_enRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As products_description_enRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As products_description_enRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As products_description_enRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class categories_fr_view1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As categories_fr_view1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As categories_fr_view1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As categories_fr_view1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class trailers_broadcastRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As trailers_broadcastRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As trailers_broadcastRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As trailers_broadcastRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class product_typeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As product_typeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As product_typeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As product_typeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class _common_production_reviewsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As _common_production_reviewsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As _common_production_reviewsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As _common_production_reviewsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class streaming_productsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As streaming_productsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As streaming_productsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As streaming_productsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class streaming_trailersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As streaming_trailersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As streaming_trailersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As streaming_trailersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class reviewsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As reviewsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As reviewsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As reviewsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
